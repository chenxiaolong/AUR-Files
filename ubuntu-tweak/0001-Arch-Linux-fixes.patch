From 90e4efdc40cc003cbc7ce0a85dda44b4db0c88f7 Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Wed, 31 Dec 2014 21:45:09 -0500
Subject: [PATCH] Arch Linux fixes

---
 MANIFEST.in                                  |    2 +-
 data/com.ubuntu-tweak.daemon.policy.in       |   14 -
 data/com.ubuntu-tweak.tweak.gschema.xml      |   60 +-
 data/ubuntu-tweak.desktop.in                 |    5 -
 data/ui/appcenter.ui                         |  131 ---
 data/ui/appspage.ui                          |   69 --
 data/ui/loginsettings.ui                     |  170 ----
 data/ui/mainwindow.ui                        |   21 -
 data/ui/sourcecenter.ui                      |  279 ------
 data/ui/sourceeditor.ui                      |  395 --------
 data/ui/updatemanager.ui                     |  100 --
 data/ui/uturl.ui                             |  214 -----
 data/uturl                                   |   97 --
 data/uturl.schemas.in                        |   38 -
 po/POTFILES.in                               |   24 -
 setup.cfg                                    |    1 -
 setup.py                                     |    2 +-
 ubuntu_tweak.egg-info/SOURCES.txt            |   30 +-
 ubuntutweak/admins/appcenter.py              |  688 --------------
 ubuntutweak/admins/sourcecenter.py           | 1257 --------------------------
 ubuntutweak/admins/sourceeditor.py           |  491 ----------
 ubuntutweak/apps/__init__.py                 |  456 ----------
 ubuntutweak/backends/daemon.py               |  601 +-----------
 ubuntutweak/clips/cleanerinfo.py             |   10 -
 ubuntutweak/clips/updateinfo.py              |   68 --
 ubuntutweak/common/config.py                 |  107 ---
 ubuntutweak/common/consts.py                 |    2 +-
 ubuntutweak/common/sourcedata.py             |   24 -
 ubuntutweak/janitor/__init__.py              |   45 -
 ubuntutweak/janitor/aptcache_plugin.py       |   27 -
 ubuntutweak/janitor/autoremoval_plugin.py    |   53 --
 ubuntutweak/janitor/oldkernel_plugin.py      |  105 ---
 ubuntutweak/janitor/packageconfigs_plugin.py |   73 --
 ubuntutweak/janitor/softwarecenter_plugin.py |    7 -
 ubuntutweak/main.py                          |   54 +-
 ubuntutweak/module/__init__.py               |   13 -
 ubuntutweak/module/taskinstall.py            |  255 ------
 ubuntutweak/module/updatemanager.py          |  109 ---
 ubuntutweak/modules/__init__.py              |   23 -
 ubuntutweak/network/utdata.py                |  101 ---
 ubuntutweak/network/xmlrpc.py                |    7 -
 ubuntutweak/policykit/__init__.py            |    2 -
 ubuntutweak/policykit/widgets.py             |   91 --
 ubuntutweak/system/__init__.py               |   31 +-
 ubuntutweak/tweaks/loginsettings.py          |  232 -----
 ubuntutweak/utils/package.py                 |  177 ----
 ubuntutweak/utils/ppa.py                     |   54 --
 47 files changed, 13 insertions(+), 6802 deletions(-)
 delete mode 100644 data/ui/appcenter.ui
 delete mode 100644 data/ui/appspage.ui
 delete mode 100644 data/ui/loginsettings.ui
 delete mode 100644 data/ui/sourcecenter.ui
 delete mode 100644 data/ui/sourceeditor.ui
 delete mode 100644 data/ui/updatemanager.ui
 delete mode 100644 data/ui/uturl.ui
 delete mode 100755 data/uturl
 delete mode 100644 data/uturl.schemas.in
 delete mode 100755 ubuntutweak/admins/appcenter.py
 delete mode 100755 ubuntutweak/admins/sourcecenter.py
 delete mode 100755 ubuntutweak/admins/sourceeditor.py
 delete mode 100644 ubuntutweak/apps/__init__.py
 delete mode 100644 ubuntutweak/clips/updateinfo.py
 delete mode 100644 ubuntutweak/common/sourcedata.py
 delete mode 100644 ubuntutweak/janitor/aptcache_plugin.py
 delete mode 100644 ubuntutweak/janitor/autoremoval_plugin.py
 delete mode 100644 ubuntutweak/janitor/oldkernel_plugin.py
 delete mode 100644 ubuntutweak/janitor/packageconfigs_plugin.py
 delete mode 100644 ubuntutweak/janitor/softwarecenter_plugin.py
 delete mode 100755 ubuntutweak/module/taskinstall.py
 delete mode 100755 ubuntutweak/module/updatemanager.py
 delete mode 100644 ubuntutweak/network/utdata.py
 delete mode 100644 ubuntutweak/network/xmlrpc.py
 delete mode 100644 ubuntutweak/policykit/widgets.py
 delete mode 100644 ubuntutweak/tweaks/loginsettings.py
 delete mode 100644 ubuntutweak/utils/package.py
 delete mode 100644 ubuntutweak/utils/ppa.py

diff --git a/MANIFEST.in b/MANIFEST.in
index a7e31d8..b7c5b04 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,5 +1,5 @@
 include *.in COPYING ChangeLog AUTHORS README NEWS
 include data/scripts/*
 include data/templates/*
-recursive-include data *.png *.xml *.in *.conf *.desktop *.service *.ui ubuntu-tweak-daemon script-worker uturl
+recursive-include data *.png *.xml *.in *.conf *.desktop *.service *.ui ubuntu-tweak-daemon script-worker
 recursive-include po *.po *.in
diff --git a/data/com.ubuntu-tweak.daemon.policy.in b/data/com.ubuntu-tweak.daemon.policy.in
index b2502f4..66c2e27 100644
--- a/data/com.ubuntu-tweak.daemon.policy.in
+++ b/data/com.ubuntu-tweak.daemon.policy.in
@@ -36,18 +36,4 @@
     </defaults>
   </action>
 
-  <action id="com.ubuntu-tweak.daemon.edit-sources">
-    <_description>
-      Edit the Software Sources lists
-    </_description>
-    <_message>
-      To edit the software sources, you need to authenticate.
-    </_message>
-    <defaults>
-      <allow_any>auth_admin</allow_any>
-      <allow_inactive>auth_admin</allow_inactive>
-      <allow_active>auth_admin_keep</allow_active>
-    </defaults>
-  </action>
-
 </policyconfig>
diff --git a/data/com.ubuntu-tweak.tweak.gschema.xml b/data/com.ubuntu-tweak.tweak.gschema.xml
index 9e4feaf..fa504a8 100644
--- a/data/com.ubuntu-tweak.tweak.gschema.xml
+++ b/data/com.ubuntu-tweak.tweak.gschema.xml
@@ -8,7 +8,7 @@
 			</description>
 		</key>
 		<key name="clips" type="as">
-			<default>['HardwareInfo', 'SystemInfo', 'CleanerInfo', 'UpdateInfo']</default>
+			<default>['HardwareInfo', 'SystemInfo', 'CleanerInfo']</default>
 			<summary>The clips in overview page</summary>
 			<description>
 			  The clips you want to show in the overview page
@@ -28,13 +28,6 @@
 			  The third-party admins extension
 			</description>
 		</key>
-		<key name="auto-backup" type="b">
-			<default>true</default>
-			<summary>Auto Backup for every sources.list changes</summary>
-			<description>
-			  Auto Backup for every sources.list changes
-			</description>
-		</key>
 		<key name="window-size" type="(ii)">
 			<default>(-1,-1)</default>
 			<summary>The width and height of window</summary>
@@ -49,57 +42,6 @@
 			  Last clip selection location
 			</description>
 		</key>
-		<key name="appcenter-has-update" type="b">
-			<default>false</default>
-			<summary>Last clip selection location</summary>
-			<description>
-			  Last clip selection location
-			</description>
-		</key>
-		<key name="appcenter-version" type="s">
-			<default>''</default>
-			<summary>Last clip selection location</summary>
-			<description>
-			  Last clip selection location
-			</description>
-		</key>
-	</schema>
-	<schema id="com.ubuntu-tweak.apps" path="/apps/ubuntu-tweak/apps/" gettext-domain="ubuntu-tweak">
-		<key name="disable-warning" type="b">
-			<default>false</default>
-			<summary>Show warnings for sources</summary>
-			<description>
-              Show warnings for sources
-			</description>
-		</key>
-		<key name="apps-can-update" type="b">
-			<default>false</default>
-			<summary>Identify if there's update for apps</summary>
-			<description>
-              Identify if there's update for apps
-			</description>
-		</key>
-		<key name="apps-version" type="s">
-			<default>''</default>
-			<summary>The version of online apps data</summary>
-			<description>
-              The version of online apps data
-			</description>
-		</key>
-		<key name="sources-can-update" type="b">
-			<default>false</default>
-			<summary>Identify if there's update for sources</summary>
-			<description>
-              Identify if there's update for sources
-			</description>
-		</key>
-		<key name="sources-version" type="s">
-			<default>''</default>
-			<summary>The version of online sources data</summary>
-			<description>
-              The version of online sources data
-			</description>
-		</key>
 	</schema>
 	<schema id="com.ubuntu-tweak.janitor" path="/apps/ubuntu-tweak/janitor/" gettext-domain="ubuntu-tweak">
 		<key name="plugins" type="as">
diff --git a/data/ubuntu-tweak.desktop.in b/data/ubuntu-tweak.desktop.in
index 11d8aba..a04316b 100644
--- a/data/ubuntu-tweak.desktop.in
+++ b/data/ubuntu-tweak.desktop.in
@@ -16,11 +16,6 @@ _Name=Overview
 Exec=ubuntu-tweak -f overview
 TargetEnvironment=Unity
 
-[Apps Shortcut Group]
-_Name=Apps
-Exec=ubuntu-tweak -f apps
-TargetEnvironment=Unity
-
 [Tweaks Shortcut Group]
 _Name=Tweaks
 Exec=ubuntu-tweak -f tweaks
diff --git a/data/ui/appcenter.ui b/data/ui/appcenter.ui
deleted file mode 100644
index 7e7bc21..0000000
--- a/data/ui/appcenter.ui
+++ /dev/null
@@ -1,131 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkVBox" id="main_vbox">
-    <property name="visible">True</property>
-    <property name="can_focus">False</property>
-    <property name="spacing">6</property>
-    <child>
-      <object class="GtkHBox" id="hbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkScrolledWindow" id="left_sw">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">never</property>
-            <property name="shadow_type">in</property>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkScrolledWindow" id="right_sw">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="shadow_type">in</property>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">0</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkHBox" id="hbox2">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">12</property>
-        <child>
-          <placeholder/>
-        </child>
-        <child>
-          <placeholder/>
-        </child>
-        <child>
-          <object class="GtkLabel" id="time_label">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkHButtonBox" id="hbuttonbox1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">12</property>
-            <child>
-              <object class="GtkButton" id="sync_button">
-                <property name="label">gtk-refresh</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-                <signal name="clicked" handler="on_sync_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="apply_button">
-                <property name="label">gtk-apply</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-                <signal name="clicked" handler="on_apply_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">3</property>
-          </packing>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">False</property>
-        <property name="fill">False</property>
-        <property name="position">1</property>
-      </packing>
-    </child>
-  </object>
-</interface>
diff --git a/data/ui/appspage.ui b/data/ui/appspage.ui
deleted file mode 100644
index bf59620..0000000
--- a/data/ui/appspage.ui
+++ /dev/null
@@ -1,69 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkTreeStore" id="category_model">
-    <columns>
-      <!-- column-name ID -->
-      <column type="gint"/>
-      <!-- column-name Name -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkVBox" id="vbox1">
-    <property name="visible">True</property>
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkHPaned" id="hpaned1">
-        <property name="visible">True</property>
-        <property name="can_focus">True</property>
-        <child>
-          <object class="GtkScrolledWindow" id="scrolledwindow1">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">never</property>
-            <property name="shadow_type">in</property>
-            <child>
-              <object class="GtkTreeView" id="category_view">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="model">category_model</property>
-                <property name="headers_visible">False</property>
-                <property name="headers_clickable">False</property>
-                <child internal-child="selection">
-                  <object class="GtkTreeSelection" id="treeview-selection1"/>
-                </child>
-                <child>
-                  <object class="GtkTreeViewColumn" id="treeviewcolumn2">
-                    <property name="title" translatable="yes">column</property>
-                    <property name="sort_column_id">0</property>
-                    <child>
-                      <object class="GtkCellRendererText" id="name_cellrenderer"/>
-                      <attributes>
-                        <attribute name="text">1</attribute>
-                      </attributes>
-                    </child>
-                  </object>
-                </child>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="resize">False</property>
-            <property name="shrink">True</property>
-          </packing>
-        </child>
-        <child>
-          <placeholder/>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">0</property>
-      </packing>
-    </child>
-    <child>
-      <placeholder/>
-    </child>
-  </object>
-</interface>
diff --git a/data/ui/loginsettings.ui b/data/ui/loginsettings.ui
deleted file mode 100644
index 08d6713..0000000
--- a/data/ui/loginsettings.ui
+++ /dev/null
@@ -1,170 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkVBox" id="main_vbox">
-    <property name="visible">True</property>
-    <property name="sensitive">False</property>
-    <property name="can_focus">False</property>
-    <property name="spacing">6</property>
-    <child>
-      <object class="GtkLabel" id="label1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="label" translatable="yes">Click the button to change the login screen logo</property>
-      </object>
-      <packing>
-        <property name="expand">False</property>
-        <property name="fill">False</property>
-        <property name="position">0</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkHBox" id="hbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <child>
-          <placeholder/>
-        </child>
-        <child>
-          <object class="GtkButton" id="logo_button">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="receives_default">True</property>
-            <property name="use_action_appearance">False</property>
-            <signal name="clicked" handler="on_logo_button_clicked" swapped="no"/>
-            <child>
-              <object class="GtkImage" id="logo_image">
-                <property name="width_request">64</property>
-                <property name="height_request">64</property>
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="stock">gtk-missing-image</property>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <placeholder/>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">1</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkLabel" id="bg_label">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="label" translatable="yes">Click the button to change the login screen background</property>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">2</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkAlignment" id="bg_align">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <child>
-          <object class="GtkVBox" id="vbox2">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkHBox" id="hbox2">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <child>
-                  <placeholder/>
-                </child>
-                <child>
-                  <object class="GtkButton" id="background_button">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                    <property name="use_action_appearance">False</property>
-                    <signal name="clicked" handler="on_background_button_clicked" swapped="no"/>
-                    <child>
-                      <object class="GtkImage" id="background_image">
-                        <property name="width_request">160</property>
-                        <property name="height_request">120</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="stock">gtk-missing-image</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <placeholder/>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkAlignment" id="alignment1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <child>
-                  <object class="GtkHBox" id="hbox3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="same_background_button">
-                        <property name="label" translatable="yes">Set the same background as the current desktop background</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <signal name="clicked" handler="on_same_background_button_clicked" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">False</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">3</property>
-      </packing>
-    </child>
-  </object>
-</interface>
diff --git a/data/ui/mainwindow.ui b/data/ui/mainwindow.ui
index dc9c796..24dfa98 100644
--- a/data/ui/mainwindow.ui
+++ b/data/ui/mainwindow.ui
@@ -350,27 +350,6 @@ Jeonkwan Chan &lt;jeonkwan@gmail.com&gt; Mockup Designer of 0.6</property>
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkRadioButton" id="apps_button">
-                                <property name="label" translatable="yes">_Apps</property>
-                                <property name="use_action_appearance">False</property>
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">False</property>
-                                <property name="use_action_appearance">False</property>
-                                <property name="use_underline">True</property>
-                                <property name="xalign">0.5</property>
-                                <property name="active">True</property>
-                                <property name="draw_indicator">False</property>
-                                <property name="group">overview_button</property>
-                                <signal name="toggled" handler="on_apps_button_toggled" swapped="no"/>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                            <child>
                               <object class="GtkRadioButton" id="tweaks_button">
                                 <property name="label" translatable="yes">_Tweaks</property>
                                 <property name="use_action_appearance">False</property>
diff --git a/data/ui/sourcecenter.ui b/data/ui/sourcecenter.ui
deleted file mode 100644
index 8e7cdc3..0000000
--- a/data/ui/sourcecenter.ui
+++ /dev/null
@@ -1,279 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkVBox" id="main_vbox">
-    <property name="visible">True</property>
-    <property name="can_focus">False</property>
-    <property name="spacing">6</property>
-    <child>
-      <object class="GtkHBox" id="hbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkScrolledWindow" id="left_sw">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">never</property>
-            <property name="shadow_type">in</property>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="vbox1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkScrolledWindow" id="right_sw">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="shadow_type">in</property>
-                <child>
-                  <placeholder/>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkExpander" id="expander">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <child>
-                  <object class="GtkGrid" id="grid2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="row_spacing">6</property>
-                    <property name="column_spacing">12</property>
-                    <child>
-                      <object class="GtkLabel" id="label2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label" translatable="yes">&lt;b&gt;Homepage&lt;/b&gt;</property>
-                        <property name="use_markup">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">0</property>
-                        <property name="top_attach">0</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label3">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label" translatable="yes">&lt;b&gt;Source URL&lt;/b&gt;</property>
-                        <property name="use_markup">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">0</property>
-                        <property name="top_attach">1</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label4">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label" translatable="yes">&lt;b&gt;Description&lt;/b&gt;</property>
-                        <property name="use_markup">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">0</property>
-                        <property name="top_attach">2</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLinkButton" id="homepage_button">
-                        <property name="label" translatable="yes">http://ubuntu-tweak.com</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="has_tooltip">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="relief">none</property>
-                        <property name="xalign">0</property>
-                        <property name="uri">http://ubuntu-tweak.com</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">0</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLinkButton" id="url_button">
-                        <property name="label" translatable="yes">http://ubuntu-tweak.com</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="has_tooltip">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="relief">none</property>
-                        <property name="xalign">0</property>
-                        <property name="uri">http://ubuntu-tweak.com</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">1</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="description_label">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Description is here</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">2</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                </child>
-                <child type="label">
-                  <object class="GtkLabel" id="detail_expander">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="label" translatable="yes">Details</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">0</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkHBox" id="hbox2">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">12</property>
-        <child>
-          <placeholder/>
-        </child>
-        <child>
-          <object class="GtkLabel" id="time_label">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="ypad">5</property>
-            <property name="label">label</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkHButtonBox" id="hbuttonbox1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">12</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="purge_ppa_button">
-                <property name="label" translatable="yes">Purge PPA</property>
-                <property name="use_action_appearance">False</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <signal name="clicked" handler="on_purge_ppa_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="sync_button">
-                <property name="label">gtk-refresh</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-                <signal name="clicked" handler="on_sync_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="update_button">
-                <property name="label">gtk-refresh</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-                <property name="use_stock">True</property>
-                <signal name="clicked" handler="on_update_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">False</property>
-        <property name="fill">False</property>
-        <property name="position">1</property>
-      </packing>
-    </child>
-  </object>
-</interface>
diff --git a/data/ui/sourceeditor.ui b/data/ui/sourceeditor.ui
deleted file mode 100644
index c4fbbb6..0000000
--- a/data/ui/sourceeditor.ui
+++ /dev/null
@@ -1,395 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkListStore" id="backup_model">
-    <columns>
-      <!-- column-name path -->
-      <column type="gchararray"/>
-      <!-- column-name name -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkHPaned" id="hpaned1">
-    <property name="visible">True</property>
-    <property name="can_focus">True</property>
-    <child>
-      <object class="GtkScrolledWindow" id="scrolledwindow1">
-        <property name="visible">True</property>
-        <property name="can_focus">True</property>
-        <property name="hscrollbar_policy">never</property>
-        <property name="shadow_type">in</property>
-        <child>
-          <object class="GtkTreeView" id="list_view">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="model">list_model</property>
-            <property name="headers_visible">False</property>
-            <property name="headers_clickable">False</property>
-            <property name="rules_hint">True</property>
-            <property name="search_column">0</property>
-            <child internal-child="selection">
-              <object class="GtkTreeSelection" id="treeview-selection1"/>
-            </child>
-            <child>
-              <object class="GtkTreeViewColumn" id="treeviewcolumn1">
-                <property name="title" translatable="yes">column</property>
-                <child>
-                  <object class="GtkCellRendererText" id="cellrenderertext2"/>
-                  <attributes>
-                    <attribute name="text">1</attribute>
-                  </attributes>
-                </child>
-              </object>
-            </child>
-          </object>
-        </child>
-      </object>
-      <packing>
-        <property name="resize">False</property>
-        <property name="shrink">True</property>
-      </packing>
-    </child>
-    <child>
-      <object class="GtkVBox" id="vbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkVBox" id="text_vbox">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkScrolledWindow" id="sw1">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="shadow_type">in</property>
-                <child>
-                  <placeholder/>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="pack_type">end</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkToolbar" id="toolbar1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="toolbar_style">both-horiz</property>
-            <child>
-              <object class="GtkToolButton" id="save_button">
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">False</property>
-                <property name="has_tooltip">True</property>
-                <property name="tooltip_markup" translatable="yes">Save this source</property>
-                <property name="tooltip_text" translatable="yes">Save this source</property>
-                <property name="use_action_appearance">False</property>
-                <property name="label" translatable="yes">toolbutton1</property>
-                <property name="use_underline">True</property>
-                <property name="stock_id">gtk-save</property>
-                <signal name="clicked" handler="on_save_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="homogeneous">True</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkToolButton" id="redo_button">
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">False</property>
-                <property name="has_tooltip">True</property>
-                <property name="tooltip_markup" translatable="yes">Redo this source</property>
-                <property name="tooltip_text" translatable="yes">Redo this source</property>
-                <property name="use_action_appearance">False</property>
-                <property name="label" translatable="yes">toolbutton2</property>
-                <property name="use_underline">True</property>
-                <property name="stock_id">gtk-redo</property>
-                <signal name="clicked" handler="on_redo_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="homogeneous">True</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkToolButton" id="delete_button">
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">False</property>
-                <property name="has_tooltip">True</property>
-                <property name="tooltip_markup" translatable="yes">Delete this source</property>
-                <property name="tooltip_text" translatable="yes">Delete this source</property>
-                <property name="use_action_appearance">False</property>
-                <property name="label" translatable="yes">toolbutton3</property>
-                <property name="use_underline">True</property>
-                <property name="stock_id">gtk-delete</property>
-                <signal name="clicked" handler="on_delete_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="homogeneous">True</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="recover_box1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkAlignment" id="alignment2">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="top_padding">20</property>
-                <property name="bottom_padding">20</property>
-                <property name="left_padding">20</property>
-                <property name="right_padding">20</property>
-                <child>
-                  <object class="GtkHBox" id="hbox2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">12</property>
-                    <child>
-                      <object class="GtkLabel" id="label4">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Backup History:</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkComboBox" id="backup_combobox">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="model">backup_model</property>
-                        <signal name="changed" handler="on_backup_combobox_changed" swapped="no"/>
-                        <child>
-                          <object class="GtkCellRendererText" id="cellrenderertext1"/>
-                          <attributes>
-                            <attribute name="text">1</attribute>
-                          </attributes>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="backup_delete_button">
-                        <property name="visible">True</property>
-                        <property name="sensitive">False</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <signal name="clicked" handler="on_backup_delete_button_clicked" swapped="no"/>
-                        <child>
-                          <object class="GtkImage" id="image1">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="icon_name">edit-delete</property>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">2</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="backup_edit_button">
-                        <property name="visible">True</property>
-                        <property name="sensitive">False</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <signal name="clicked" handler="on_backup_edit_button_clicked" swapped="no"/>
-                        <child>
-                          <object class="GtkImage" id="image2">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="stock">gtk-edit</property>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="backup_view_button">
-                        <property name="visible">True</property>
-                        <property name="sensitive">False</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <signal name="clicked" handler="on_backup_view_button_clicked" swapped="no"/>
-                        <child>
-                          <object class="GtkImage" id="image3">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="stock">gtk-zoom-in</property>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">4</property>
-                      </packing>
-                    </child>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkHBox" id="hbox3">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">12</property>
-                <child>
-                  <object class="GtkCheckButton" id="auto_backup_button">
-                    <property name="label" translatable="yes">Auto Backup</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">False</property>
-                    <property name="use_action_appearance">False</property>
-                    <property name="xalign">0</property>
-                    <property name="draw_indicator">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">12</property>
-                    <property name="layout_style">end</property>
-                    <child>
-                      <object class="GtkButton" id="recover_button">
-                        <property name="label" translatable="yes">_Recover</property>
-                        <property name="visible">True</property>
-                        <property name="sensitive">False</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_underline">True</property>
-                        <signal name="clicked" handler="on_recover_button_clicked" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="pack_type">end</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="backup_button">
-                        <property name="label" translatable="yes">_Backup</property>
-                        <property name="visible">True</property>
-                        <property name="sensitive">False</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_underline">True</property>
-                        <signal name="clicked" handler="on_backup_button_clicked" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="pack_type">end</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="update_button">
-                        <property name="label" translatable="yes">U_pdate</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="use_underline">True</property>
-                        <signal name="clicked" handler="on_update_button_clicked" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="pack_type">end</property>
-                        <property name="position">2</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="pack_type">end</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-      </object>
-      <packing>
-        <property name="resize">True</property>
-        <property name="shrink">True</property>
-      </packing>
-    </child>
-  </object>
-  <object class="GtkListStore" id="list_model">
-    <columns>
-      <!-- column-name COLUMN_PATH -->
-      <column type="gchararray"/>
-      <!-- column-name COLUMN_NAME -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-</interface>
diff --git a/data/ui/updatemanager.ui b/data/ui/updatemanager.ui
deleted file mode 100644
index 38953e8..0000000
--- a/data/ui/updatemanager.ui
+++ /dev/null
@@ -1,100 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkWindow" id="window1">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkVBox" id="main_vbox">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkScrolledWindow" id="sw1">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="shadow_type">in</property>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="vbox1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">6</property>
-            <child>
-              <placeholder/>
-            </child>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <placeholder/>
-        </child>
-        <child>
-          <object class="GtkHButtonBox" id="hbuttonbox1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">12</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="install_button">
-                <property name="label" translatable="yes">_Install Update</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-                <signal name="clicked" handler="on_install_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="refresh_button">
-                <property name="label">gtk-refresh</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-                <signal name="clicked" handler="on_refresh_button_clicked" swapped="no"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">3</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-</interface>
diff --git a/data/ui/uturl.ui b/data/ui/uturl.ui
deleted file mode 100644
index bf13aa3..0000000
--- a/data/ui/uturl.ui
+++ /dev/null
@@ -1,214 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkAction" id="action1"/>
-  <object class="GtkDialog" id="confirmation_dialog">
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes">Ubuntu Tweak</property>
-    <property name="resizable">False</property>
-    <property name="modal">True</property>
-    <property name="window_position">center-always</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="dialog-vbox2">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action_area2">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="no_button">
-                <property name="label">gtk-cancel</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="has_default">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="yes_button">
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <child>
-                  <object class="GtkAlignment" id="alignment1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xscale">0</property>
-                    <property name="yscale">0</property>
-                    <child>
-                      <object class="GtkHBox" id="hbox2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">2</property>
-                        <child>
-                          <object class="GtkImage" id="image1">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="stock">gtk-save</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">False</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkLabel" id="label1">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">_Install</property>
-                            <property name="use_underline">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">False</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                    </child>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkHBox" id="hbox1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">10</property>
-            <child>
-              <object class="GtkImage" id="dialog_image">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="yalign">0</property>
-                <property name="stock">gtk-dialog-question</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkVBox" id="vbox1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">12</property>
-                <child>
-                  <object class="GtkLabel" id="header_label">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="use_markup">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="body_label">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkExpander" id="description_expander">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <child>
-                      <object class="GtkScrolledWindow" id="scrolledwindow1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="hscrollbar_policy">never</property>
-                        <property name="shadow_type">out</property>
-                        <child>
-                          <object class="GtkTextView" id="description_text_view">
-                            <property name="width_request">400</property>
-                            <property name="height_request">200</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-                            <property name="editable">False</property>
-                            <property name="wrap_mode">word</property>
-                            <property name="left_margin">5</property>
-                            <property name="right_margin">5</property>
-                          </object>
-                        </child>
-                      </object>
-                    </child>
-                    <child type="label">
-                      <object class="GtkLabel" id="description_label">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label" translatable="yes">Description</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">2</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="padding">5</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="0">no_button</action-widget>
-      <action-widget response="-8">yes_button</action-widget>
-    </action-widgets>
-  </object>
-</interface>
diff --git a/data/uturl b/data/uturl
deleted file mode 100755
index 0b9bf3a..0000000
--- a/data/uturl
+++ /dev/null
@@ -1,97 +0,0 @@
-#!/usr/bin/python
-
-# Ubuntu Tweak - PyGTK based desktop configuration tool
-#
-# Copyright (C) 2007-2010 TualatriX <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import sys
-import dbus
-import dbus.service
-import dbus.mainloop.glib
-
-from gi.repository import GObject, Notify
-
-GObject.threads_init()
-dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
-dbus.mainloop.glib.threads_init()
-
-from ubuntutweak.gui import GuiBuilder
-from ubuntutweak.policykit.dbusproxy import proxy
-from ubuntutweak.gui.dialogs import InfoDialog
-
-UTURL_DBUS_IFACE = 'com.ubuntu_tweak.UtUrl'
-UTURL_DBUS_PATH = '/com/ubuntu_tweak/UtUrl'
-
-class UtUrl(dbus.service.Object):
-    to_add = []
-
-    def __init__(self, session_bus):
-        bus_name = dbus.service.BusName(UTURL_DBUS_IFACE, bus=session_bus)
-        dbus.service.Object.__init__(self, bus_name, UTURL_DBUS_PATH)
-
-        self.window = GuiBuilder('uturl.ui')
-        self.window.confirmation_dialog.set_keep_above(True)
-        self.window.header_label.set_markup('<big>Install additional software?</big>')
-
-    @dbus.service.method(dbus_interface=UTURL_DBUS_IFACE,
-                         in_signature='s', out_signature='')
-    def add_package(self, package):
-        self.to_add.append(package)
-        self.show_notify('"%s" is adding to the install list.' % package)
-
-    @dbus.service.method(dbus_interface=UTURL_DBUS_IFACE,
-                         in_signature='s', out_signature='')
-    def show_notify(self, message):
-        notify = Notify.Notification()
-        notify.update(summary=_('Ubuntu Tweak'),
-                      body=message,
-                      icon='ubuntu-tweak')
-        notify.set_hint_string ("x-canonical-append", "");
-        notify.show()
-
-    def run(self):
-        self.window.body_label.set_text('Do you want to install package "%s"?' % 
-                                 ', '.join(self.to_add))
-        self.window.confirmation_dialog.run()
-
-    def destroy(self):
-        self.window.confirmation_dialog.destroy()
-
-if __name__ == "__main__":
-    package = sys.argv[1].split(':')[1]
-
-    installed = proxy.get_package_status(package)
-
-    session_bus = dbus.SessionBus()
-
-    if session_bus.request_name(UTURL_DBUS_IFACE) != \
-            dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
-        uturl = session_bus.get_object(UTURL_DBUS_IFACE, UTURL_DBUS_PATH)
-        if installed:
-            uturl.show_notify('"%s" is already installed.' % package)
-        else:
-            uturl.add_package(package)
-    else:
-        uturl = UtUrl(session_bus)
-
-        if installed:
-            dialog = InfoDialog('"%s" is already installed.' % package)
-            dialog.launch()
-        else:
-            uturl.add_package(package)
-            response = uturl.run()
-            uturl.destroy()
diff --git a/data/uturl.schemas.in b/data/uturl.schemas.in
deleted file mode 100644
index 4749a1c..0000000
--- a/data/uturl.schemas.in
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0"?>
-<gconfschemafile>
-  <schemalist>
-    <schema>
-      <key>/schemas/desktop/gnome/url-handlers/ut/enabled</key>
-      <applyto>/desktop/gnome/url-handlers/ut/enabled</applyto>
-      <owner>uturl</owner>
-      <type>bool</type>
-      <default>true</default>
-      <locale name="C">
-        <short>Whether the specified command should handle "ut" URLs</short>
-        <long>True if the command specified in the "command" key should handle "ut" URLs.</long>
-      </locale>
-    </schema>
-    <schema>
-      <key>/schemas/desktop/gnome/url-handlers/ut/command</key>
-      <applyto>/desktop/gnome/url-handlers/ut/command</applyto>
-      <owner>uturl</owner>
-      <type>string</type>
-      <default>/usr/share/ubuntu-tweak/uturl "%s"</default>
-      <locale name="C">
-        <short>The handler for "ut" URLs</short>
-        <long>The command used to handle "ut" URLs, if enabled.</long>
-      </locale>
-    </schema>
-    <schema>
-      <key>/schemas/desktop/gnome/url-handlers/ut/needs_terminal</key>
-      <applyto>/desktop/gnome/url-handlers/ut/needs_terminal</applyto>
-      <owner>uturl</owner>
-      <type>bool</type>
-      <default>false</default>
-      <locale name="C">
-        <short>Run the command in a terminal</short>
-        <long>True if the command used to handle this type of URL should be run in a terminal.</long>
-      </locale>
-    </schema>
-  </schemalist>
-</gconfschemafile>
diff --git a/po/POTFILES.in b/po/POTFILES.in
index ab6c2bf..e2d7499 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -3,35 +3,24 @@ data/ubuntu-tweak.desktop.in
 data/com.ubuntu-tweak.daemon.policy.in
 [type: gettext/glade]data/ui/window.ui
 [type: gettext/glade]data/ui/preferences.ui
-[type: gettext/glade]data/ui/uturl.ui
 [type: gettext/glade]data/ui/templates.ui
-[type: gettext/glade]data/ui/appspage.ui
-[type: gettext/glade]data/ui/sourcecenter.ui
-[type: gettext/glade]data/ui/appcenter.ui
 [type: gettext/glade]data/ui/brokenmodule.ui
-[type: gettext/glade]data/ui/loginsettings.ui
 [type: gettext/glade]data/ui/quicklists.ui
 [type: gettext/glade]data/ui/clippage.ui
 [type: gettext/glade]data/ui/filetypemanager.ui
-[type: gettext/glade]data/ui/sourceeditor.ui
-[type: gettext/glade]data/ui/updatemanager.ui
 [type: gettext/glade]data/ui/janitorpage.ui
 [type: gettext/glade]data/ui/traceback.ui
 [type: gettext/glade]data/ui/mainwindow.ui
 [type: gettext/glade]data/ui/desktoprecovery.ui
 ubuntutweak/factory.py
 ubuntutweak/system/__init__.py
-ubuntutweak/network/xmlrpc.py
 ubuntutweak/network/downloadmanager.py
-ubuntutweak/network/utdata.py
 ubuntutweak/network/__init__.py
-ubuntutweak/policykit/widgets.py
 ubuntutweak/policykit/dbusproxy.py
 ubuntutweak/policykit/__init__.py
 ubuntutweak/common/consts.py
 ubuntutweak/common/config.py
 ubuntutweak/common/inifile.py
-ubuntutweak/common/sourcedata.py
 ubuntutweak/common/download.py
 ubuntutweak/common/debug.py
 ubuntutweak/common/__init__.py
@@ -39,25 +28,17 @@ ubuntutweak/janitor/gwibber_plugin.py
 ubuntutweak/janitor/opera_plugin.py
 ubuntutweak/janitor/googleearth_plugin.py
 ubuntutweak/janitor/thumbnailcache_plugin.py
-ubuntutweak/janitor/softwarecenter_plugin.py
 ubuntutweak/janitor/mozilla_plugin.py
 ubuntutweak/janitor/chrome_plugin.py
 ubuntutweak/janitor/empathy_plugin.py
-ubuntutweak/janitor/autoremoval_plugin.py
-ubuntutweak/janitor/aptcache_plugin.py
 ubuntutweak/janitor/__init__.py
-ubuntutweak/janitor/packageconfigs_plugin.py
-ubuntutweak/janitor/oldkernel_plugin.py
 ubuntutweak/settings/gconfsettings.py
 ubuntutweak/settings/gsettings.py
 ubuntutweak/settings/configsettings.py
 ubuntutweak/settings/compizsettings.py
 ubuntutweak/settings/__init__.py
 ubuntutweak/admins/desktoprecovery.py
-ubuntutweak/admins/sourcecenter.py
-ubuntutweak/admins/sourceeditor.py
 ubuntutweak/admins/templates.py
-ubuntutweak/admins/appcenter.py
 ubuntutweak/admins/userdir.py
 ubuntutweak/admins/quicklists.py
 ubuntutweak/admins/scripts.py
@@ -73,19 +54,16 @@ ubuntutweak/tweaks/session.py
 ubuntutweak/tweaks/workspace.py
 ubuntutweak/tweaks/sound.py
 ubuntutweak/tweaks/misc.py
-ubuntutweak/tweaks/loginsettings.py
 ubuntutweak/tweaks/fonts.py
 ubuntutweak/tweaks/unity.py
 ubuntutweak/tweaks/__init__.py
 ubuntutweak/tweaks/workarounds.py
 ubuntutweak/tweaks/lovewallpaperhd.py
-ubuntutweak/apps/__init__.py
 ubuntutweak/clips/userinfo.py
 ubuntutweak/clips/hardwareinfo.py
 ubuntutweak/clips/systeminfo.py
 ubuntutweak/clips/cleanerinfo.py
 ubuntutweak/clips/__init__.py
-ubuntutweak/clips/updateinfo.py
 ubuntutweak/gui/widgets.py
 ubuntutweak/gui/dialogs.py
 ubuntutweak/gui/cellrenderers.py
@@ -98,10 +76,8 @@ ubuntutweak/run_test.py
 ubuntutweak/backends/daemon.py
 ubuntutweak/backends/__init__.py
 ubuntutweak/__init__.py
-ubuntutweak/utils/ppa.py
 ubuntutweak/utils/parser.py
 ubuntutweak/utils/icon.py
 ubuntutweak/utils/__init__.py
 ubuntutweak/utils/tar.py
-ubuntutweak/utils/package.py
 ubuntutweak/preferences.py
diff --git a/setup.cfg b/setup.cfg
index 770db41..114f769 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -7,7 +7,6 @@ help = True
 domain = ubuntu-tweak
 xml_files = [('share/polkit-1/actions/', ('data/com.ubuntu-tweak.daemon.policy.in',))]
 desktop_files = [	("share/applications",("data/ubuntu-tweak.desktop.in",)) ]
-schemas_files = [("share/gconf/schemas", ("data/uturl.schemas.in",))]
 
 [egg_info]
 tag_build = 
diff --git a/setup.py b/setup.py
index 149bce4..5b1b142 100755
--- a/setup.py
+++ b/setup.py
@@ -18,7 +18,7 @@ setup(name='ubuntu-tweak',
           ('share/ubuntu-tweak/pixmaps/', glob.glob('data/pixmaps/*.png')),
           ('share/ubuntu-tweak/scripts/', glob.glob('data/scripts/*')),
           ('share/ubuntu-tweak/templates/', glob.glob('data/templates/*')),
-          ('share/ubuntu-tweak/', ['data/script-worker', 'data/uturl', 'data/ubuntu-tweak-daemon']),
+          ('share/ubuntu-tweak/', ['data/script-worker', 'data/ubuntu-tweak-daemon']),
           ],
       license='GNU GPL',
       platforms='linux',
diff --git a/ubuntu_tweak.egg-info/SOURCES.txt b/ubuntu_tweak.egg-info/SOURCES.txt
index 30d75f0..4834ae5 100644
--- a/ubuntu_tweak.egg-info/SOURCES.txt
+++ b/ubuntu_tweak.egg-info/SOURCES.txt
@@ -17,8 +17,6 @@ data/ubuntu-tweak.desktop
 data/ubuntu-tweak.desktop.in
 data/ubuntu-tweak.png
 data/unity-lens-ubuntu-tweak.service
-data/uturl
-data/uturl.schemas.in
 data/icons/128x128/apps/ubuntu-tweak.png
 data/icons/16x16/apps/ubuntu-tweak.png
 data/icons/22x22/apps/ubuntu-tweak.png
@@ -66,23 +64,16 @@ data/templates/plain-text-document.txt
 data/templates/pygtk-example.py
 data/templates/python-script.py
 data/templates/shell-script.sh
-data/ui/appcenter.ui
-data/ui/appspage.ui
 data/ui/brokenmodule.ui
 data/ui/clippage.ui
 data/ui/desktoprecovery.ui
 data/ui/filetypemanager.ui
 data/ui/janitorpage.ui
-data/ui/loginsettings.ui
 data/ui/mainwindow.ui
 data/ui/preferences.ui
 data/ui/quicklists.ui
-data/ui/sourcecenter.ui
-data/ui/sourceeditor.ui
 data/ui/templates.ui
 data/ui/traceback.ui
-data/ui/updatemanager.ui
-data/ui/uturl.ui
 data/ui/window.ui
 po/POTFILES.in
 po/ar.po
@@ -165,24 +156,19 @@ ubuntutweak/main.py
 ubuntutweak/preferences.py
 ubuntutweak/run_test.py
 ubuntutweak/admins/__init__.py
-ubuntutweak/admins/appcenter.py
 ubuntutweak/admins/desktoprecovery.py
 ubuntutweak/admins/filetypemanager.py
 ubuntutweak/admins/quicklists.py
 ubuntutweak/admins/scripts.py
 ubuntutweak/admins/shortcuts.py
-ubuntutweak/admins/sourcecenter.py
-ubuntutweak/admins/sourceeditor.py
 ubuntutweak/admins/templates.py
 ubuntutweak/admins/userdir.py
-ubuntutweak/apps/__init__.py
 ubuntutweak/backends/__init__.py
 ubuntutweak/backends/daemon.py
 ubuntutweak/clips/__init__.py
 ubuntutweak/clips/cleanerinfo.py
 ubuntutweak/clips/hardwareinfo.py
 ubuntutweak/clips/systeminfo.py
-ubuntutweak/clips/updateinfo.py
 ubuntutweak/clips/userinfo.py
 ubuntutweak/common/__init__.py
 ubuntutweak/common/config.py
@@ -190,7 +176,6 @@ ubuntutweak/common/consts.py
 ubuntutweak/common/debug.py
 ubuntutweak/common/download.py
 ubuntutweak/common/inifile.py
-ubuntutweak/common/sourcedata.py
 ubuntutweak/gui/__init__.py
 ubuntutweak/gui/cellrenderers.py
 ubuntutweak/gui/containers.py
@@ -199,30 +184,20 @@ ubuntutweak/gui/gtk.py
 ubuntutweak/gui/treeviews.py
 ubuntutweak/gui/widgets.py
 ubuntutweak/janitor/__init__.py
-ubuntutweak/janitor/aptcache_plugin.py
-ubuntutweak/janitor/autoremoval_plugin.py
 ubuntutweak/janitor/chrome_plugin.py
 ubuntutweak/janitor/empathy_plugin.py
 ubuntutweak/janitor/googleearth_plugin.py
 ubuntutweak/janitor/gwibber_plugin.py
 ubuntutweak/janitor/mozilla_plugin.py
-ubuntutweak/janitor/oldkernel_plugin.py
 ubuntutweak/janitor/opera_plugin.py
-ubuntutweak/janitor/packageconfigs_plugin.py
-ubuntutweak/janitor/softwarecenter_plugin.py
 ubuntutweak/janitor/thumbnailcache_plugin.py
 ubuntutweak/module/__init__.py
 ubuntutweak/module/autostart.py
-ubuntutweak/module/taskinstall.py
-ubuntutweak/module/updatemanager.py
 ubuntutweak/modules/__init__.py
 ubuntutweak/network/__init__.py
 ubuntutweak/network/downloadmanager.py
-ubuntutweak/network/utdata.py
-ubuntutweak/network/xmlrpc.py
 ubuntutweak/policykit/__init__.py
 ubuntutweak/policykit/dbusproxy.py
-ubuntutweak/policykit/widgets.py
 ubuntutweak/settings/__init__.py
 ubuntutweak/settings/common.py
 ubuntutweak/settings/compizsettings.py
@@ -237,7 +212,6 @@ ubuntutweak/system/__init__.py
 ubuntutweak/tweaks/__init__.py
 ubuntutweak/tweaks/fonts.py
 ubuntutweak/tweaks/icons.py
-ubuntutweak/tweaks/loginsettings.py
 ubuntutweak/tweaks/lovewallpaperhd.py
 ubuntutweak/tweaks/misc.py
 ubuntutweak/tweaks/nautilus.py
@@ -250,8 +224,6 @@ ubuntutweak/tweaks/workarounds.py
 ubuntutweak/tweaks/workspace.py
 ubuntutweak/utils/__init__.py
 ubuntutweak/utils/icon.py
-ubuntutweak/utils/package.py
 ubuntutweak/utils/parser.py
-ubuntutweak/utils/ppa.py
 ubuntutweak/utils/tar.py
-ubuntutweak/utils/theme.py
\ No newline at end of file
+ubuntutweak/utils/theme.py
diff --git a/ubuntutweak/admins/appcenter.py b/ubuntutweak/admins/appcenter.py
deleted file mode 100755
index d0476ef..0000000
--- a/ubuntutweak/admins/appcenter.py
+++ /dev/null
@@ -1,688 +0,0 @@
-# Ubuntu Tweak - Ubuntu Configuration Tool
-#
-# Copyright (C) 2007-2011 Tualatrix Chou <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import os
-import json
-import thread
-import logging
-
-from gi.repository import Gtk, GdkPixbuf
-from gi.repository import GObject
-from gi.repository import Pango
-from xdg.DesktopEntry import DesktopEntry
-
-from ubuntutweak.common import consts
-from ubuntutweak.common.debug import log_func
-from ubuntutweak.modules  import TweakModule
-from ubuntutweak.gui.dialogs import ErrorDialog, InfoDialog, QuestionDialog
-from ubuntutweak.gui.dialogs import ProcessDialog
-from ubuntutweak.gui.gtk import post_ui, set_busy, unset_busy
-from ubuntutweak.utils.parser import Parser
-from ubuntutweak.network import utdata
-from ubuntutweak.network.downloadmanager import DownloadDialog
-from ubuntutweak.settings.gsettings import GSetting
-from ubuntutweak.utils import set_label_for_stock_button, icon
-from ubuntutweak.utils.package import AptWorker
-from ubuntutweak.apps import CategoryView
-
-log = logging.getLogger("AppCenter")
-
-APPCENTER_ROOT = os.path.join(consts.CONFIG_ROOT, 'appcenter')
-APP_VERSION_URL = utdata.get_version_url('/appcenter_version/')
-UPDATE_SETTING = GSetting(key='com.ubuntu-tweak.tweak.appcenter-has-update', type=bool)
-VERSION_SETTING = GSetting(key='com.ubuntu-tweak.tweak.appcenter-version', type=str)
-
-def get_app_data_url():
-    return utdata.get_download_url('/media/utdata/appcenter-%s.tar.gz' %
-                                   VERSION_SETTING.get_value())
-
-if not os.path.exists(APPCENTER_ROOT):
-    os.mkdir(APPCENTER_ROOT)
-
-
-class PackageInfo:
-    DESKTOP_DIR = '/usr/share/app-install/desktop/'
-
-    def __init__(self, name):
-        self.name = name
-        self.pkg = AptWorker.get_cache()[name]
-        self.desktopentry = DesktopEntry(self.DESKTOP_DIR + name + '.desktop')
-
-    def check_installed(self):
-        return self.pkg.isInstalled
-
-    def get_comment(self):
-        return self.desktopentry.getComment()
-
-    def get_name(self):
-        appname = self.desktopentry.getName()
-        if appname == '':
-            return self.name.title()
-
-        return appname
-
-    def get_version(self):
-        try:
-            return self.pkg.versions[0].version
-        except:
-            return ''
-
-
-class StatusProvider(object):
-    def __init__(self, name):
-        self._path = os.path.join(consts.CONFIG_ROOT, name)
-        self._is_init = False
-
-        try:
-            self._data = json.loads(open(self._path).read())
-        except:
-            log.debug('No Status data available, set init to True')
-            self._data = {'apps': {}, 'cates': {}}
-            self._is_init = True
-
-    def set_init(self, active):
-        self._is_init = active
-
-    def get_init(self):
-        return self._is_init
-
-    def get_data(self):
-        return self._data
-
-    def save(self):
-        file = open(self._path, 'w')
-        file.write(json.dumps(self._data))
-        file.close()
-
-    def load_objects_from_parser(self, parser):
-        init = self.get_init()
-
-        for key in parser.keys():
-            #FIXME because of source id
-            if init:
-                self._data['apps'][key] = {}
-                self._data['apps'][key]['read'] = True
-                self._data['apps'][key]['cate'] = parser.get_category(key)
-            else:
-                if key not in self._data['apps']:
-                    self._data['apps'][key] = {}
-                    self._data['apps'][key]['read'] = False
-                    self._data['apps'][key]['cate'] = parser.get_category(key)
-
-        if init and parser.keys():
-            self.set_init(False)
-
-        self.save()
-
-    def count_unread(self, cate):
-        i = 0
-        for key in self._data['apps']:
-            if self._data['apps'][key]['cate'] == cate and not self._data['apps'][key]['read']:
-                i += 1
-        return i
-
-    def load_category_from_parser(self, parser):
-        for cate in parser.keys():
-            id = parser.get_id(cate)
-            if self._is_init:
-                self._data['cates'][id] = 0
-            else:
-                self._data['cates'][id] = self.count_unread(id)
-
-        self._is_init = False
-        self.save()
-
-    def get_cate_unread_count(self, id):
-        return self.count_unread(id)
-
-    def get_read_status(self, key):
-        try:
-            return self._data['apps'][key]['read']
-        except:
-            return True
-
-    def set_as_read(self, key):
-        try:
-            self._data['apps'][key]['read'] = True
-        except:
-            pass
-        self.save()
-
-class AppParser(Parser):
-    def __init__(self):
-        app_data = os.path.join(APPCENTER_ROOT, 'apps.json')
-
-        Parser.__init__(self, app_data, 'package')
-
-    def get_summary(self, key):
-        return self.get_by_lang(key, 'summary')
-
-    def get_name(self, key):
-        return self.get_by_lang(key, 'name')
-
-    def get_category(self, key):
-        return self[key]['category']
-
-
-class AppCategoryView(CategoryView):
-
-    def pre_update_cate_model(self):
-        self.model.append(None, (-1,
-                                 'installed-apps',
-                                 _('Installed Apps')))
-
-
-class AppView(Gtk.TreeView):
-    __gsignals__ = {
-        'changed': (GObject.SignalFlags.RUN_FIRST,
-                    None,
-                    (GObject.TYPE_INT,)),
-        'select': (GObject.SignalFlags.RUN_FIRST,
-                    None,
-                    (GObject.TYPE_BOOLEAN,))
-    }
-
-    (COLUMN_INSTALLED,
-     COLUMN_ICON,
-     COLUMN_PKG,
-     COLUMN_NAME,
-     COLUMN_DESC,
-     COLUMN_DISPLAY,
-     COLUMN_CATE,
-     COLUMN_TYPE,
-    ) = range(8)
-
-    def __init__(self):
-        GObject.GObject.__init__(self)
-
-        self.to_add = []
-        self.to_rm = []
-        self.filter = None
-        self._status = None
-
-        model = self._create_model()
-        self._add_columns()
-        self.set_model(model)
-
-        self.set_rules_hint(True)
-        self.set_search_column(self.COLUMN_NAME)
-
-        self.show_all()
-
-    def _create_model(self):
-        model = Gtk.ListStore(
-                        GObject.TYPE_BOOLEAN,
-                        GdkPixbuf.Pixbuf,
-                        GObject.TYPE_STRING,
-                        GObject.TYPE_STRING,
-                        GObject.TYPE_STRING,
-                        GObject.TYPE_STRING,
-                        GObject.TYPE_STRING,
-                        GObject.TYPE_STRING)
-
-        return model
-
-    def sort_model(self):
-        model = self.get_model()
-        model.set_sort_column_id(self.COLUMN_NAME, Gtk.SortType.ASCENDING)
-
-    def _add_columns(self):
-        renderer = Gtk.CellRendererToggle()
-        renderer.set_property("xpad", 6)
-        renderer.connect('toggled', self.on_install_toggled)
-
-        column = Gtk.TreeViewColumn('', renderer, active=self.COLUMN_INSTALLED)
-        column.set_sort_column_id(self.COLUMN_INSTALLED)
-        self.append_column(column)
-
-        column = Gtk.TreeViewColumn('Applications')
-        column.set_sort_column_id(self.COLUMN_NAME)
-        column.set_spacing(5)
-        renderer = Gtk.CellRendererPixbuf()
-        column.pack_start(renderer, False)
-        column.set_cell_data_func(renderer, self.icon_column_view_func)
-        column.add_attribute(renderer, 'pixbuf', self.COLUMN_ICON)
-
-        renderer = Gtk.CellRendererText()
-        renderer.set_property("xpad", 6)
-        renderer.set_property("ypad", 6)
-        renderer.set_property('ellipsize', Pango.EllipsizeMode.END)
-        column.pack_start(renderer, True)
-        column.add_attribute(renderer, 'markup', self.COLUMN_DISPLAY)
-        self.append_column(column)
-
-    def set_as_read(self, iter, model):
-        package = model.get_value(iter, self.COLUMN_PKG)
-        if self._status and not self._status.get_read_status(package):
-            appname = model.get_value(iter, self.COLUMN_NAME)
-            desc = model.get_value(iter, self.COLUMN_DESC)
-            self._status.set_as_read(package)
-            model.set_value(iter, self.COLUMN_DISPLAY, '<b>%s</b>\n%s' % (appname, desc))
-
-    def icon_column_view_func(self, tree_column, renderer, model, iter, data=None):
-        pixbuf = model.get_value(iter, self.COLUMN_ICON)
-        if pixbuf == None:
-            renderer.set_property("visible", False)
-        else:
-            renderer.set_property("visible", True)
-
-    def append_update(self, status, pkgname, summary):
-        model = self.get_model()
-
-        icontheme = Gtk.IconTheme.get_default()
-        for icon_name in ['application-x-deb', 'package-x-generic', 'package']:
-            icon_theme = icontheme.lookup_icon(icon_name,
-                                               size=32,
-                                               flags=Gtk.IconLookupFlags.NO_SVG)
-            if icon_theme:
-                break
-
-        if icon_theme:
-            pixbuf = icon_theme.load_icon()
-        else:
-            pixbuf = icon.get_from_name(size=32)
-
-        iter = model.append()
-        model.set(iter,
-                  self.COLUMN_INSTALLED, status,
-                  self.COLUMN_ICON, pixbuf,
-                  self.COLUMN_PKG, pkgname,
-                  self.COLUMN_NAME, pkgname,
-                  self.COLUMN_DESC, summary,
-                  self.COLUMN_DISPLAY, '<b>%s</b>\n%s' % (pkgname, summary),
-                  self.COLUMN_TYPE, 'update')
-
-    def set_status_active(self, active):
-        if active:
-            self._status = StatusProvider('appstatus.json')
-
-    def get_status(self):
-        return self._status
-
-    @log_func(log)
-    def update_model(self, apps=None, only_installed=False):
-        '''apps is a list to iter pkgname,
-        '''
-        model = self.get_model()
-        model.clear()
-
-        app_parser = AppParser()
-
-        if self._status:
-            self._status.load_objects_from_parser(app_parser)
-
-        if not apps:
-            apps = app_parser.keys()
-
-        for pkgname in apps:
-            category = app_parser.get_category(pkgname)
-            pixbuf = self.get_app_logo(app_parser[pkgname]['logo'])
-
-            try:
-                package = PackageInfo(pkgname)
-                is_installed = package.check_installed()
-                if not is_installed and only_installed:
-                    continue
-                appname = package.get_name()
-                desc = app_parser.get_summary(pkgname)
-            except Exception, e:
-                # Confirm the invalid package isn't in the count
-                # But in the future, Ubuntu Tweak should display the invalid package too
-                if self._status and not self._status.get_read_status(pkgname):
-                    self._status.set_as_read(pkgname)
-                continue
-
-            if self.filter == None or self.filter == category:
-                iter = model.append()
-                if pkgname in self.to_add or pkgname in self.to_rm:
-                    status = not is_installed
-                    display = self.__fill_changed_display(appname, desc)
-                else:
-                    status = is_installed
-                    if self._status and not self._status.get_read_status(pkgname):
-                        display = '<b>%s <span foreground="#ff0000">(New!!!)</span>\n%s</b>' % (appname, desc)
-                    else:
-                        display = '<b>%s</b>\n%s' % (appname, desc)
-
-                model.set(iter,
-                          self.COLUMN_INSTALLED, status,
-                          self.COLUMN_ICON, pixbuf,
-                          self.COLUMN_PKG, pkgname,
-                          self.COLUMN_NAME, appname,
-                          self.COLUMN_DESC, desc,
-                          self.COLUMN_DISPLAY, display,
-                          self.COLUMN_CATE, str(category),
-                          self.COLUMN_TYPE, 'app')
-
-    def __fill_changed_display(self, appname, desc):
-        return '<span style="italic" weight="bold"><b>%s</b>\n%s</span>' % (appname, desc)
-
-    def on_install_toggled(self, cell, path):
-        def do_app_changed(model, iter, appname, desc):
-            model.set(iter,
-                      self.COLUMN_DISPLAY, self.__fill_changed_display(appname, desc))
-        def do_app_unchanged(model, iter, appname, desc):
-            model.set(iter,
-                      self.COLUMN_DISPLAY,
-                      '<b>%s</b>\n%s' % (appname, desc))
-
-        model = self.get_model()
-
-        iter = model.get_iter((int(path),))
-        is_installed = model.get_value(iter, self.COLUMN_INSTALLED)
-        pkgname = model.get_value(iter, self.COLUMN_PKG)
-        appname = model.get_value(iter, self.COLUMN_NAME)
-        desc = model.get_value(iter, self.COLUMN_DESC)
-        type = model.get_value(iter, self.COLUMN_TYPE)
-
-        if pkgname:
-            if type == 'app':
-                is_installed = not is_installed
-                if is_installed:
-                    if pkgname in self.to_rm:
-                        self.to_rm.remove(pkgname)
-                        do_app_unchanged(model, iter, appname, desc)
-                    else:
-                        self.to_add.append(pkgname)
-                        do_app_changed(model, iter, appname, desc)
-                else:
-                    if pkgname in self.to_add:
-                        self.to_add.remove(pkgname)
-                        do_app_unchanged(model, iter, appname, desc)
-                    else:
-                        self.to_rm.append(pkgname)
-                        do_app_changed(model, iter, appname, desc)
-
-                model.set(iter, self.COLUMN_INSTALLED, is_installed)
-            else:
-                to_installed = is_installed
-                to_installed = not to_installed
-                if to_installed == True:
-                    self.to_add.append(pkgname)
-                else:
-                    self.to_add.remove(pkgname)
-
-                model.set(iter, self.COLUMN_INSTALLED, to_installed)
-
-            self.emit('changed', len(self.to_add) + len(self.to_rm))
-        else:
-            model.set(iter, self.COLUMN_INSTALLED, not is_installed)
-            self.emit('select', not is_installed)
-
-    @log_func(log)
-    def set_filter(self, filter):
-        self.filter = filter
-
-    def get_app_logo(self, file_name):
-        path = os.path.join(APPCENTER_ROOT, file_name)
-        if not os.path.exists(path) or file_name == '':
-            path = os.path.join(consts.DATA_DIR, 'pixmaps/common-logo.png')
-
-        try:
-            pixbuf = GdkPixbuf.Pixbuf.new_from_file(path)
-            if pixbuf.get_width() != 32 or pixbuf.get_height() != 32:
-                pixbuf = pixbuf.scale_simple(32, 32, GdkPixbuf.InterpType.BILINEAR)
-            return pixbuf
-        except:
-            return Gtk.IconTheme.get_default().load_icon(Gtk.STOCK_MISSING_IMAGE, 32, 0)
-
-class CheckUpdateDialog(ProcessDialog):
-
-    def __init__(self, parent, url):
-        self.status = None
-        self.done = False
-        self.error = None
-        self.user_action = False
-        self.url = url
-
-        super(CheckUpdateDialog, self).__init__(parent=parent)
-        self.set_dialog_lable(_('Checking update...'))
-
-    def run(self):
-        thread.start_new_thread(self.process_data, ())
-        GObject.timeout_add(100, self.on_timeout)
-        return super(CheckUpdateDialog, self).run()
-
-    def process_data(self):
-        import time
-        time.sleep(1)
-        try:
-            self.status = self.get_updatable()
-        except IOError:
-            self.error = True
-        else:
-            self.done = True
-
-    def get_updatable(self):
-        return utdata.check_update_function(self.url, APPCENTER_ROOT, \
-                                            UPDATE_SETTING, VERSION_SETTING, \
-                                            auto=False)
-
-    def on_timeout(self):
-        self.pulse()
-
-        if self.error:
-            self.destroy()
-        elif not self.done:
-            return True
-        else:
-            self.destroy()
-
-class FetchingDialog(DownloadDialog):
-    def __init__(self, url, parent=None):
-        super(FetchingDialog, self).__init__(url=url,
-                                    title=_('Fetching online data...'),
-                                    parent=parent)
-        log.debug("Will start to download online data from: %s", url)
-
-class AppCenter(TweakModule):
-    __title__ = _('Application Center')
-    __desc__ = _('A simple but efficient way for finding and installing popular applications.')
-    __icon__ = 'gnome-app-install'
-    __url__ = 'http://ubuntu-tweak.com/app/'
-    __urltitle__ = _('Visit Online Application Center')
-    __category__ = 'application'
-    __utactive__ = False
-
-    def __init__(self):
-        TweakModule.__init__(self, 'appcenter.ui')
-
-        set_label_for_stock_button(self.sync_button, _('_Sync'))
-
-        self.to_add = []
-        self.to_rm = []
-
-        self.url = APP_VERSION_URL
-
-        self.appview = AppView()
-        self.appview.set_status_active(True)
-        self.appview.update_model()
-        self.appview.sort_model()
-        self.appview.connect('changed', self.on_app_status_changed)
-        self.app_selection = self.appview.get_selection()
-        self.app_selection.connect('changed', self.on_app_selection)
-        self.right_sw.add(self.appview)
-
-        self.cateview = AppCategoryView(os.path.join(APPCENTER_ROOT, 'cates.json'))
-        self.cateview.set_status_from_view(self.appview)
-        self.cateview.update_cate_model()
-        self.cate_selection = self.cateview.get_selection()
-        self.cate_selection.connect('changed', self.on_category_changed)
-        self.left_sw.add(self.cateview)
-
-        self.update_timestamp()
-        self.show_all()
-
-        UPDATE_SETTING.set_value(False)
-        UPDATE_SETTING.connect_notify(self.on_have_update, data=None)
-
-        thread.start_new_thread(self.check_update, ())
-        GObject.timeout_add(60000, self.update_timestamp)
-
-        self.add_start(self.main_vbox)
-
-        self.connect('realize', self.setup_ui_tasks)
-
-    def setup_ui_tasks(self, widget):
-        self.cateview.expand_all()
-
-    def update_timestamp(self):
-        self.time_label.set_text(_('Last synced:') + ' ' + utdata.get_last_synced(APPCENTER_ROOT))
-        return True
-
-    @post_ui
-    def on_have_update(self, *args):
-        log.debug("on_have_update")
-        if UPDATE_SETTING.get_value():
-            dialog = QuestionDialog(_('New application data available, would you like to update?'))
-            response = dialog.run()
-            dialog.destroy()
-
-            if response == Gtk.ResponseType.YES:
-                dialog = FetchingDialog(get_app_data_url(), self.get_toplevel())
-                dialog.connect('destroy', self.on_app_data_downloaded)
-                dialog.run()
-                dialog.destroy()
-
-    def check_update(self):
-        try:
-            return utdata.check_update_function(self.url, APPCENTER_ROOT, \
-                                            UPDATE_SETTING, VERSION_SETTING, \
-                                            auto=True)
-        except Exception, error:
-            log.error(error)
-
-    def on_app_selection(self, widget, data=None):
-        model, iter = widget.get_selected()
-        if iter:
-            appview = widget.get_tree_view()
-            appview.set_as_read(iter, model)
-            self.cateview.update_selected_item()
-
-    @log_func(log)
-    def on_category_changed(self, widget, data=None):
-        model, iter = widget.get_selected()
-        cateview = widget.get_tree_view()
-
-        if iter:
-            path = model.get_path(iter).to_string()
-            only_installed = False
-
-            if path == '0':
-                only_installed = True
-                self.appview.set_filter(None)
-            elif path == '1':
-                self.appview.set_filter(None)
-            else:
-                self.appview.set_filter(model[iter][cateview.CATE_ID])
-
-            self.appview.update_model(only_installed=only_installed)
-
-    def deep_update(self):
-        self.package_worker.update_apt_cache(True)
-        self.update_app_data()
-
-    def on_apply_button_clicked(self, widget, data=None):
-        @log_func(log)
-        def on_install_finished(transaction, status, kwargs):
-            to_add, to_rm = kwargs['add_and_rm']
-            if to_rm:
-                worker = AptWorker(self.get_toplevel(),
-                                   finish_handler=self.on_package_work_finished,
-                                   data=kwargs)
-                worker.remove_packages(to_rm)
-            else:
-               self.on_package_work_finished(None, None, kwargs)
-
-        to_rm = self.appview.to_rm
-        to_add = self.appview.to_add
-
-        log.debug("on_apply_button_clicked: to_rm: %s, to_add: %s" % (to_rm, to_add))
-
-        if to_add or to_rm:
-            set_busy(self)
-
-            if to_add:
-                worker = AptWorker(self.get_toplevel(),
-                                   finish_handler=on_install_finished,
-                                   data={'add_and_rm': (to_add, to_rm),
-                                         'parent': self})
-                worker.install_packages(to_add)
-            else:
-                on_install_finished(None, None, 
-                                   {'add_and_rm': (to_add, to_rm),
-                                         'parent': self})
-
-    @log_func(log)
-    def on_package_work_finished(self, transaction, status, kwargs):
-        to_add, to_rm = kwargs['add_and_rm']
-        parent = kwargs['parent']
-
-        AptWorker.update_apt_cache(init=True)
-
-        self.emit('call', 'ubuntutweak.modules.updatemanager', 'update_list', {})
-
-        self.appview.to_add = []
-        self.appview.to_rm = []
-        self.on_category_changed(self.cateview.get_selection())
-        self.apply_button.set_sensitive(False)
-        unset_busy(parent)
-
-    def on_sync_button_clicked(self, widget):
-        dialog = CheckUpdateDialog(widget.get_toplevel(), self.url)
-        dialog.run()
-        dialog.destroy()
-        if dialog.status == True:
-            dialog = QuestionDialog(_("Update available, would you like to update?"))
-            response = dialog.run()
-            dialog.destroy()
-            if response == Gtk.ResponseType.YES:
-                dialog = FetchingDialog(get_app_data_url(), self.get_toplevel())
-                dialog.connect('destroy', self.on_app_data_downloaded)
-                dialog.run()
-                dialog.destroy()
-        elif dialog.error == True:
-            ErrorDialog(_("Network Error, please check your network connection - or the remote server may be down.")).launch()
-        else:
-            utdata.save_synced_timestamp(APPCENTER_ROOT)
-            self.update_timestamp()
-            InfoDialog(_("No update available.")).launch()
-
-    def on_app_data_downloaded(self, widget):
-        log.debug("on_app_data_downloaded")
-        path = widget.get_downloaded_file()
-        tarfile = utdata.create_tarfile(path)
-
-        if tarfile.is_valid():
-            tarfile.extract(consts.CONFIG_ROOT)
-            self.update_app_data()
-            utdata.save_synced_timestamp(APPCENTER_ROOT)
-            self.update_timestamp()
-        else:
-            ErrorDialog(_('An error occurred while downloading the file.')).launch()
-
-    def update_app_data(self):
-        self.appview.update_model()
-        self.cateview.update_cate_model()
-        self.cateview.expand_all()
-
-    def on_app_status_changed(self, widget, i):
-        if i:
-            self.apply_button.set_sensitive(True)
-        else:
-            self.apply_button.set_sensitive(False)
diff --git a/ubuntutweak/admins/sourcecenter.py b/ubuntutweak/admins/sourcecenter.py
deleted file mode 100755
index 5a5176d..0000000
--- a/ubuntutweak/admins/sourcecenter.py
+++ /dev/null
@@ -1,1257 +0,0 @@
-#!/usr/bin/python
-# coding: utf-8
-
-# Ubuntu Tweak - PyGTK based desktop configuration tool
-#
-# Copyright (C) 2007-2008 TualatriX <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import os
-import re
-import json
-import time
-import urllib
-import thread
-import apt_pkg
-import logging
-import gettext
-import subprocess
-
-from urllib2 import urlopen, Request, URLError
-from gettext import ngettext
-from aptsources.sourceslist import SourcesList
-
-from gi.repository import Gtk, Gdk, GdkPixbuf
-from gi.repository import Pango
-from gi.repository import GObject
-from gi.repository import Notify
-
-from ubuntutweak import system
-from ubuntutweak.common import consts
-from ubuntutweak.common.debug import log_func
-from ubuntutweak.modules  import TweakModule
-from ubuntutweak.policykit.dbusproxy import proxy
-from ubuntutweak.gui.widgets import CheckButton
-from ubuntutweak.gui.dialogs import QuestionDialog, ErrorDialog, InfoDialog, WarningDialog
-from ubuntutweak.gui.gtk import post_ui, set_busy, unset_busy
-from ubuntutweak.utils.parser import Parser
-from ubuntutweak.network import utdata
-from ubuntutweak.settings.gsettings import GSetting
-from ubuntutweak.utils import set_label_for_stock_button
-from ubuntutweak.utils import ppa, icon
-from ubuntutweak.utils.package import AptWorker
-from ubuntutweak.apps import CategoryView
-
-from ubuntutweak.admins.appcenter import AppView, AppParser, StatusProvider
-from ubuntutweak.admins.appcenter import CheckUpdateDialog, FetchingDialog, PackageInfo
-
-log = logging.getLogger("SourceCenter")
-
-APP_PARSER = AppParser()
-PPA_MIRROR = []
-UNCONVERT = False
-WARNING_KEY = 'com.ubuntu-tweak.apps.disable-warning'
-CONFIG = GSetting(key=WARNING_KEY)
-UPDATE_SETTING = GSetting(key='com.ubuntu-tweak.apps.sources-can-update', type=bool)
-VERSION_SETTING = GSetting(key='com.ubuntu-tweak.apps.sources-version', type=str)
-
-SOURCE_ROOT = os.path.join(consts.CONFIG_ROOT, 'sourcecenter')
-SOURCE_VERSION_URL = utdata.get_version_url('/sourcecenter_version/')
-UPGRADE_DICT = {}
-
-def get_source_data_url():
-    return utdata.get_download_url('/media/utdata/sourcecenter-%s.tar.gz' %
-                                   VERSION_SETTING.get_value())
-
-def get_source_logo_from_filename(file_name):
-    path = os.path.join(SOURCE_ROOT, file_name)
-    if not os.path.exists(path) or file_name == '':
-        path = os.path.join(consts.DATA_DIR, 'pixmaps/ppa-logo.png')
-
-    try:
-        pixbuf = GdkPixbuf.Pixbuf.new_from_file(path)
-        if pixbuf.get_width() != 32 or pixbuf.get_height() != 32:
-            pixbuf = pixbuf.scale_simple(32, 32, GdkPixbuf.InterpType.BILINEAR)
-        return pixbuf
-    except:
-        return Gtk.IconTheme.get_default().load_icon(Gtk.STOCK_MISSING_IMAGE, 32, 0)
-
-class CheckSourceDialog(CheckUpdateDialog):
-    def get_updatable(self):
-        return utdata.check_update_function(self.url, SOURCE_ROOT, \
-                                            UPDATE_SETTING, VERSION_SETTING, \
-                                            auto=False)
-
-class DistroParser(Parser):
-    def __init__(self):
-        super(DistroParser, self).__init__(os.path.join(SOURCE_ROOT, 'distros.json'), 'id')
-
-    def get_codename(self, key):
-        return self[key]['codename']
-
-class SourceParser(Parser):
-    def __init__(self):
-        super(SourceParser, self).__init__(os.path.join(SOURCE_ROOT, 'sources.json'), 'id')
-
-    def init_items(self, key):
-        self.reverse_depends = {}
-
-        distro_parser = DistroParser()
-
-        for item in self.get_data():
-            distro_values = ''
-
-            if item['fields'].has_key('distros'):
-                distros = item['fields']['distros']
-
-                for id in distros:
-                    codename = distro_parser.get_codename(id)
-                    if codename in system.UBUNTU_CODENAMES:
-                        if system.CODENAME == codename:
-                            distro_values = codename
-                            break
-                    else:
-                        distro_values = codename
-                        break
-
-                if distro_values == '':
-                    continue
-
-            item['fields']['id'] = item['pk']
-            item['fields']['distro'] = distro_values
-            self[item['fields'][key]] = item['fields']
-
-            UPGRADE_DICT[item['fields']['url']] = distro_values
-
-            id = item['pk']
-            fields = item['fields']
-
-            if fields.has_key('dependencies') and fields['dependencies']:
-                for depend_id in fields['dependencies']:
-                    if self.reverse_depends.has_key(depend_id):
-                        self.reverse_depends[depend_id].append(id)
-                    else:
-                        self.reverse_depends[depend_id] = [id]
-
-    def has_reverse_depends(self, id):
-        if id in self.reverse_depends.keys():
-            return True
-        else:
-            return False
-
-    def get_reverse_depends(self, id):
-        return self.reverse_depends[id]
-
-    def get_slug(self, key):
-        return self[key]['slug']
-
-    def get_conflicts(self, key):
-        if self[key].has_key('conflicts'):
-            return self[key]['conflicts']
-        else:
-            return None
-
-    def get_dependencies(self, key):
-        if self[key].has_key('dependencies'):
-            return self[key]['dependencies']
-        else:
-            return None
-
-    def get_summary(self, key):
-        return self.get_by_lang(key, 'summary')
-
-    def get_name(self, key):
-        return self.get_by_lang(key, 'name')
-
-    def get_category(self, key):
-        return self[key]['category']
-
-    def get_url(self, key):
-        return self[key]['url']
-
-    def get_key(self, key):
-        return self[key]['key']
-
-    def get_key_fingerprint(self, key):
-        if self[key].has_key('key_fingerprint'):
-            return self[key]['key_fingerprint']
-        else:
-            return ''
-
-    def get_distro(self, key):
-        return self[key]['distro']
-
-    def get_comps(self, key):
-        return self[key]['component']
-
-    def get_website(self, key):
-        return self[key]['website']
-
-    def set_enable(self, key, enable):
-        # To make other module use the source enable feature, move the logical to here
-        # So that other module can call
-        gpg_key = self.get_key(key)
-        url = self.get_url(key)
-        distro = self.get_distro(key)
-        comps = self.get_comps(key)
-        comment = self.get_name(key)
-
-        if ppa.is_ppa(url):
-            file_name = '%s-%s' % (ppa.get_source_file_name(url), distro)
-        else:
-            file_name = self.get_slug(key)
-
-        if gpg_key:
-            proxy.add_apt_key_from_content(gpg_key)
-
-        if not comps and distro:
-            distro = distro + '/'
-        elif not comps and not distro:
-            distro = './'
-
-        result = proxy.set_separated_entry(url, distro, comps,
-                                           comment, enable, file_name)
-
-        return str(result)
-
-SOURCE_PARSER = SourceParser()
-
-class SourceStatus(StatusProvider):
-    def load_objects_from_parser(self, parser):
-        init = self.get_init()
-
-        for key in parser.keys():
-            id = key
-            slug = parser.get_slug(key)
-            key = slug
-            if init:
-                log.debug('SourceStatus first init, set %s as read' % id)
-                self.get_data()['apps'][key] = {}
-                self.get_data()['apps'][key]['read'] = True
-                self.get_data()['apps'][key]['cate'] = parser.get_category(id)
-            else:
-                if key not in self.get_data()['apps']:
-                    self.get_data()['apps'][key] = {}
-                    self.get_data()['apps'][key]['read'] = False
-                    self.get_data()['apps'][key]['cate'] = parser.get_category(id)
-
-        if init and parser.keys():
-            log.debug('Init finish, SourceStatus set init to False')
-            self.set_init(False)
-
-        self.save()
-
-    def get_read_status(self, key):
-        try:
-            return self.get_data()['apps'][key]['read']
-        except:
-            return True
-
-    def set_as_read(self, key):
-        try:
-            self.get_data()['apps'][key]['read'] = True
-        except:
-            pass
-        self.save()
-
-
-class NoNeedDowngradeException(Exception):
-    pass
-
-
-class DowngradeView(Gtk.TreeView):
-    __gsignals__ = {
-        'checked': (GObject.SignalFlags.RUN_FIRST, None,
-                    (GObject.TYPE_BOOLEAN,)),
-        'cleaned': (GObject.SignalFlags.RUN_FIRST, None, ())
-    }
-
-    (COLUMN_PKG,
-     COLUMN_PPA_VERSION,
-     COLUMN_SYSTEM_VERSION) = range(3)
-
-    def __init__(self, plugin):
-        GObject.GObject.__init__(self)
-
-        model = Gtk.ListStore(GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING)
-        self.set_model(model)
-        model.set_sort_column_id(self.COLUMN_PKG, Gtk.SortType.ASCENDING)
-
-        self.plugin = plugin
-
-        self._add_column()
-
-    def _add_column(self):
-        renderer = Gtk.CellRendererText()
-        column = Gtk.TreeViewColumn(_('Package'))
-        column.pack_start(renderer, False)
-        column.add_attribute(renderer, 'text', self.COLUMN_PKG)
-        column.set_sort_column_id(self.COLUMN_PKG)
-        self.append_column(column)
-
-        renderer = Gtk.CellRendererText()
-        renderer.set_property('ellipsize', Pango.EllipsizeMode.END)
-        column = Gtk.TreeViewColumn(_('Previous Version'))
-        column.pack_start(renderer, True)
-        column.add_attribute(renderer, 'text', self.COLUMN_PPA_VERSION)
-        column.set_resizable(True)
-        column.set_min_width(180)
-        self.append_column(column)
-
-        renderer = Gtk.CellRendererText()
-        renderer.set_property('ellipsize', Pango.EllipsizeMode.END)
-        column = Gtk.TreeViewColumn(_('System Version'))
-        column.pack_start(renderer, True)
-        column.add_attribute(renderer, 'text', self.COLUMN_SYSTEM_VERSION)
-        column.set_resizable(True)
-        self.append_column(column)
-
-    def update_downgrade_model(self, ppas):
-        model = self.get_model()
-        model.clear()
-        pkg_dict = {}
-        for ppa_url in ppas:
-            path = ppa.get_list_name(ppa_url)
-            log.debug('Find the PPA path name: %s', path)
-            if path:
-                for line in open(path):
-                    if line.startswith('Package:'):
-                        pkg = line.split()[1].strip()
-                        if pkg in pkg_dict:
-                            # Join another ppa info to the pkg dict, so that
-                            # later we can know if more than two ppa provide
-                            # the pkg
-                            pkg_dict[pkg].extend([ppa_url])
-                        else:
-                            pkg_dict[pkg] = [ppa_url]
-
-        pkg_map = self.get_downgradeable_pkgs(pkg_dict)
-
-        if pkg_map:
-            log.debug("Start insert pkg_map to model: %s\n" % str(pkg_map))
-            for pkg, (p_verion, s_verion) in pkg_map.items():
-                model.append((pkg, p_verion, s_verion))
-
-    def get_downgrade_packages(self):
-        model = self.get_model()
-        downgrade_list = []
-        for row in model:
-            pkg, version = row[self.COLUMN_PKG], row[self.COLUMN_SYSTEM_VERSION]
-            downgrade_list.append("%s=%s" % (pkg, version))
-        log.debug("The package to downgrade is %s" % str(downgrade_list))
-        return downgrade_list
-
-    def get_downgradeable_pkgs(self, ppa_dict):
-        def is_system_origin(version, urls):
-            origins = [ppa.get_ppa_origin_name(url) for url in urls]
-            system_version = 0
-            match = False
-
-            for origin in version.origins:
-                if origin.origin:
-                    if origin.origin not in origins:
-                        log.debug("The origin %s is not in %s, so end the loop" % (origin.origin, str(origins)))
-                        match = True
-                        break
-
-            if match:
-                system_version = version.version
-                log.debug("Found match url, the system_version is %s, now iter to system version" % system_version)
-
-            return system_version
-
-        def is_full_match_ppa_origin(pkg, version, urls):
-            origins = [ppa.get_ppa_origin_name(url) for url in urls]
-            ppa_version = 0
-            match = True
-
-            if version == pkg.installed:
-                for origin in version.origins:
-                    if origin.origin:
-                        if origin.origin not in origins:
-                            log.debug("The origin %s is not in %s, so end the loop" % (origin.origin, str(origins)))
-                            match = False
-                            break
-
-                if match:
-                    ppa_version = version.version
-                    log.debug("Found match url, the ppa_version is %s, now iter to system version" % ppa_version)
-
-            return ppa_version
-
-        log.debug("Check downgrade information")
-        downgrade_dict = {}
-        for pkg, urls in ppa_dict.items():
-            log.debug("The package is: %s, PPA URL is: %s" % (pkg, str(urls)))
-
-            if pkg not in AptWorker.get_cache():
-                log.debug("    package isn't available, continue next...\n")
-                continue
-
-            pkg = AptWorker.get_cache()[pkg]
-            if not pkg.isInstalled:
-                log.debug("    package isn't installed, continue next...\n")
-                continue
-            versions = pkg.versions
-
-            ppa_version = 0
-            system_version = 0
-            FLAG = 'PPA'
-            try:
-                for version in versions:
-                    try:
-                        #FIXME option to remove the package
-                        log.debug("Version uri is %s" % version.uri)
-
-                        # Switch FLAG
-                        if FLAG == 'PPA':
-                            ppa_version = is_full_match_ppa_origin(pkg, version, urls)
-                            FLAG = 'SYSTEM'
-                            if ppa_version == 0:
-                                raise NoNeedDowngradeException
-                        else:
-                            system_version = is_system_origin(version, urls)
-
-                        if ppa_version and system_version:
-                            downgrade_dict[pkg.name] = (ppa_version, system_version)
-                            break
-                    except StopIteration:
-                        pass
-            except NoNeedDowngradeException:
-                log.debug("Catch NoNeedDowngradeException, so pass this package: %s" % pkg)
-                continue
-            log.debug("\n")
-        return downgrade_dict
-
-
-class UpdateView(AppView):
-    def __init__(self):
-        AppView.__init__(self)
-
-        self.set_headers_visible(False)
-
-    def update_model(self, apps):
-        model = self.get_model()
-
-        length = len(apps)
-        iter = model.append()
-        model.set(iter,
-                  self.COLUMN_INSTALLED, False,
-                  self.COLUMN_DISPLAY,
-                      '<span size="large" weight="bold">%s</span>' %
-                          ngettext('%d New Application Available',
-                                   '%d New Applications Available', length) % length,
-                  )
-
-        super(UpdateView, self).update_model(apps)
-
-    def update_updates(self, pkgs):
-        '''apps is a list to iter pkgname,
-        cates is a dict to find what the category the pkg is
-        '''
-        model = self.get_model()
-        length = len(pkgs)
-
-        if pkgs:
-            iter = model.append()
-            model.set(iter,
-                      self.COLUMN_DISPLAY,
-                      '<span size="large" weight="bold">%s</span>' %
-                      ngettext('%d Package Update Available',
-                               '%d Package Updates Available',
-                               length) % length)
-
-            apps = []
-            updates = []
-            for pkg in pkgs:
-                if pkg in APP_PARSER:
-                    apps.append(pkg)
-                else:
-                    updates.append(pkg)
-
-            for pkgname in apps:
-                pixbuf = self.get_app_logo(APP_PARSER[pkgname]['logo'])
-
-                package = PackageInfo(pkgname)
-                appname = package.get_name()
-                desc = APP_PARSER.get_summary(pkgname)
-
-                iter = model.append()
-                model.set(iter,
-                          self.COLUMN_INSTALLED, False,
-                          self.COLUMN_ICON, pixbuf,
-                          self.COLUMN_PKG, pkgname,
-                          self.COLUMN_NAME, appname,
-                          self.COLUMN_DESC, desc,
-                          self.COLUMN_DISPLAY, '<b>%s</b>\n%s' % (appname, desc),
-                          self.COLUMN_TYPE, 'update')
-
-            for pkgname in updates:
-                package = PACKAGE_WORKER.get_cache()[pkgname]
-
-                self.append_update(False, package.name, package.summary)
-        else:
-            iter = model.append()
-            model.set(iter,
-                      self.COLUMN_DISPLAY,
-                        '<span size="large" weight="bold">%s</span>' %
-                        _('No Available Package Updates'))
-
-    def select_all_action(self, active):
-        self.to_rm = []
-        self.to_add = []
-        model = self.get_model()
-        model.foreach(self.__select_foreach, active)
-        self.emit('changed', len(self.to_add))
-
-    def __select_foreach(self, model, path, iter, check):
-        model.set(iter, self.COLUMN_INSTALLED, check)
-        pkg = model.get_value(iter, self.COLUMN_PKG)
-        if pkg and check:
-            self.to_add.append(pkg)
-
-
-class SourcesView(Gtk.TreeView):
-    __gsignals__ = {
-        'sourcechanged': (GObject.SignalFlags.RUN_FIRST, None, ()),
-        'new_purge': (GObject.SignalFlags.RUN_FIRST, None, (GObject.TYPE_PYOBJECT,))
-    }
-    (COLUMN_ENABLED,
-     COLUMN_ID,
-     COLUMN_CATE,
-     COLUMN_URL,
-     COLUMN_DISTRO,
-     COLUMN_COMPS,
-     COLUMN_SLUG,
-     COLUMN_LOGO,
-     COLUMN_NAME,
-     COLUMN_COMMENT,
-     COLUMN_DISPLAY,
-     COLUMN_HOME,
-     COLUMN_KEY,
-    ) = range(13)
-
-    def __init__(self):
-        GObject.GObject.__init__(self)
-
-        self.filter = None
-        self.modelfilter = None
-        self._status = None
-        self.view_mode = 'view'
-        self.to_purge = []
-
-        self.model = self.__create_model()
-        self.model.set_sort_column_id(self.COLUMN_NAME, Gtk.SortType.ASCENDING)
-        self.set_model(self.model)
-
-        self.set_search_column(self.COLUMN_NAME)
-
-        self._add_column()
-
-        self.selection = self.get_selection()
-
-    def get_sourceslist(self):
-        return SourcesList()
-
-    def __create_model(self):
-        model = Gtk.ListStore(GObject.TYPE_BOOLEAN,
-                              GObject.TYPE_INT,
-                              GObject.TYPE_INT,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GdkPixbuf.Pixbuf,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING)
-
-        return model
-
-    def on_visible_filter(self, model, iter, data=None):
-        log.debug("on_visible_filter: %s" % self.model.get_value(iter, self.COLUMN_NAME))
-        category = self.model.get_value(iter, self.COLUMN_CATE)
-        if self.filter == None or self.filter == category:
-            return True
-        else:
-            return False
-
-    def _add_column(self):
-        renderer = Gtk.CellRendererToggle()
-        renderer.connect('toggled', self.on_enable_toggled)
-        column = Gtk.TreeViewColumn(' ', renderer, active=self.COLUMN_ENABLED)
-        column.set_sort_column_id(self.COLUMN_ENABLED)
-        self.append_column(column)
-
-        self.source_column = Gtk.TreeViewColumn(_('Third-Party Sources'))
-        self.source_column.set_sort_column_id(self.COLUMN_NAME)
-        self.source_column.set_spacing(5)
-        renderer = Gtk.CellRendererPixbuf()
-        self.source_column.pack_start(renderer, False)
-        self.source_column.add_attribute(renderer, 'pixbuf', self.COLUMN_LOGO)
-
-        renderer = Gtk.CellRendererText()
-        renderer.set_property('ellipsize', Pango.EllipsizeMode.END)
-        self.source_column.pack_start(renderer, True)
-        self.source_column.add_attribute(renderer, 'markup', self.COLUMN_DISPLAY)
-
-        self.append_column(self.source_column)
-
-    def set_status_active(self, active):
-        if active:
-            self._status = SourceStatus('sourcestatus.json')
-
-    def get_status(self):
-        return self._status
-
-    def update_source_model(self, find='all', limit=-1, only_enabled=False):
-        self.model.clear()
-        sourceslist = self.get_sourceslist()
-        enabled_list = []
-
-        for source in sourceslist.list:
-            if source.type == 'deb' and not source.disabled:
-                enabled_list.append(source.uri)
-
-        if self._status:
-            self._status.load_objects_from_parser(SOURCE_PARSER)
-
-        index = 0
-
-        for id in SOURCE_PARSER:
-            enabled = False
-            index = index + 1
-            url = SOURCE_PARSER.get_url(id)
-            enabled = url in enabled_list
-
-            if enabled:
-                enabled_list.remove(url)
-
-            if only_enabled:
-                if not enabled:
-                    continue
-                elif not ppa.is_ppa(url):
-                    continue
-                else:
-                    enabled = not enabled
-
-            slug = SOURCE_PARSER.get_slug(id)
-            comps = SOURCE_PARSER.get_comps(id)
-            distro = SOURCE_PARSER.get_distro(id)
-            category = SOURCE_PARSER.get_category(id)
-            
-            if find != 'all' and category != find:
-                continue
-
-            #TODO real top-10
-            if limit > 0 and index >= limit:
-                break
-
-            name = SOURCE_PARSER.get_name(id)
-            comment = SOURCE_PARSER.get_summary(id)
-            pixbuf = get_source_logo_from_filename(SOURCE_PARSER[id]['logo'])
-            website = SOURCE_PARSER.get_website(id)
-            key = SOURCE_PARSER.get_key(id)
-
-            if self._status and not self._status.get_read_status(slug):
-                display = '<b>%s <span foreground="#ff0000">(New!!!)</span>\n%s</b>' % (name, comment)
-            else:
-                display = '<b>%s</b>\n%s' % (name, comment)
-
-            iter = self.model.append()
-            self.model.set(iter,
-                           self.COLUMN_ENABLED, enabled,
-                           self.COLUMN_ID, id,
-                           self.COLUMN_CATE, category,
-                           self.COLUMN_URL, url,
-                           self.COLUMN_DISTRO, distro,
-                           self.COLUMN_COMPS, comps,
-                           self.COLUMN_COMMENT, comment,
-                           self.COLUMN_SLUG, slug,
-                           self.COLUMN_NAME, name,
-                           self.COLUMN_DISPLAY, display,
-                           self.COLUMN_LOGO, pixbuf,
-                           self.COLUMN_HOME, website,
-                           self.COLUMN_KEY, key,
-            )
-
-        path = os.path.join(consts.DATA_DIR, 'pixmaps/ppa-logo.png')
-
-        pixbuf = icon.get_from_file(path, size=32)
-
-        if enabled_list and only_enabled:
-            for url in enabled_list:
-                if ppa.is_ppa(url):
-                    iter = self.model.append()
-                    self.model.set(iter,
-                                   self.COLUMN_ENABLED, False,
-                                   self.COLUMN_ID, 9999,
-                                   self.COLUMN_CATE, -1,
-                                   self.COLUMN_URL, url,
-                                   self.COLUMN_DISTRO, distro,
-                                   self.COLUMN_COMPS, comps,
-                                   self.COLUMN_COMMENT, '',
-                                   self.COLUMN_SLUG, url,
-                                   self.COLUMN_NAME, ppa.get_basename(url),
-                                   self.COLUMN_DISPLAY, ppa.get_long_name(url),
-                                   self.COLUMN_LOGO, pixbuf,
-                                   self.COLUMN_HOME, ppa.get_homepage(url),
-                                   self.COLUMN_KEY, '',
-                    )
-
-    def set_as_read(self, iter, model):
-        if type(model) == Gtk.TreeModelFilter:
-            iter = model.convert_iter_to_child_iter(iter)
-            model = model.get_model()
-        id = model.get_value(iter, self.COLUMN_ID)
-        slug = model.get_value(iter, self.COLUMN_SLUG)
-        if self._status and not self._status.get_read_status(slug):
-            name = model.get_value(iter, self.COLUMN_NAME)
-            comment = model.get_value(iter, self.COLUMN_COMMENT)
-            self._status.set_as_read(slug)
-            model.set_value(iter,
-                            self.COLUMN_DISPLAY,
-                            '<b>%s</b>\n%s' % (name, comment))
-
-    def get_sourcelist_status(self, url):
-        for source in self.get_sourceslist():
-            if url in source.str() and source.type == 'deb':
-                return not source.disabled
-        return False
-
-    @log_func(log)
-    def on_enable_toggled(self, cell, path):
-        model = self.get_model()
-        iter = model.get_iter((int(path),))
-
-        id = model.get_value(iter, self.COLUMN_ID)
-        name = model.get_value(iter, self.COLUMN_NAME)
-        enabled = model.get_value(iter, self.COLUMN_ENABLED)
-        url = model.get_value(iter, self.COLUMN_URL)
-
-        if self.view_mode == 'view':
-            conflicts = SOURCE_PARSER.get_conflicts(id)
-            dependencies = SOURCE_PARSER.get_dependencies(id)
-
-            #Convert to real model, because will involke the set method
-            if type(model) == Gtk.TreeModelFilter:
-                iter = model.convert_iter_to_child_iter(iter)
-                model = model.get_model()
-
-            if not enabled and conflicts:
-                conflict_list = []
-                conflict_name_list = []
-                for conflict_id in conflicts:
-                    if self.get_source_enabled(conflict_id):
-                        conflict_list.append(conflict_id)
-                        name_list = [r[self.COLUMN_NAME] for r in model if r[self.COLUMN_ID] == conflict_id]
-                        if name_list:
-                                conflict_name_list.extend(name_list)
-
-                if conflict_list and conflict_name_list:
-                    full_name = ', '.join(conflict_name_list)
-                    ErrorDialog(_('You can\'t enable this Source because'
-                                  '<b>"%(SOURCE)s"</b> conflicts with it.\nTo '
-                                  'continue you need to disable <b>"%(SOURCE)s"</b>' \
-                                  'first.') % {'SOURCE': full_name}).launch()
-
-                    model.set(iter, self.COLUMN_ENABLED, enabled)
-                    return
-
-            if enabled is False and dependencies:
-                depend_list = []
-                depend_name_list = []
-                for depend_id in dependencies:
-                    if self.get_source_enabled(depend_id) is False:
-                        depend_list.append(depend_id)
-                        name_list = [r[self.COLUMN_NAME] for r in model if r[self.COLUMN_ID] == depend_id]
-                        if name_list:
-                                depend_name_list.extend(name_list)
-
-                if depend_list and depend_name_list:
-                    full_name = ', '.join(depend_name_list)
-
-                    dialog = QuestionDialog(title=_('Dependency Notice'),
-                                            message= _('To enable this Source, You need to enable <b>"%s"</b> at first.\nDo you wish to continue?') \
-                                % full_name)
-                    if dialog.run() == Gtk.ResponseType.YES:
-                        for depend_id in depend_list:
-                            self.set_source_enabled(depend_id)
-                        self.set_source_enabled(id)
-                    else:
-                        model.set(iter, self.COLUMN_ENABLED, enabled)
-
-                    dialog.destroy()
-                    return
-
-            if enabled and SOURCE_PARSER.has_reverse_depends(id):
-                depend_list = []
-                depend_name_list = []
-                for depend_id in SOURCE_PARSER.get_reverse_depends(id):
-                    if self.get_source_enabled(depend_id):
-                        depend_list.append(depend_id)
-                        name_list = [r[self.COLUMN_NAME] for r in model if r[self.COLUMN_ID] == depend_id]
-                        if name_list:
-                                depend_name_list.extend(name_list)
-
-                if depend_list and depend_name_list:
-                    full_name = ', '.join(depend_name_list)
-
-                    ErrorDialog(_('You can\'t disable this Source because '
-                                '<b>"%(SOURCE)s"</b> depends on it.\nTo continue '
-                                'you need to disable <b>"%(SOURCE)s"</b> first.') \
-                                     % {'SOURCE': full_name}).launch()
-
-                    model.set(iter, self.COLUMN_ENABLED, enabled)
-                    return
-
-            self.do_source_enable(iter, not enabled)
-        else:
-            #TODO purge dependencies
-            status = not enabled
-            model.set(iter, self.COLUMN_ENABLED, status)
-
-            if status:
-                self.to_purge.append(url)
-            else:
-                self.to_purge.remove(url)
-
-            self.emit('new_purge', self.to_purge)
-
-    def on_source_foreach(self, model, path, iter, id):
-        m_id = model.get_value(iter, self.COLUMN_ID)
-        if m_id == id:
-            if self._foreach_mode == 'get':
-                self._foreach_take = model.get_value(iter, self.COLUMN_ENABLED)
-            elif self._foreach_mode == 'set':
-                self._foreach_take = iter
-
-    def on_source_name_foreach(self, model, path, iter, id):
-        m_id = model.get_value(iter, self.COLUMN_ID)
-        if m_id == id:
-            self._foreach_name_take = model.get_value(iter, self.COLUMN_NAME)
-
-    def get_source_enabled(self, id):
-        '''
-        Search source by id, then get status from model
-        '''
-        self._foreach_mode = 'get'
-        self._foreach_take = None
-        self.model.foreach(self.on_source_foreach, id)
-        return self._foreach_take
-
-    def set_source_enabled(self, id):
-        '''
-        Search source by id, then call do_source_enable
-        '''
-        self._foreach_mode = 'set'
-        self._foreach_status = None
-        self.model.foreach(self.on_source_foreach, id)
-        self.do_source_enable(self._foreach_take, True)
-
-    def set_source_disable(self, id):
-        '''
-        Search source by id, then call do_source_enable
-        '''
-        self._foreach_mode = 'set'
-        self._foreach_status = None
-        self.model.foreach(self.on_source_foreach, id)
-        self.do_source_enable(self._foreach_take, False)
-
-    def do_source_enable(self, iter, enable):
-        '''
-        Do the really source enable or disable action by iter
-        Only emmit signal when source is changed
-        '''
-        model = self.get_model()
-
-        id = model.get_value(iter, self.COLUMN_ID)
-        url = model.get_value(iter, self.COLUMN_URL)
-        icon = model.get_value(iter, self.COLUMN_LOGO)
-        comment = model.get_value(iter, self.COLUMN_NAME)
-        pre_status = self.get_sourcelist_status(url)
-        result = SOURCE_PARSER.set_enable(id, enable)
-
-        log.debug("Setting source %s (%d) to %s, result is %s" % (comment, id, str(enable), result))
-
-        if result == 'enabled':
-            model.set(iter, self.COLUMN_ENABLED, True)
-        else:
-            model.set(iter, self.COLUMN_ENABLED, False)
-
-        if pre_status != enable:
-            self.emit('sourcechanged')
-
-        if enable:
-            notify = Notify.Notification(summary=_('New source has been enabled'),
-                                         body=_('%s is enabled now, Please click the refresh button to update the application cache.') % comment)
-            notify.set_icon_from_pixbuf(icon)
-            notify.set_hint_string ("x-canonical-append", "")
-            notify.show()
-
-class SourceCategoryView(CategoryView):
-    def pre_update_cate_model(self):
-#        self.model.append(None, (-3,
-#                                 'latest',
-#                                 _('Latest')))
-
-#        self.model.append(None, (-2,
-#                                 'top-10',
-#                                 _('Top 10')))
-
-        self.model.append(None, (-1,
-                                 'enabled-ppa',
-                                 _('Enabled PPAs')))
-
-class SourceCenter(TweakModule):
-    __title__  = _('Source Center')
-    __desc__ = _('A collection of software sources to ensure your applications are always up-to-date.')
-    __icon__ = 'software-properties'
-    __url__ = 'http://ubuntu-tweak.com/source/'
-    __urltitle__ = _('Visit online Source Center')
-    __category__ = 'application'
-    __keywords__ = 'ppa repository app'
-    __utactive__ = False
-
-    def __init__(self):
-        TweakModule.__init__(self, 'sourcecenter.ui')
-
-        self.url = SOURCE_VERSION_URL
-        set_label_for_stock_button(self.sync_button, _('_Sync'))
-
-        self.cateview = SourceCategoryView(os.path.join(SOURCE_ROOT, 'cates.json'))
-        self.cateview.update_cate_model()
-        self.cateview.get_selection().connect('changed', self.on_category_changed)
-        self.left_sw.add(self.cateview)
-
-        self.sourceview = SourcesView()
-        self.sourceview.set_status_active(True)
-        self.sourceview.update_source_model()
-        self.sourceview.connect('sourcechanged', self.on_source_changed)
-        self.sourceview.connect('new_purge', self.on_purge_changed)
-        self.sourceview.get_selection().connect('changed', self.on_source_selection)
-        self.sourceview.set_rules_hint(True)
-        self.right_sw.add(self.sourceview)
-        self.cateview.set_status_from_view(self.sourceview)
-
-        self.update_timestamp()
-        UPDATE_SETTING.set_value(False)
-        UPDATE_SETTING.connect_notify(self.on_have_update, data=None)
-
-        log.debug('Start check update')
-        thread.start_new_thread(self.check_update, ())
-        GObject.timeout_add(60000, self.update_timestamp)
-
-        if self.check_source_upgradable() and UPGRADE_DICT:
-            GObject.idle_add(self.upgrade_sources)
-
-        self.add_start(self.main_vbox)
-
-        self.connect('realize', self.setup_ui_tasks)
-
-        GObject.idle_add(self.show_warning)
-
-    @post_ui
-    def show_warning(self):
-        if not CONFIG.get_value():
-            dialog = WarningDialog(title=_('Warning'),
-                                   message=_('It is a possible security risk to '
-                'use packages from Third-Party Sources.\n'
-                'Please be careful and use only sources you trust.'),
-                                   buttons=Gtk.ButtonsType.OK)
-            checkbutton = CheckButton(_('Never show this dialog'),
-                                      key=WARNING_KEY,
-                                      backend='gsettings')
-            dialog.add_option_button(checkbutton)
-
-            dialog.run()
-            dialog.destroy()
-
-    def setup_ui_tasks(self, widget):
-        self.purge_ppa_button.hide()
-        self.cateview.expand_all()
-
-    def check_source_upgradable(self):
-        log.debug("The check source string is: \"%s\"" % self.__get_disable_string())
-        for source in SourcesList():
-            if self.__get_disable_string() in source.str() and \
-                    source.uri in UPGRADE_DICT and \
-                    source.disabled:
-                return True
-
-        return False
-
-    def __get_disable_string(self):
-        APP="update-manager"
-        DIR="/usr/share/locale"
-
-        gettext.bindtextdomain(APP, DIR)
-        gettext.textdomain(APP)
-
-        #the "%s" is in front, some is the end, so just return the long one
-        translated = gettext.gettext("disabled on upgrade to %s")
-        a, b = translated.split('%s')
-        return a.strip() or b.strip()
-
-    def update_timestamp(self):
-        self.time_label.set_text(_('Last synced:') + ' ' + utdata.get_last_synced(SOURCE_ROOT))
-        return True
-
-    @post_ui
-    def upgrade_sources(self):
-        dialog = QuestionDialog(title=_('Upgrade Third Party Sources'),
-                                message=_('After a successful distribution upgrade, '
-                                'any third-party sources you use will be disabled by default.\n'
-                                'Would you like to re-enable any sources disabled by Update Manager?'))
-
-        response = dialog.run()
-        dialog.destroy()
-        if response == Gtk.ResponseType.YES:
-            proxy.upgrade_sources(self.__get_disable_string(), UPGRADE_DICT)
-            if not self.check_source_upgradable():
-                InfoDialog(_('Upgrade Successful!')).launch()
-            else:
-                ErrorDialog(_('Upgrade Failed!')).launch()
-            self.emit('call', 'ubuntutweak.modules.sourceeditor', 'update_source_combo', {})
-            self.update_sourceview()
-
-    @post_ui
-    def on_have_update(self, *args):
-        if UPDATE_SETTING.get_value():
-            dialog = QuestionDialog(_('New source data available, would you like to update?'))
-            response = dialog.run()
-            dialog.destroy()
-
-            if response == Gtk.ResponseType.YES:
-                dialog = FetchingDialog(get_source_data_url(),
-                                        self.get_toplevel())
-                dialog.connect('destroy', self.on_source_data_downloaded)
-                dialog.run()
-                dialog.destroy()
-
-    def check_update(self):
-        try:
-            return utdata.check_update_function(self.url, SOURCE_ROOT, \
-                                            UPDATE_SETTING, VERSION_SETTING, \
-                                            auto=True)
-        except Exception, error:
-            print error
-
-    def on_source_selection(self, widget, data=None):
-        model, iter = widget.get_selected()
-
-        if iter:
-            sourceview = widget.get_tree_view()
-            sourceview.set_as_read(iter, model)
-            self.cateview.update_selected_item()
-
-            home = model.get_value(iter, self.sourceview.COLUMN_HOME)
-            url = model.get_value(iter, self.sourceview.COLUMN_URL)
-            description = model.get_value(iter, self.sourceview.COLUMN_COMMENT)
-
-            self.set_details(home, url, description)
-
-    def on_category_changed(self, widget, data=None):
-        self.update_sourceview()
-
-    def update_sourceview(self):
-        self.cateview.set_status_from_view(self.sourceview)
-        model, iter = self.cateview.get_selection().get_selected()
-
-        limit = -1
-        only_enabled = False
-        if iter:
-            find = model[iter][self.cateview.CATE_ID] or 'all'
-            if find == -3:
-                find = 'all'
-            elif find == -2:
-                find = 'all'
-                limit = 10
-            elif find == -1:
-                find = 'all'
-                only_enabled = True
-        else:
-            find = 'all'
-        log.debug("Filter for %s" % find)
-        self.sourceview.update_source_model(find=find,
-                                     limit=limit,
-                                     only_enabled=only_enabled)
-        if only_enabled:
-            self.purge_ppa_button.show()
-            self.purge_ppa_button.set_sensitive(False)
-            self.sourceview.source_column.set_title(_('All enabled PPAs (Select and click "Purge PPA" can safely downgrade packages)'))
-            self.sourceview.view_mode = 'purge'
-        else:
-            self.purge_ppa_button.hide()
-            self.sourceview.source_column.set_title(_('Third-Party Sources'))
-            self.sourceview.view_mode = 'view'
-
-    def set_details(self,
-                    homepage='http://ubuntu-tweak.com',
-                    url='http://ubuntu-tweak.com',
-                    description=None):
-        self.homepage_button.set_label(homepage)
-        self.homepage_button.set_uri(homepage)
-
-        if ppa.is_ppa(url):
-            url = ppa.get_homepage(url)
-        self.url_button.set_label(url)
-        self.url_button.set_uri(url)
-
-        self.description_label.set_text(description or _('Description is here'))
-
-    def on_source_changed(self, widget):
-        self.emit('call', 'ubuntutweak.modules.sourceeditor', 'update_source_combo', {})
-
-    @log_func(log)
-    def on_purge_changed(self, widget, purge_list):
-        if purge_list:
-            self.purge_ppa_button.set_sensitive(True)
-        else:
-            self.purge_ppa_button.set_sensitive(False)
-
-    def on_update_button_clicked(self, widget):
-        @log_func(log)
-        def on_update_finished(transaction, status, parent):
-            log.debug("on_update_finished")
-            unset_busy(parent)
-
-        set_busy(self)
-        daemon = AptWorker(widget.get_toplevel(),
-                           finish_handler=on_update_finished,
-                           data=self)
-        daemon.update_cache()
-
-        self.emit('call', 'ubuntutweak.modules.appcenter', 'update_app_data', {})
-        self.emit('call', 'ubuntutweak.modules.updatemanager', 'update_list', {})
-
-    def on_source_data_downloaded(self, widget):
-        path = widget.get_downloaded_file()
-        tarfile = utdata.create_tarfile(path)
-
-        if tarfile.is_valid():
-            tarfile.extract(consts.CONFIG_ROOT)
-            self.update_source_data()
-            utdata.save_synced_timestamp(SOURCE_ROOT)
-            self.update_timestamp()
-        else:
-            ErrorDialog(_('An error occurred whilst downloading the file')).launch()
-
-    def update_source_data(self):
-        global SOURCE_PARSER
-        SOURCE_PARSER = SourceParser()
-
-        self.sourceview.model.clear()
-        self.sourceview.update_source_model()
-        self.cateview.update_cate_model()
-        self.cateview.expand_all()
-
-    def on_sync_button_clicked(self, widget):
-        dialog = CheckSourceDialog(widget.get_toplevel(), self.url)
-        dialog.run()
-        dialog.destroy()
-        if dialog.status == True:
-            dialog = QuestionDialog(_("Update available, Would you like to update?"))
-            response = dialog.run()
-            dialog.destroy()
-            if response == Gtk.ResponseType.YES:
-                dialog = FetchingDialog(parent=self.get_toplevel(), url=get_source_data_url())
-                dialog.connect('destroy', self.on_source_data_downloaded)
-                dialog.run()
-                dialog.destroy()
-        elif dialog.error == True:
-            ErrorDialog(_("Network Error, Please check your network connection or the remote server is down.")).launch()
-        else:
-            utdata.save_synced_timestamp(SOURCE_ROOT)
-            self.update_timestamp()
-            InfoDialog(_("No update available.")).launch()
-
-    @log_func(log)
-    def on_purge_ppa_button_clicked(self, widget):
-        # name_list is to display the name of PPA
-        # url_list is to identify the ppa
-        set_busy(self)
-        name_list = []
-        url_list = []
-        log.debug("self.sourceview.to_purge: %s" % self.sourceview.to_purge)
-        for url in self.sourceview.to_purge:
-            name_list.append(ppa.get_short_name(url))
-            url_list.append(url)
-
-        log.debug("PPAs to purge: url_list: %s" % url_list)
-
-        package_view = DowngradeView(self)
-        package_view.update_downgrade_model(url_list)
-        sw = Gtk.ScrolledWindow(shadow_type=Gtk.ShadowType.IN)
-        sw.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
-        select_pkgs = package_view.get_downgrade_packages()
-        sw.add(package_view)
-
-        #TODO the logic is a little ugly, need to improve the BaseMessageDialog
-        if not select_pkgs:
-            message = _("It's safe to purge the PPA, no packages need to be downgraded.")
-            sw.hide()
-        else:
-            message = _("To safely purge the PPA, the following packages must be downgraded.")
-            sw.show_all()
-            sw.set_size_request(500, 100)
-
-        dialog = QuestionDialog(title=_("You're going to purge \"%s\":") % ', '.join(name_list),
-                                message=message)
-        dialog.set_resizable(True)
-        dialog.get_content_area().pack_start(sw, True, True, 0)
-        dialog.show_all()
-
-        response = dialog.run()
-        dialog.destroy()
-        # Workflow
-        # 1. Downgrade all the PPA packages to offical packages
-        #TODO Maybe not official? Because anther ppa which is enabled may have newer packages then offical
-        # 2. If succeed, disable PPA, or keep it
-
-        if response == Gtk.ResponseType.YES:
-            log.debug("The select pkgs is: %s", str(select_pkgs))
-            worker = AptWorker(widget.get_toplevel(),
-                               finish_handler=self.on_package_work_finished,
-                               data={'parent': self,
-                                     'url_list': url_list})
-            worker.downgrade_packages(select_pkgs)
-        else:
-            unset_busy(self)
-
-    @log_func(log)
-    def on_package_work_finished(self, transaction, status, kwargs):
-        unset_busy(self)
-
-        parent = kwargs['parent']
-        url_list = kwargs['url_list']
-
-        for url in url_list:
-            #TODO remove vendor key
-            result = proxy.purge_source(url, '')
-            log.debug("Set source: %s to %s" % (url, str(result)))
-        self.sourceview.to_purge = []
-        self.update_sourceview()
-
-        notify = Notify.Notification(summary=_('PPA has been purged'),
-                                     body=_('It is highly recommend to do a "Refresh" source operation.'))
-        notify.set_icon_from_pixbuf(self.get_pixbuf(size=48))
-        notify.set_hint_string ("x-canonical-append", "")
-        notify.show()
diff --git a/ubuntutweak/admins/sourceeditor.py b/ubuntutweak/admins/sourceeditor.py
deleted file mode 100755
index 10b7c01..0000000
--- a/ubuntutweak/admins/sourceeditor.py
+++ /dev/null
@@ -1,491 +0,0 @@
-# Ubuntu Tweak - Ubuntu Configuration Tool
-#
-# Copyright (C) 2007-2011 Tualatrix Chou <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import os
-import re
-import glob
-import time
-import thread
-import socket
-import gettext
-
-from gi.repository import Gtk, Gdk, GObject, Pango
-
-from ubuntutweak.modules  import TweakModule
-from ubuntutweak.gui import GuiBuilder
-from ubuntutweak.gui.dialogs import ErrorDialog, QuestionDialog
-from ubuntutweak.policykit import PK_ACTION_SOURCE
-from ubuntutweak.policykit.dbusproxy import proxy
-from ubuntutweak.utils.package import AptWorker
-from ubuntutweak.admins.desktoprecovery import GetTextDialog
-from ubuntutweak.settings import GSetting
-
-
-SOURCES_LIST = '/etc/apt/sources.list'
-
-
-class SourceView(Gtk.TextView):
-    def __init__(self, path):
-        super(SourceView, self).__init__()
-
-        self.path = path
-        self.create_tags()
-        self.update_content()
-
-        buffer = self.get_buffer()
-        buffer.connect('end-user-action', self.on_buffer_changed)
-
-    def on_buffer_changed(self, widget):
-        self.update_from_buffer()
-
-    def update_from_buffer(self):
-        buffer = self.get_buffer()
-        content = self.get_text()
-
-        offset = buffer.get_iter_at_mark(buffer.get_insert()).get_offset()
-
-        buffer.delete(buffer.get_start_iter(), buffer.get_end_iter())
-        iter = buffer.get_iter_at_offset(0)
-        if content[-2:] == '\n\n':
-            content = content[:-1]
-        for i, line in enumerate(content.split('\n')):
-            self.parse_and_insert(buffer, iter, line, i != content.count('\n'))
-
-        iter = buffer.get_iter_at_offset(offset)
-        buffer.place_cursor(iter)
-
-    def update_content(self, content = None):
-        buffer = self.get_buffer()
-        buffer.delete(buffer.get_start_iter(), buffer.get_end_iter())
-        iter = buffer.get_iter_at_offset(0)
-        if content is None:
-            try:
-                content = open(self.path).read()
-
-                for i, line in enumerate(content.split('\n')):
-                    self.parse_and_insert(buffer, iter, line, i != content.count('\n'))
-
-            except:
-                pass
-
-    def parse_and_insert(self, buffer, iter, line, break_line=False):
-        try:
-            if line.lstrip().startswith('#'):
-                buffer.insert_with_tags_by_name(iter, line, 'full_comment')
-                self.insert_line(buffer, iter)
-            elif line.strip() == '':
-                self.insert_line(buffer, iter)
-            else:
-                has_end_blank = line.endswith(' ')
-                list = line.split()
-                if list is None:
-                    self.insert_line(buffer, iter)
-                elif has_end_blank:
-                    list[-1] = list[-1] + ' '
-                if len(list) >= 4:
-                    type, uri, distro, component = list[0], list[1], list[2], list[3:]
-
-                    buffer.insert_with_tags_by_name(iter, type, 'type')
-                    self.insert_blank(buffer, iter)
-                    buffer.insert_with_tags_by_name(iter, uri, 'uri')
-                    self.insert_blank(buffer, iter)
-                    buffer.insert_with_tags_by_name(iter, distro, 'distro')
-                    self.insert_blank(buffer, iter)
-                    self.seprarte_component(buffer, component, iter)
-                    if break_line:
-                        self.insert_line(buffer, iter)
-                elif len(list) == 3:
-                    type, uri, distro = list[0], list[1], list[2]
-
-                    buffer.insert_with_tags_by_name(iter, type, 'type')
-                    self.insert_blank(buffer, iter)
-                    buffer.insert_with_tags_by_name(iter, uri, 'uri')
-                    self.insert_blank(buffer, iter)
-                    buffer.insert_with_tags_by_name(iter, distro, 'distro')
-                    if break_line:
-                        self.insert_line(buffer, iter)
-                else:
-                    buffer.insert(iter, line)
-        except:
-            buffer.insert(iter, line)
-
-    def create_tags(self):
-        buffer = self.get_buffer()
-
-        buffer.create_tag('full_comment', foreground="blue")
-        buffer.create_tag('type', weight=Pango.Weight.BOLD)
-        buffer.create_tag('uri', underline=Pango.Underline.SINGLE, foreground='blue')
-        buffer.create_tag('distro', weight=Pango.Weight.BOLD)
-        buffer.create_tag('component', foreground="red")
-        buffer.create_tag('addon_comment', foreground="blue")
-
-    def insert_blank(self, buffer, iter):
-        buffer.insert(iter, ' ')
-
-    def insert_line(self, buffer, iter):
-        buffer.insert(iter, '\n')
-
-    def seprarte_component(self, buffer, list, iter):
-        component = []
-        stop_i = -1
-        has_comment = False
-        for i, text in enumerate(list):
-            stop_i = i
-            if text[0] != '#':
-                component.append(text)
-            else:
-                has_comment = True
-                break
-
-        buffer.insert_with_tags_by_name(iter, ' '.join(component), 'component')
-        if has_comment:
-            self.insert_blank(buffer, iter)
-            buffer.insert_with_tags_by_name(iter, ' '.join(list[stop_i:]), 'addon_comment')
-
-    def get_text(self):
-        buffer = self.get_buffer()
-        return buffer.get_text(buffer.get_start_iter(), buffer.get_end_iter(), True)
-
-    def set_path(self, path):
-        self.path = path
-
-    def get_path(self):
-        return self.path
-
-
-class SourceEditor(TweakModule):
-    __title__ = _('Source Editor')
-    __desc__ = _('Manually edit your software sources to suit your needs.')
-    __icon__ = 'system-software-update'
-    __policykit__ = PK_ACTION_SOURCE
-    __category__ = 'system'
-    _authenticated = False
-
-    def __init__(self):
-        TweakModule.__init__(self, 'sourceeditor.ui')
-
-        self.auto_backup_setting = GSetting('com.ubuntu-tweak.tweak.auto-backup')
-
-        self.textview = SourceView(SOURCES_LIST)
-        self.textview.set_sensitive(False)
-        self.sw1.add(self.textview)
-        self.textview.get_buffer().connect('changed', self.on_buffer_changed)
-
-        self.list_selection = self.list_view.get_selection()
-        self.list_selection.connect("changed", self.on_selection_changed)
-
-        self.infobar = Gtk.InfoBar()
-        self.info_label = Gtk.Label(label='Current view the list')
-        self.info_label.set_alignment(0, 0.5)
-        self.infobar.get_content_area().add(self.info_label)
-        self.infobar.connect("response", self.on_infobar_response)
-        self.infobar.add_button(Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE)
-        self.infobar.hide()
-        self.text_vbox.pack_start(self.infobar, False, False, 0)
-
-        self.connect('realize', self.on_ui_realize)
-        self.add_start(self.hpaned1)
-
-    def on_ui_realize(self, widget):
-        self.infobar.hide()
-        self.update_source_model()
-        self.list_selection.select_iter(self.list_model.get_iter_first())
-        self.auto_backup_button.set_active(self.auto_backup_setting.get_value())
-        self.auto_backup_button.connect('toggled', self.on_auto_backup_button_toggled)
-
-    def set_infobar_backup_info(self, name, list_name):
-        self.info_label.set_markup(_('You\'re viewing the backup "<b>%(backup_name)s</b>" for '
-                                     '"<b>%(list_name)s</b>"') % {'backup_name': name,
-                                                                  'list_name': list_name})
-
-    def on_auto_backup_button_toggled(self, widget):
-        self.auto_backup_setting.set_value(widget.get_active())
-
-    def on_infobar_response(self, widget, response_id):
-        model, iter = self.list_selection.get_selected()
-
-        if iter:
-            list_path = model[iter][0]
-
-            self.textview.set_path(list_path)
-            self.textview.update_content()
-
-            self.save_button.set_sensitive(False)
-            self.redo_button.set_sensitive(False)
-
-            self.infobar.hide()
-
-    def on_selection_changed(self, selection):
-        model, iter = selection.get_selected()
-
-        if iter:
-            self.textview.set_path(model[iter][0])
-            self.update_sourceslist()
-            self.update_backup_model()
-
-    def update_source_model(self):
-        model = self.list_model
-
-        model.clear()
-
-        model.append(('/etc/apt/sources.list', 'sources.list'))
-
-        SOURCE_LIST_D = '/etc/apt/sources.list.d'
-
-        if not os.path.exists(SOURCE_LIST_D):
-            self.source_combo.set_active(0)
-            return
-
-        files = glob.glob(SOURCE_LIST_D + '/*.list')
-        files.sort()
-
-        for file in files:
-            if os.path.isdir(file):
-                continue
-            model.append((file, os.path.basename(file)))
-
-    def update_backup_model(self):
-        def file_cmp(f1, f2):
-            return cmp(os.stat(f1).st_ctime, os.stat(f2).st_ctime)
-
-        model, iter = self.list_selection.get_selected()
-
-        if iter:
-            source_list = model[iter][0]
-
-            self.backup_model.clear()
-
-            files = glob.glob(source_list + '.*')
-            files.sort(cmp=file_cmp, reverse=True)
-
-            for path in files:
-                if os.path.isdir(path):
-                    continue
-                self.backup_model.append((path,
-                    os.path.basename(path).split('.list.')[-1].split('.save')[0]))
-
-            if not files:
-                self.backup_model.append((None, _('No backup yet')))
-                self.backup_edit_button.set_sensitive(False)
-                self.backup_delete_button.set_sensitive(False)
-                self.recover_button.set_sensitive(False)
-                self.backup_view_button.set_sensitive(False)
-                self.infobar.hide()
-            elif self._authenticated == True:
-                self.backup_edit_button.set_sensitive(True)
-                self.backup_delete_button.set_sensitive(True)
-                self.recover_button.set_sensitive(True)
-                self.backup_view_button.set_sensitive(True)
-
-            self.backup_combobox.set_active(0)
-
-    def on_source_combo_changed(self, widget):
-        model = widget.get_model()
-        iter = widget.get_active_iter()
-
-        if self.has_backup_value(iter):
-            self.textview.set_path(model.get_value(iter, 0))
-            self.update_sourceslist()
-
-    def on_update_button_clicked(self, widget):
-        self.set_busy()
-        daemon = AptWorker(widget.get_toplevel(), lambda t, s, d: self.unset_busy())
-        daemon.update_cache()
-
-    def update_sourceslist(self):
-        self.textview.update_content()
-        self.redo_button.set_sensitive(False)
-        self.save_button.set_sensitive(False)
-
-    def on_save_button_clicked(self, widget):
-        text = self.textview.get_text().strip()
-
-        if self.auto_backup_setting.get_value():
-            proxy.backup_source(self.textview.get_path(), self.get_time_stamp())
-            self.update_backup_model()
-
-        if proxy.edit_source(self.textview.get_path(), text) == 'error':
-            ErrorDialog(message=_('Please check the permission of the '
-                                  'sources.list file'),
-                        title=_('Save failed!')).launch()
-        else:
-            self.save_button.set_sensitive(False)
-            self.redo_button.set_sensitive(False)
-
-    def on_recover_button_clicked(self, widget):
-        model, iter = self.list_selection.get_selected()
-
-        if iter:
-            list_path = model[iter][0]
-            list_name = model[iter][1]
-
-            backup_iter = self.backup_combobox.get_active_iter()
-
-            if backup_iter:
-                backup_path = self.backup_model[backup_iter][0]
-                backup_name = self.backup_model[backup_iter][1]
-
-                dialog = QuestionDialog(message=_('Would you like to recover the '
-                                        'backup "<b>%(backup_name)s</b>" for "<b>%(list_name)s</b>"?') % \
-                                                {'backup_name': backup_name,
-                                                 'list_name': list_name})
-                response = dialog.run()
-                dialog.destroy()
-
-                if response == Gtk.ResponseType.YES:
-                    if proxy.restore_source(backup_path, list_path):
-                        self.infobar.response(Gtk.ResponseType.CLOSE)
-                    else:
-                        ErrorDialog(title=_('Recovery Failed!'),
-                                   message=_('You may need to check the permission '
-                                             'of source list.')).launch()
-
-    def on_backup_view_button_clicked(self, widget=None):
-        model, iter = self.list_selection.get_selected()
-
-        if iter:
-            list_name = model[iter][1]
-
-            iter = self.backup_combobox.get_active_iter()
-
-            if self.has_backup_value(iter):
-                name = self.backup_model[iter][1]
-                self.set_infobar_backup_info(name, list_name)
-
-                self.textview.set_path(self.backup_model[iter][0])
-                self.textview.update_content()
-                self.save_button.set_sensitive(False)
-                self.redo_button.set_sensitive(False)
-
-                self.infobar.show()
-
-    def on_backup_combobox_changed(self, widget):
-        if self.infobar.get_visible():
-            self.on_backup_view_button_clicked()
-
-    def on_backup_button_clicked(self, widget):
-        model, iter = self.list_selection.get_selected()
-
-        if iter:
-            path = model[iter][0]
-
-            dialog = GetTextDialog(message=_('Please enter the name for your backup:'),
-                                   text=self.get_time_stamp())
-            response = dialog.run()
-            dialog.destroy()
-            backup_name = dialog.get_text()
-
-            if response == Gtk.ResponseType.YES and backup_name:
-                if self.is_valid_backup_name(backup_name):
-                    if proxy.backup_source(path, backup_name):
-                        self.update_backup_model()
-                    else:
-                        ErrorDialog(message=_('Backup Failed!')).launch()
-                else:
-                    ErrorDialog(message=_('Please only use alphanumeric characters'
-                                        ' and "_" and "-".'),
-                                title=_('Backup name is invalid')).launch()
-
-    def on_backup_delete_button_clicked(self, widget):
-        iter = self.backup_combobox.get_active_iter()
-        path = self.backup_model[iter][0]
-
-        dialog = QuestionDialog(message=_('Would you like to delete the backup '
-                                          '"<b>%s</b>"?') % os.path.basename(path))
-        response = dialog.run()
-        dialog.destroy()
-
-        if response == Gtk.ResponseType.YES:
-            proxy.delete_source(path)
-            self.update_backup_model()
-
-    def on_backup_edit_button_clicked(self, widget):
-        iter = self.backup_combobox.get_active_iter()
-        path = self.backup_model[iter][0]
-        name = self.backup_model[iter][1]
-
-        dialog = GetTextDialog(message=_('Please enter a new name for your backup:'),
-                               text=name)
-        response = dialog.run()
-        dialog.destroy()
-        new_name = dialog.get_text()
-
-        if response == Gtk.ResponseType.YES and new_name and name != new_name:
-            if self.is_valid_backup_name(new_name):
-                proxy.rename_backup(path, name, new_name)
-                self.update_backup_model()
-            else:
-                ErrorDialog(message=_('Please only use alphanumeric characters'
-                                    ' and "_" and "-".'),
-                            title=_('Backup name is invalid')).launch()
-
-    def on_redo_button_clicked(self, widget):
-        dialog = QuestionDialog(message=_('The current content will be lost after reloading!\nDo you wish to continue?'))
-        if dialog.run() == Gtk.ResponseType.YES:
-            self.textview.update_content()
-            self.save_button.set_sensitive(False)
-            self.redo_button.set_sensitive(False)
-
-        dialog.destroy()
-
-    def on_buffer_changed(self, buffer):
-        if buffer.get_modified():
-            self.save_button.set_sensitive(True)
-            self.redo_button.set_sensitive(True)
-        else:
-            self.save_button.set_sensitive(False)
-            self.redo_button.set_sensitive(False)
-
-    def on_delete_button_clicked(self, widget):
-        if self.textview.get_path() ==  SOURCES_LIST:
-            ErrorDialog(_('You can\'t delete sources.list!')).launch()
-        else:
-            dialog = QuestionDialog(message=_('The "%s" will be deleted!\nDo you wish to continue?') % self.textview.get_path())
-            response = dialog.run()
-            dialog.destroy()
-            if response == Gtk.ResponseType.YES:
-                model, iter = self.list_selection.get_selected()
-
-                if iter:
-                    list_path = model[iter][0]
-                    proxy.delete_source(list_path)
-                    self.update_source_model()
-                    self.update_backup_model()
-
-    def on_polkit_action(self, widget):
-        self._authenticated = True
-        self.textview.set_sensitive(True)
-        self.delete_button.set_sensitive(True)
-        self.recover_button.set_sensitive(True)
-        self.backup_button.set_sensitive(True)
-        self.backup_edit_button.set_sensitive(True)
-        self.backup_delete_button.set_sensitive(True)
-        self.backup_view_button.set_sensitive(True)
-
-    def is_valid_backup_name(self, name):
-        pattern = re.compile('[\w\-]+')
-
-        match = pattern.search(name)
-
-        return match and name == match.group()
-
-    def has_backup_value(self, iter):
-        return iter and self.backup_model[iter][0]
-
-    def get_time_stamp(self):
-        return time.strftime('%Y-%m-%d-%H-%M', time.localtime(time.time()))
diff --git a/ubuntutweak/apps/__init__.py b/ubuntutweak/apps/__init__.py
deleted file mode 100644
index dc540d1..0000000
--- a/ubuntutweak/apps/__init__.py
+++ /dev/null
@@ -1,456 +0,0 @@
-import os
-import json
-import random
-import logging
-import webbrowser
-
-from gi.repository import GObject, Gtk, WebKit, Soup
-from gi.repository import Notify
-from aptsources.sourceslist import SourcesList
-
-from ubuntutweak import system
-from ubuntutweak import __version__
-from ubuntutweak.common.consts import IS_TESTING, LANG
-from ubuntutweak.common.debug import log_func
-from ubuntutweak.common.consts import CONFIG_ROOT
-from ubuntutweak.gui.gtk import set_busy, unset_busy
-from ubuntutweak.utils.package import AptWorker
-from ubuntutweak.utils.parser import Parser
-from ubuntutweak.utils import ppa
-from ubuntutweak.policykit.dbusproxy import proxy
-
-log = logging.getLogger('apps')
-
-
-class AppsPage(Gtk.ScrolledWindow):
-    is_loaded = False
-
-    __gsignals__ = {
-        'loaded': (GObject.SignalFlags.RUN_FIRST, None, ()),
-    }
-
-    def __init__(self, go_back_button, forward_button):
-        GObject.GObject.__init__(self)
-
-        self._go_back_button = go_back_button
-        self._forward_button = forward_button
-        self._webview = AppsWebView()
-        self.add(self._webview)
-
-        self._webview.connect('size-allocate', self.on_size_allocate)
-        self._webview.connect('notify::load-status', self.on_load_status_changed)
-
-        self.show_all()
-
-    @log_func(log)
-    def set_web_buttons_active(self, active):
-        if active:
-            self._go_back_handle_id = self._go_back_button.connect('clicked', self.on_go_back_clicked)
-            self._forward_handle_id = self._forward_button.connect('clicked', self.on_go_forward_clicked)
-        else:
-            self._go_back_button.disconnect(self._go_back_handle_id)
-            self._forward_button.disconnect(self._forward_handle_id)
-        self.on_load_status_changed(self._webview)
-
-    @log_func(log)
-    def on_load_status_changed(self, widget, *args):
-        if widget.get_property('load-status') == WebKit.LoadStatus.FINISHED:
-            self._go_back_button.set_sensitive(widget.can_go_back())
-            self._forward_button.set_sensitive(widget.can_go_forward())
-            self.on_size_allocate(widget)
-            # TODO enable when it will not crash
-            # self._webview.save_cache()
-            if self.is_loaded == False:
-                self.is_loaded = True
-                self.emit('loaded')
-
-    def load(self):
-        self._webview.load_uri('http://ubuntu-tweak.com/utapp/')
-
-    @log_func(log)
-    def on_go_back_clicked(self, widget):
-        self._webview.go_back()
-
-    @log_func(log)
-    def on_go_forward_clicked(self, widget):
-        self._webview.go_forward()
-
-    def on_size_allocate(self, widget, allocation=None):
-        if widget.get_property('load-status') == WebKit.LoadStatus.FINISHED:
-            log.debug("The page size: %dx%d", widget.get_allocation().width, widget.get_allocation().height)
-            height = widget.get_allocation().height
-
-            self._webview.execute_script('$(".container").css("height", "%dpx");' % (height - 16))
-            self._webview.execute_script('$(".sidebar").css("height", "%dpx");' % height)
-
-    #        self._webview.execute_script('''
-    #                                    var width = %d - $(".sidebar").width() - 17;
-    #                                    console.log("the width is: " + width);
-    #                                    $(".content").width(width);
-    #                                    ''' % width)
-
-
-class AppsWebView(WebKit.WebView):
-    current_app = None
-
-    (INSTALL_ACTION,
-     UNINSTALL_ACTION,
-     UPDATE_ACTION,
-     INSTALLING_ACTION,
-     UNINSTALLING_ACTION,
-     UPDATING_ACTION,
-     NOT_AVAILABLE_ACTION) = range(7)
-
-    action_text_dict = {
-        INSTALL_ACTION: _('Install'),
-        UNINSTALL_ACTION: _('Uninstall'),
-        UPDATE_ACTION: _('Update'),
-        INSTALLING_ACTION: _('Installing'),
-        UNINSTALLING_ACTION: _('Uninstalling'),
-        UPDATING_ACTION: _('Updating'),
-        NOT_AVAILABLE_ACTION: _('Not Available')
-    }
-
-    def __init__(self):
-        GObject.GObject.__init__(self)
-
-        self.get_settings().set_property('enable-default-context-menu', False)
-        self.get_settings().set_property('enable-plugins', False)
-
-        # TODO enable when it will not crash
-        # self.setup_features()
-        self.setup_user_agent()
-
-        self.connect('notify::title', self.on_title_changed)
-        self.connect('new-window-policy-decision-requested', self.on_window)
-
-    def setup_features(self):
-        try:
-            session = WebKit.get_default_session()
-            session.connect('request-queued', self.on_session_request_queued)
-
-            cookie = Soup.CookieJarText(filename=os.path.join(CONFIG_ROOT, 'cookies'))
-            session.add_feature(cookie)
-
-            self._cache = Soup.Cache(cache_dir=os.path.join(CONFIG_ROOT, 'cache'),
-                                     cache_type=Soup.CacheType.SHARED)
-            session.add_feature(self._cache)
-            self._cache.set_max_size(10 * 1024 * 1024)
-            self._cache.load()
-        except Exception, e:
-            log.error("setup_features failed with %s" % e)
-
-    def on_session_request_queued(self, session, message):
-        message.request_headers.replace('Accept-language', LANG)
-
-    @log_func(log)
-    def save_cache(self):
-        if hasattr(self, '_cache'):
-            self._cache.flush()
-            self._cache.dump()
-
-    def setup_user_agent(self):
-        user_agent = 'Mozilla/5.0 (X11; Linux %(arch)s) Chrome/%(version)s-%(codename)s' % {'arch': os.uname()[-1],
-                          'version': __version__,
-                          'codename': system.CODENAME}
-        if IS_TESTING:
-            user_agent = user_agent + '-beta'
-        self.get_settings().set_property('user-agent', user_agent)
-
-    @log_func(log)
-    def on_window(self, webview, frame, request, *args):
-        webbrowser.open_new_tab(request.get_uri())
-
-    def on_title_changed(self, *args):
-        if self.get_title() and '::' in self.get_title() and self.get_property('load-status') == WebKit.LoadStatus.FINISHED:
-            parameters = self.get_title().strip().split('::')
-            if hasattr(self, parameters[0]):
-                getattr(self, parameters[0])(*parameters[1:])
-
-    @log_func(log)
-    def initialize_apps(self, apps_json, *args):
-        apps = json.loads(apps_json)
-        for package in apps.keys():
-            apps[package] = proxy.is_package_installed(package)
-
-        self.execute_script('''
-                            var apps_dict = %s;
-                            Utapp.get("router.appsController").content.forEach(function(app) {
-                            app.set('isInstalled', apps_dict[app.package]);
-                            });''' % json.dumps(apps))
-
-    @log_func(log)
-    def update_app(self, pkgname, *args):
-        if pkgname != self.current_app:
-            self.current_app = pkgname
-
-        if proxy.is_package_avaiable(pkgname):
-            if proxy.is_package_installed(pkgname):
-                self.execute_script('Utapp.get("router.appController").currentApp.set("isInstalled", true);');
-                self.update_action_button(self.UNINSTALL_ACTION)
-            else:
-                self.execute_script('Utapp.get("router.appController").currentApp.set("isInstalled", false);');
-                self.update_action_button(self.INSTALL_ACTION)
-        else:
-            self.update_action_button(self.NOT_AVAILABLE_ACTION)
-
-        self.update_sources();
-
-    @log_func(log)
-    def do_source_operation(self, enable_str, source_json, *args):
-        enable = int(enable_str)
-        source = json.loads(source_json)
-        distro = source['distro_value']
-        log.debug("Enable? %s for source: %s for distro: %s" % (enable, source['name'], distro))
-
-        if ppa.is_ppa(source['url']):
-            file_name = '%s-%s' % (ppa.get_source_file_name(source['url']), distro)
-        else:
-            file_name = source['slug']
-
-        # TODO these kinds of source should never be featured
-        if not source['component'] and distro:
-            distro = distro + '/'
-        elif not source['component'] and not distro:
-            distro = './'
-
-        try:
-            result = proxy.set_separated_entry(source['url'], distro, source['component'],
-                                               source['summary'], enable, file_name)
-            log.debug("Enable source: %s result: %s" % (source['name'], result))
-            if source['key']:
-                proxy.add_apt_key_from_content(source['key'])
-
-            if result == 'enabled':
-                notify = Notify.Notification(summary=_('New source has been enabled'),
-                                             body=_('"%s" is enabled now, Please click the update button to update %s') % (source['name'], self.current_app))
-                notify.set_property('icon-name', 'ubuntu-tweak')
-                notify.set_hint_string("x-canonical-append", "true")
-                notify.show()
-
-                self.update_action_button(self.UPDATE_ACTION)
-        except Exception, e:
-            log.error(e)
-            self.update_sources()
-
-    @log_func(log)
-    def do_action_for_app(self, pkgname, action_id, *args):
-        action_id = int(action_id)
-
-        if action_id == self.INSTALL_ACTION:
-            set_busy(self)
-            worker = AptWorker(self.get_toplevel(),
-                               finish_handler=self.on_package_work_finished,
-                               data={'parent': self})
-            worker.install_packages([pkgname])
-
-            self.update_action_button(self.INSTALLING_ACTION)
-        elif action_id == self.UNINSTALL_ACTION:
-            set_busy(self)
-            worker = AptWorker(self.get_toplevel(),
-                               finish_handler=self.on_package_work_finished,
-                               data={'parent': self})
-            worker.remove_packages([pkgname])
-
-            self.update_action_button(self.UNINSTALLING_ACTION)
-        elif action_id == self.UPDATE_ACTION:
-            set_busy(self)
-            worker = AptWorker(self.get_toplevel(),
-                               finish_handler=self.on_update_work_finished,
-                               data={'parent': self})
-            worker.update_cache()
-            self.update_action_button(self.UPDATING_ACTION)
-
-    @log_func(log)
-    def update_action_button(self, action_id, disabled=False):
-        text = self.action_text_dict[action_id]
-
-        self.execute_script('$(".install-button")[0].innerHTML = "%s";' % text);
-        self.execute_script('$(".install-button").attr("action-id", "%d")' % action_id);
-
-        if action_id == self.NOT_AVAILABLE_ACTION:
-            self.execute_script('$(".install-button").attr("disabled", "disabled")');
-        else:
-            self.execute_script('$(".install-button").removeAttr("disabled")');
-
-    @log_func(log)
-    def update_sources(self):
-        #First hide the item not supported by current distribution
-        self.execute_script('''
-                var system_codename = "%s";
-                var ubuntu_codenames = %s;
-                console.log("Updating source for system: " + system_codename + ', codenames: ' + ubuntu_codenames);
-                var appController = Utapp.get('router.appController');
-                appController.currentApp.sources.forEach(function(source) {
-                    var distro_value = '';
-                    console.log(source.name + " is filtering codename for: ");
-                    source.distros.forEach(function(distro) {
-                        var codename = distro.codename;
-                        console.log('\t' + codename);
-                        if (ubuntu_codenames.contains(codename)){
-                            console.log('\t\tThis is ubuntu codename');
-                            if (system_codename == codename) {
-                                console.log('\t\tCodename match!');
-                                distro_value = codename;
-                                return false;
-                            }
-                        } else {
-                            console.log("\t\tThis isn't Ubuntu codename!");
-                            distro_value = codename;
-                            return false;
-                        };
-                    });
-                    if (distro_value == '') {
-                        console.log('Set source: ' + source.name + ' to hide');
-                        source.set('is_available', false);
-                    } else {
-                        source.set('distro_value', distro_value);
-                    }
-                });
-                ''' % (system.CODENAME, list(system.UBUNTU_CODENAMES)));
-
-        enabled_list = []
-
-        for source in SourcesList().list:
-            if source.type == 'deb' and not source.disabled:
-                enabled_list.append(source.uri)
-
-        self.execute_script('''
-                var enabled_list = %s;
-                $(".source-view").each(function(index) {
-                    if (enabled_list.contains($(this).attr('urldata')))
-                    {
-                        this.checked = true;
-                    }
-                    console.log(index + ': ' + $(this).attr('urldata'));
-                });
-                ''' % enabled_list);
-
-    def reset_install_button(self):
-        self.update_app(self.current_app)
-
-    @log_func(log)
-    def on_update_work_finished(self, transaction, status, kwargs):
-        parent = kwargs['parent']
-        proxy.update_apt_cache(True)
-        if proxy.is_package_upgradable(self.current_app) or \
-           (not proxy.is_package_installed(self.current_app) and \
-            proxy.is_package_avaiable(self.current_app)):
-            worker = AptWorker(self.get_toplevel(),
-                               finish_handler=self.on_package_work_finished,
-                               data={'parent': self})
-            worker.install_packages([self.current_app])
-        else:
-            unset_busy(parent)
-            self.reset_install_button()
-
-    @log_func(log)
-    def on_package_work_finished(self, transaction, status, kwargs):
-        parent = kwargs['parent']
-        proxy.update_apt_cache(True)
-        unset_busy(parent)
-        self.reset_install_button()
-
-class CateParser(Parser):
-    def __init__(self, path):
-        Parser.__init__(self, path, 'slug')
-
-    def get_name(self, key):
-        return self.get_by_lang(key, 'name')
-
-    def get_id(self, key):
-        return self[key]['id']
-
-
-class CategoryView(Gtk.TreeView):
-    (CATE_ID,
-     CATE_NAME,
-     CATE_DISPLAY) = range(3)
-
-    def __init__(self, path):
-        GObject.GObject.__init__(self)
-
-        self.path = path
-        self._status = None
-        self.parser = None
-
-        self.set_headers_visible(False)
-        self.set_rules_hint(True)
-        self.model = self._create_model()
-        self.set_model(self.model)
-        self._add_columns()
-
-    def _create_model(self):
-        '''The model is icon, title and the list reference'''
-        model = Gtk.TreeStore(GObject.TYPE_INT,
-                              GObject.TYPE_STRING,
-                              GObject.TYPE_STRING)
-
-        return model
-
-    def _add_columns(self):
-        column = Gtk.TreeViewColumn(_('Category'))
-
-        renderer = Gtk.CellRendererText()
-        column.pack_start(renderer, True)
-        column.set_sort_column_id(self.CATE_NAME)
-        column.add_attribute(renderer, 'markup', self.CATE_DISPLAY)
-        self.append_column(column)
-
-    def set_status_from_view(self, view):
-        self._status = view.get_status()
-
-    def update_cate_model(self):
-        self.model.clear()
-        self.parser = CateParser(self.path)
-
-        self.pre_update_cate_model()
-
-        iter = self.model.append(None, (0,
-                                        'all',
-                                        _('All')))
-
-        for slug in self.get_cate_items():
-            child_iter = self.model.append(iter)
-            id = self.parser.get_id(slug)
-            name = self.parser.get_name(slug)
-            display = name
-
-            if self._status:
-                self._status.load_category_from_parser(self.parser)
-                count = self._status.get_cate_unread_count(id)
-                if count:
-                    display = '<b>%s (%d)</b>' % (name, count)
-
-            log.debug("Insert category model: id: %s"
-                    "\tname: %s"
-                    "\tdisplay: %s" % (id, name, display))
-            self.model.set(child_iter, 
-                           self.CATE_ID, id,
-                           self.CATE_NAME, name,
-                           self.CATE_DISPLAY, display)
-
-    def get_cate_items(self):
-        OTHER = u'other'
-        keys = self.parser.keys()
-        keys.sort()
-        if OTHER in keys:
-            keys.remove(OTHER)
-            keys.append(OTHER)
-        return keys
-
-    def update_selected_item(self):
-        model, iter = self.get_selection().get_selected()
-
-        if iter:
-            id = model[iter][self.CATE_ID]
-            if id <= 0:
-                return True
-
-            name = model[iter][self.CATE_NAME]
-
-            count = self._status.get_cate_unread_count(id)
-            if count:
-                model[iter][self.CATE_DISPLAY] = '<b>%s (%d)</b>' % (name, count)
-            else:
-                model[iter][self.CATE_DISPLAY] = name
diff --git a/ubuntutweak/backends/daemon.py b/ubuntutweak/backends/daemon.py
index b961f0f..6934ea8 100644
--- a/ubuntutweak/backends/daemon.py
+++ b/ubuntutweak/backends/daemon.py
@@ -1,11 +1,6 @@
 #!/usr/bin/python
 
 # Copyright (C) 2007-2011 Tualatrix Chou <tualatrix@gmail.com>
-#
-# The class AptAuth is modified from softwareproperty. Author: Michael Vogt <mvo@debian.org>
-# The original file is: softwareproperties/AptAuth.py
-# GPL v2+
-# Copyright (c) 2004 Canonical
 
 import sys
 reload(sys)
@@ -20,415 +15,33 @@ import subprocess
 
 from subprocess import PIPE
 
-import apt
-import apt_pkg
 import dbus
 import dbus.service
 import dbus.mainloop.glib
 from gi.repository import GObject
 
-from aptsources.sourceslist import SourcesList
-
 from ubuntutweak import system
-from ubuntutweak.utils import ppa
 from ubuntutweak.backends import PolicyKitService
-from ubuntutweak.policykit import PK_ACTION_TWEAK, PK_ACTION_CLEAN, PK_ACTION_SOURCE
+from ubuntutweak.policykit import PK_ACTION_TWEAK
 from ubuntutweak.settings.configsettings import ConfigSetting
 
-apt_pkg.init()
-
 log = logging.getLogger('Daemon')
 
-PPA_KEY = '''-----BEGIN PGP PUBLIC KEY BLOCK-----
-Version: SKS 1.0.10
-
-mI0ESXTUHwEEAMtdNPmcgQcoPN3JcUcRrmdm1chJSmX6gj28OamOgE3Nxp3XgkDdg/vLFPv6
-Tk8zIMxQnvuSpuG1YGp3x8atcKlQAlEHncAo27Vlio6pk8jG+qipDBKq7X7FyXE6X9Peg/k7
-t7eXMLwH6ZJFN6IEmvPRTsiiQEd/dXRRuIRhPHirABEBAAG0G0xhdW5jaHBhZCBQUEEgZm9y
-IFR1YWxhdHJpWIi2BBMBAgAgBQJJdNQfAhsDBgsJCAcDAgQVAggDBBYCAwECHgECF4AACgkQ
-avDhlAYkoiC8mAQAmaxr4Kw/R2WZKde7MfbTPy7O9YoL/NQeThYGwxX6ICVr0IZUj9nxFQ/v
-tmhZ59p53bpdR8jpPXjdDwjZIIlxTf72Fky6Ri3/zsC4YRD6idS4c4L50dTy74W6IabCt8GQ
-LtJy5YASlEp5OGwRNptRSFxVE59LuOPRo2kvLIAa0Dc=
-=3itC
------END PGP PUBLIC KEY BLOCK-----'''
-
-class AptAuth:
-    def __init__(self):
-        self.gpg = ["/usr/bin/gpg"]
-        self.base_opt = self.gpg + ["--no-options", "--no-default-keyring",
-                                    "--secret-keyring", "/etc/apt/secring.gpg",
-                                    "--trustdb-name", "/etc/apt/trustdb.gpg",
-                                    "--keyring", "/etc/apt/trusted.gpg"]
-        self.list_opt = self.base_opt + ["--with-colons", "--batch",
-                                         "--list-keys"]
-        self.rm_opt = self.base_opt + ["--quiet", "--batch",
-                                       "--delete-key", "--yes"]
-        self.add_opt = self.base_opt + ["--quiet", "--batch",
-                                        "--import"]
-        
-       
-    def list(self):
-        res = []
-        #print self.list_opt
-        p = subprocess.Popen(self.list_opt,stdout=PIPE).stdout
-        for line in p.readlines():
-            fields = line.split(":")
-            if fields[0] == "pub":
-                name = fields[9]
-                res.append("%s %s\n%s" %((fields[4])[-8:],fields[5], _(name)))
-        return res
-
-    def add(self, filename):
-        #print "request to add " + filename
-        cmd = self.add_opt[:]
-        cmd.append(filename)
-        p = subprocess.Popen(cmd)
-        return (p.wait() == 0)
-        
-    def update(self):
-        cmd = ["/usr/bin/apt-key", "update"]
-        p = subprocess.Popen(cmd)
-        return (p.wait() == 0)
-
-    def rm(self, key):
-        #print "request to remove " + key
-        cmd = self.rm_opt[:]
-        cmd.append(key)
-        p = subprocess.Popen(cmd)
-        return (p.wait() == 0)
-
-
 INTERFACE = "com.ubuntu_tweak.daemon"
 PATH = "/com/ubuntu_tweak/daemon"
 
 class Daemon(PolicyKitService):
-    #TODO use signal
-    liststate = None
-    list = SourcesList()
-    cache = None
-    stable_url = 'http://ppa.launchpad.net/tualatrix/ppa/ubuntu'
-    ppa_list = []
-    p = None
-    SOURCES_LIST = '/etc/apt/sources.list'
-
     def __init__ (self, bus, mainloop):
         bus_name = dbus.service.BusName(INTERFACE, bus=bus)
         PolicyKitService.__init__(self, bus_name, PATH)
         self.mainloop = mainloop
 
-    def get_cache(self):
-        try:
-            self.update_apt_cache()
-        except Exception, e:
-            log.error("Error happened when get_cache(): %s" % str(e))
-        finally:
-            return self.cache
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='b', out_signature='b')
-    def update_apt_cache(self, init=False):
-        '''if init is true, force to update, or it will update only once'''
-        if init or not getattr(self, 'cache'):
-            apt_pkg.init()
-            self.cache = apt.Cache()
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='b', out_signature='bv')
-    def check_sources_is_valid(self, convert_source):
-        try:
-            if not os.path.exists(self.SOURCES_LIST):
-                os.system('touch %s' % self.SOURCES_LIST)
-        except Exception, e:
-            log.error(e)
-
-        self.list.refresh()
-        to_add_entry = []
-        to_rm_entry = []
-        disabled_list = ['']
-
-        for entry in self.list:
-            entry_line = entry.str().strip()
-            if entry.invalid and not entry.disabled and entry_line and not entry_line.startswith('#'):
-                try:
-                    entry.set_enabled(False)
-                except Exception, e:
-                    log.error(e)
-                if entry.file not in disabled_list:
-                    disabled_list.append(entry.file)
-                continue
-
-            if convert_source:
-                if os.path.basename(entry.file) == 'sources.list':
-                    continue
-                log.debug("Check for url: %s, type: %s, filename: %s" % (entry.uri, entry.type, entry.file))
-                if ppa.is_ppa(entry.uri):
-                    filename = '%s-%s.list' % (ppa.get_source_file_name(entry.uri), entry.dist)
-                    if filename != os.path.basename(entry.file):
-                        log.debug("[%s] %s need rename to %s" % (entry.type, entry.file, filename))
-                        to_rm_entry.append(entry)
-                        if os.path.exists(entry.file):
-                            log.debug("%s is exists, so remove it" % entry.file)
-                            os.remove(entry.file)
-                        entry.file = os.path.join(os.path.dirname(entry.file), filename)
-                        to_add_entry.append(entry)
-
-        for entry in to_rm_entry:
-            log.debug("To remove: ", entry.uri, entry.type, entry.file)
-            self.list.remove(entry)
-
-
-        valid = len(disabled_list) == 1
-        if '' in disabled_list and not valid:
-            disabled_list.remove('')
-
-        self.list.list.extend(to_add_entry)
-        self.list.save()
-
-        return valid, disabled_list
-
     def _setup_non_block_io(self, io):
         outfd = io.fileno()
         file_flags = fcntl.fcntl(outfd, fcntl.F_GETFL)
         fcntl.fcntl(outfd, fcntl.F_SETFL, file_flags | os.O_NDELAY)
 
     @dbus.service.method(INTERFACE,
-                         in_signature='sb', out_signature='b',
-                         sender_keyword='sender')
-    def set_source_enable(self, url, enable, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        self.list.refresh()
-
-        for source in self.list:
-            if url in source.str() and source.type == 'deb':
-                source.disabled = not enable
-
-        self.list.save()
-
-        for source in self.list:
-            if url in source.str() and source.type == 'deb':
-                return not source.disabled
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ss', out_signature='b',
-                         sender_keyword='sender')
-    def purge_source(self, url, key_fingerprint='', sender=None):
-        #TODO enable
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        self.list.refresh()
-        to_remove = []
-
-        self.set_source_enable(url, False)
-
-        for source in self.list:
-            if url in source.str() and source.type == 'deb':
-                to_remove.extend(glob.glob(source.file + "*"))
-
-        for file in to_remove:
-            try:
-                if file != self.SOURCES_LIST:
-                    os.remove(file)
-            except Exception, e:
-                log.error(e)
-
-        # Must refresh! Because the sources.list.d has been changed
-        self.list.refresh()
-
-        # Search for whether there's other source from the same owner, if exists,
-        # don't remove the apt-key
-        owner_url = "http://" + ppa.PPA_URL + "/" + url.split('/')[3]
-        need_remove_key = True
-
-        for source in self.list:
-            if owner_url in source.str() and source.type == 'deb':
-                need_remove_key = False
-                break
-
-        if key_fingerprint and need_remove_key:
-            self.rm_apt_key(key_fingerprint)
-
-        for source in self.list:
-            if url in source.str() and source.type == 'deb':
-                return True
-
-        return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ssssb', out_signature='s',
-                         sender_keyword='sender')
-    def set_entry(self, url, distro, comps, comment, enabled, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        self.list.refresh()
-
-        if enabled:
-            self.list.add('deb', url, distro, comps.split(' '), comment)
-            self.list.save()
-            return 'enabled'
-        else:
-            for entry in self.list:
-                if url in entry.str():
-                    entry.disabled = True
-
-            self.list.save()
-            return 'disabled'
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ssssbs', out_signature='s',
-                         sender_keyword='sender')
-    def set_separated_entry(self, url, distro,
-                            comps, comment, enabled, file,
-                            sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        self.list.refresh()
-
-        partsdir = apt_pkg.config.find_dir("Dir::Etc::Sourceparts")
-        if not os.path.exists(partsdir):
-            os.mkdir(partsdir)
-        file = os.path.join(partsdir, file+'.list')
-
-        if enabled:
-            self.list.add('deb', url, distro, comps.split(' '), comment, -1, file)
-            self.list.save()
-            return 'enabled'
-        else:
-            for entry in self.list:
-                if url in entry.str():
-                    entry.disabled = True
-
-            self.list.save()
-            return 'disabled'
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ss', out_signature='',
-                         sender_keyword='sender')
-    def replace_entry(self, old_url, new_url, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        self.list.refresh()
-
-        for entry in self.list:
-            if old_url in entry.uri:
-                entry.uri = entry.uri.replace(old_url, new_url)
-            elif new_url in entry.uri and entry.disabled:
-                self.list.remove(entry)
-
-        self.list.save()
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='')
-    def disable_ppa(self):
-        self.list.refresh()
-        self.ppa_list = []
-
-        for source in self.list:
-            if ppa.is_ppa(source.uri) and not source.disabled:
-                self.ppa_list.append(source.uri)
-                source.set_enabled(False)
-
-        self.list.save()
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='')
-    def enable_ppa(self):
-        self.list.refresh()
-
-        for source in self.list:
-            url = source.uri
-            if ppa.is_ppa(url) and url in self.ppa_list:
-                source.set_enabled(True)
-
-        self.list.save()
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='sv', out_signature='')
-    def upgrade_sources(self, check_string, source_dict):
-        self.list.refresh()
-
-        for source in self.list:
-            if source.uri in source_dict:
-                source.dist = source_dict[source.uri]
-                source.comment = source.comment.split(check_string)[0]
-                source.set_enabled(True)
-
-        self.list.save()
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='')
-    def enable_stable_source(self):
-        self.list.refresh()
-
-        for source in self.list:
-            if self.stable_url in source.str() and source.type == 'deb' and not source.disabled:
-                return
-
-        distro = system.CODENAME
-
-        if distro:
-            self.set_separated_entry(self.stable_url, distro, 'main',
-                                     'Ubuntu Tweak Stable Source', True,
-                                     'ubuntu-tweak-stable')
-            self.add_apt_key_from_content(PPA_KEY)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='b')
-    def get_stable_source_enabled(self):
-        self.list.refresh()
-
-        for source in self.list:
-            if self.stable_url in source.str() and source.type == 'deb' and not source.disabled:
-                return True
-
-        return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='s')
-    def get_list_state(self):
-        if self.liststate:
-            return self.liststate
-        else:
-            return "normal"
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='s',
-                         sender_keyword='sender')
-    def clean_apt_cache(self, sender=None):
-        self._check_permission(sender, PK_ACTION_CLEAN)
-        os.system('apt-get clean')
-
-        return 'done'
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='b')
-    def is_package_installed(self, package):
-        try:
-            pkg = self.get_cache()[package]
-            return pkg.isInstalled
-        except Exception, e:
-            log.error(e)
-        else:
-            return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='b')
-    def is_package_upgradable(self, package):
-        try:
-            pkg = self.get_cache()[package]
-            return pkg.isUpgradable
-        except Exception, e:
-            log.error(e)
-        else:
-            return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='b')
-    def is_package_avaiable(self, package):
-        try:
-            return self.get_cache().has_key(package)
-        except Exception, e:
-            log.error(e)
-            return False
-        else:
-            return False
-
-    @dbus.service.method(INTERFACE,
                          in_signature='ss', out_signature='',
                          sender_keyword='sender')
     def link_file(self, src, dst, sender=None):
@@ -445,200 +58,11 @@ class Daemon(PolicyKitService):
             os.unlink(path)
 
     @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='',
-                         sender_keyword='sender')
-    def set_list_state(self, state, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        self.liststate = state
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ss', out_signature='s',
-                         sender_keyword='sender')
-    def edit_source(self, path, content, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        if path.startswith(self.SOURCES_LIST):
-            try:
-                file = open(path, 'w')
-                file.write(content)
-                file.close()
-            except Exception, e:
-                log.error(e)
-                return 'error'
-            finally:
-                return 'done'
-        else:
-            return 'error'
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='s',
-                         sender_keyword='sender')
-    def delete_source(self, path, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        if path.startswith(self.SOURCES_LIST):
-            os.system('rm "%s"' % path)
-            if os.path.exists(path):
-                return 'error'
-            else:
-                return 'done'
-        else:
-            return 'error'
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ss', out_signature='b',
-                         sender_keyword='sender')
-    def backup_source(self, path, backup_name, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        if path.startswith(self.SOURCES_LIST):
-            new_path = path + '.' + backup_name + '.save'
-            shutil.copy(path, new_path)
-            return os.path.exists(new_path)
-        else:
-            return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ss', out_signature='b',
-                         sender_keyword='sender')
-    def restore_source(self, backup_path, restore_path, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-        if restore_path.startswith(self.SOURCES_LIST) and \
-                restore_path in backup_path:
-            shutil.copy(backup_path, restore_path)
-            return True
-        else:
-            return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='sss', out_signature='b',
-                         sender_keyword='sender')
-    def rename_backup(self, backup_path, name, new_name, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-
-        if backup_path.startswith(self.SOURCES_LIST) and name and new_name:
-            os.rename(backup_path, backup_path.replace(name, new_name))
-            return True
-        else:
-            return False
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='',
-                         sender_keyword='sender')
-    def clean_configs(self, pkg, sender=None):
-        self._check_permission(sender, PK_ACTION_CLEAN)
-        cmd = ['sudo', 'dpkg', '--purge']
-        cmd.append(pkg)
-        self.p = subprocess.Popen(cmd, stdout=PIPE)
-        self._setup_non_block_io(self.p.stdout)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='as', out_signature='',
-                         sender_keyword='sender')
-    def install_select_pkgs(self, pkgs, sender=None):
-        self._check_permission(sender, PK_ACTION_CLEAN)
-        cmd = ['sudo', 'apt-get', '-y', '--force-yes', 'install']
-        cmd.extend(pkgs)
-        log.debug("The install command is %s" % ' '.join(cmd))
-        self.p = subprocess.Popen(cmd, stdout=PIPE)
-        self._setup_non_block_io(self.p.stdout)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='', out_signature='v')
-    def get_cmd_pipe(self):
-        if self.p:
-            terminaled = self.p.poll()
-            if terminaled == None:
-                try:
-                    return self.p.stdout.readline(), str(terminaled)
-                except:
-                    return '', 'None'
-            else:
-                strings, returncode = ''.join(self.p.stdout.readlines()), str(terminaled)
-                self.p = None
-                return strings, returncode
-        else:
-            return '', 'None'
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='',
-                         sender_keyword='sender')
-    def add_apt_key_from_content(self, content, sender=None):
-        #TODO leave only one method
-        self._check_permission(sender, PK_ACTION_SOURCE)
-
-        f = tempfile.NamedTemporaryFile()
-        f.write(content)
-        f.flush()
-
-        apt_key = AptAuth()
-        apt_key.add(f.name)
-        f.close()
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='',
-                         sender_keyword='sender')
-    def rm_apt_key(self, key_id, sender=None):
-        self._check_permission(sender, PK_ACTION_SOURCE)
-
-        apt_key = AptAuth()
-        apt_key.rm(key_id)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='b',
-                         sender_keyword='sender')
-    def delete_apt_cache_file(self, file_name, sender=None):
-        self._check_permission(sender, PK_ACTION_CLEAN)
-
-        full_path = os.path.join('/var/cache/apt/archives/', file_name)
-        if os.path.exists(full_path):
-            os.remove(full_path)
-
-        return not os.path.exists(full_path)
-
-    @dbus.service.method(INTERFACE,
                          in_signature='s', out_signature='b')
     def is_exists(self, path):
         return os.path.exists(path)
 
     @dbus.service.method(INTERFACE,
-                         in_signature='ss', out_signature='',
-                         sender_keyword='sender')
-    def set_login_logo(self, src, dest, sender=None):
-        '''This is called by tweaks/loginsettings.py'''
-        self._check_permission(sender, PK_ACTION_TWEAK)
-        if not self.is_exists(os.path.dirname(dest)):
-           os.makedirs(os.path.dirname(dest))
-        self._delete_old_logofile(dest)
-        shutil.copy(src, dest)
-
-    def _delete_old_logofile(self, dest):
-        for old in glob.glob(os.path.splitext(dest)[0] + ".*"):
-            os.remove(old)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='',
-                         sender_keyword='sender')
-    def unset_login_logo(self, dest, sender=None):
-        '''This is called by tweaks/loginsettings.py'''
-        self._check_permission(sender, PK_ACTION_TWEAK)
-
-        if dest.startswith(os.path.expanduser('~gdm/.icons')):
-            self._delete_old_logofile(dest)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='b')
-    def is_link(self, path):
-        return os.path.islink(path)
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='si', out_signature='s')
-    def get_as_tempfile(self, path, uid):
-        f = tempfile.NamedTemporaryFile()
-        new_path = f.name
-        f.close()
-        os.popen('cp %s %s' % (path, new_path))
-        os.chown(new_path, uid, uid)
-        return new_path
-
-    @dbus.service.method(INTERFACE,
                          in_signature='ss', out_signature='s')
     def get_user_gconf(self, user, key):
         command = 'sudo -u %s gconftool-2 --get %s' % (user, key)
@@ -662,29 +86,6 @@ class Daemon(PolicyKitService):
         return cmd.read().strip()
 
     @dbus.service.method(INTERFACE,
-                         in_signature='s', out_signature='s')
-    def get_system_gconf(self, key):
-        command = 'gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults --get %s' % key
-        cmd = os.popen(command)
-        output = cmd.read().strip()
-        log.debug('get_system_gconf: %s is %s' % (key, output))
-        return output
-
-    @dbus.service.method(INTERFACE,
-                         in_signature='ssss', out_signature='s',
-                         sender_keyword='sender')
-    def set_system_gconf(self, key, value, type, list_type='', sender=None):
-        self._check_permission(sender, PK_ACTION_TWEAK)
-        log.debug('set_system_gconf: %s to %s' % (key, value))
-        if list_type == '':
-            command = 'gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults --type %s --set %s %s' % (type, key, value)
-        else:
-            command = 'gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults --type %s --list-type %s --set %s %s' % (type, list_type, key, value)
-        cmd = os.popen(command)
-        output = cmd.read().strip()
-        return output
-
-    @dbus.service.method(INTERFACE,
                          in_signature='ss', out_signature='b',
                          sender_keyword='sender')
     def set_config_setting(self, key, value, sender=None):
diff --git a/ubuntutweak/clips/cleanerinfo.py b/ubuntutweak/clips/cleanerinfo.py
index 84e2608..97f5525 100644
--- a/ubuntutweak/clips/cleanerinfo.py
+++ b/ubuntutweak/clips/cleanerinfo.py
@@ -13,16 +13,6 @@ class CleanerInfo(Clip):
     def __init__(self):
         Clip.__init__(self)
 
-        cache_number = len(glob.glob('/var/cache/apt/archives/*.deb'))
-
-        if cache_number:
-            self.set_title(_('Some cache can be cleaned to free your disk space'))
-
-        label = Gtk.Label(label=_('%s cache packages can be cleaned.') % cache_number)
-        label.set_alignment(0, 0.5)
-
-        self.add_content(label)
-
         try:
             if system.CODENAME in ['precise']:
                 root_path = '~/.thumbnails'
diff --git a/ubuntutweak/clips/updateinfo.py b/ubuntutweak/clips/updateinfo.py
deleted file mode 100644
index 51ca60b..0000000
--- a/ubuntutweak/clips/updateinfo.py
+++ /dev/null
@@ -1,68 +0,0 @@
-import os
-import time
-import stat
-from gettext import ngettext
-
-from gi.repository import Gtk
-
-from ubuntutweak.clips import Clip
-from ubuntutweak.utils import icon
-
-class UpdateInfo(Clip):
-    __icon__ = 'system-software-update'
-    __title__ = _('Your system is up-to-date')
-
-    NO_UPDATE_WARNING_DAYS = 7
-
-    def __init__(self):
-        Clip.__init__(self)
-
-        label = Gtk.Label(label=self._get_last_apt_get_update_text())
-        label.set_alignment(0, 0.5)
-
-        self.add_content(label)
-
-        self.show_all()
-
-    # The following two function are copyed from UpdateManager/UpdateManager.py
-    def _get_last_apt_get_update_hours(self):
-        """
-        Return the number of hours since the last successful apt-get update
-      
-        If the date is unknown, return "None"
-        """
-        if not os.path.exists("/var/lib/apt/periodic/update-success-stamp"):
-            return None
-        # calculate when the last apt-get update (or similar operation)
-        # was performed
-        mtime = os.stat("/var/lib/apt/periodic/update-success-stamp")[stat.ST_MTIME]
-        ago_hours = int((time.time() - mtime) / (60*60) )
-        return ago_hours
-
-    def _get_last_apt_get_update_text(self):
-        """
-        return a human readable string with the information when
-        the last apt-get update was run
-        """
-        ago_hours = self._get_last_apt_get_update_hours()
-        if ago_hours is None:
-            return _("It is unknown when the package information was "
-                     "updated last. Please try clicking on the 'Check' "
-                     "button to update the information.")
-        ago_days = int( ago_hours / 24 )
-        if ago_days > self.NO_UPDATE_WARNING_DAYS:
-            return _("The package information was last updated %(days_ago)s "
-                     "days ago.\n"
-                     "Press the 'Check' button below to check for new software "
-                     "updates.") % { "days_ago" : ago_days, }
-        elif ago_days > 0:
-            return ngettext("The package information was last updated %(days_ago)s day ago.",
-                            "The package information was last updated %(days_ago)s days ago.",
-                            ago_days) % { "days_ago" : ago_days, }
-        elif ago_hours > 0:
-            return ngettext("The package information was last updated %(hours_ago)s hour ago.",
-                            "The package information was last updated %(hours_ago)s hours ago.",
-                            ago_hours) % { "hours_ago" : ago_hours, }
-        else:
-            return _("The package information was last updated less than one hour ago.")
-        return None
diff --git a/ubuntutweak/common/config.py b/ubuntutweak/common/config.py
index 94336e7..c8d97c1 100644
--- a/ubuntutweak/common/config.py
+++ b/ubuntutweak/common/config.py
@@ -40,118 +40,11 @@ class TweakSettings:
 
     url = 'tweak_url'
     version = 'tweak_version'
-    toolbar_size = 'toolbar_size'
-    window_size= 'window_size'
-    window_height = 'window_height'
-    window_width = 'window_width'
     show_donate_notify = 'show_donate_notify'
-    default_launch = 'default_launch'
-    check_update = 'check_update'
-    sync_notify = 'sync_notify'
-    separated_sources = 'separated_sources'
-    use_mirror_ppa = 'use_mirror_ppa'
-    enable_new_item = 'enable_new_item'
-    need_save = True
-
-    @classmethod
-    def get_enable_new_item(cls):
-        return cls.config.get_value_from_key(cls.enable_new_item, default=True)
-
-    @classmethod
-    def set_enable_new_item(cls, bool):
-        cls.config.set_value_from_key(cls.enable_new_item, bool)
-
-    @classmethod
-    def get_check_update(cls):
-        return cls.config.get_value_from_key(cls.check_update, default=True)
-
-    @classmethod
-    def set_check_update(cls, bool):
-        cls.config.set_value_from_key(cls.check_update, bool)
-
-    @classmethod
-    def set_default_launch(cls, id):
-        cls.config.set_value_from_key(cls.default_launch, id)
-
-    @classmethod
-    def get_default_launch(cls):
-        return cls.config.get_value_from_key(cls.default_launch)
-
-    @classmethod
-    def set_show_donate_notify(cls, bool):
-        return cls.config.set_value_from_key(cls.show_donate_notify, bool)
-
-    @classmethod
-    def get_show_donate_notify(cls):
-        return cls.config.get_value_from_key(cls.show_donate_notify, default=True)
-
-    @classmethod
-    def set_sync_notify(cls, bool):
-        return cls.config.set_value_from_key(cls.sync_notify, bool)
-
-    @classmethod
-    def get_sync_notify(cls):
-        return cls.config.get_value_from_key(cls.sync_notify, default=True)
-
-    def set_use_mirror_ppa(cls, bool):
-        return cls.config.set_value_from_key(cls.use_mirror_ppa, bool)
-
-    @classmethod
-    def get_use_mirror_ppa(cls):
-        return cls.config.get_value_from_key(cls.use_mirror_ppa, default=False)
-
-    @classmethod
-    def set_separated_sources(cls, bool):
-        return cls.config.set_value_from_key(cls.separated_sources, bool)
-
-    @classmethod
-    def get_separated_sources(cls):
-        return cls.config.get_value_from_key(cls.separated_sources, default=True)
-
-    @classmethod
-    def set_url(cls, url):
-        return cls.config.set_value_from_key(cls.url, url)
-
-    @classmethod
-    def get_url(cls):
-        return cls.config.get_value_from_key(cls.url)
 
     @classmethod
     def set_version(cls, version):
         return cls.config.set_value_from_key(cls.version, version)
 
-    @classmethod
-    def get_version(cls):
-        return cls.config.get_value_from_key(cls.version)
-
-    @classmethod
-    def set_paned_size(cls, size):
-        cls.config.set_value_from_key(cls.toolbar_size, size)
-
-    @classmethod
-    def get_paned_size(cls):
-        position = cls.config.get_value_from_key(cls.toolbar_size)
-
-        if position:
-            return position
-        else:
-            return 150
-
-    @classmethod
-    def set_window_size(cls, width, height):
-        cls.config.set_value_from_key(cls.window_width, width)
-        cls.config.set_value_from_key(cls.window_height, height)
-
-    @classmethod
-    def get_window_size(cls):
-        width = cls.config.get_value_from_key(cls.window_width, default=900)
-        height = cls.config.get_value_from_key(cls.window_height, default=500)
-
-        return (width, height)
-
-    @classmethod
-    def get_icon_theme(cls):
-        return cls.config.get_value_from_key('/desktop/gnome/interface/icon_theme')
-
 if __name__ == '__main__':
     print Config().get_value_from_key('show_donate_notify')
diff --git a/ubuntutweak/common/consts.py b/ubuntutweak/common/consts.py
index ba64932..e3f3611 100644
--- a/ubuntutweak/common/consts.py
+++ b/ubuntutweak/common/consts.py
@@ -41,7 +41,7 @@ if not __file__.startswith('/usr'):
     IS_INSTALLED = False
 
 try:
-    PKG_VERSION = os.popen("dpkg-query -f '${Version}' -W %s" % PACKAGE).read()
+    PKG_VERSION = os.popen("pacman -Q %s | awk '{print $2}'" % PACKAGE).read()
     IS_TESTING = '+' in PKG_VERSION
     if IS_TESTING:
         VERSION = PKG_VERSION
diff --git a/ubuntutweak/common/sourcedata.py b/ubuntutweak/common/sourcedata.py
deleted file mode 100644
index d99009f..0000000
--- a/ubuntutweak/common/sourcedata.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from ubuntutweak import system
-
-def is_ubuntu(distro):
-    if type(distro) == list:
-        for dis in distro:
-            if system.is_supported(dis):
-                return True
-            return False
-    else:
-        if system.is_supported(distro):
-            return True
-        return False
-
-def filter_sources():
-    newsource = []
-    for item in SOURCES_DATA:
-        distro = item[1]
-        if is_ubuntu(distro):
-            if system.codename in distro:
-                newsource.append([item[0], system.codename, item[2], item[3]])
-        else:
-            newsource.append(item)
-
-    return newsource
diff --git a/ubuntutweak/janitor/__init__.py b/ubuntutweak/janitor/__init__.py
index 77a9be9..5559959 100644
--- a/ubuntutweak/janitor/__init__.py
+++ b/ubuntutweak/janitor/__init__.py
@@ -18,8 +18,6 @@ from ubuntutweak.settings import GSetting
 from ubuntutweak.common.debug import run_traceback, log_func
 from ubuntutweak.common.consts import DATA_DIR
 from ubuntutweak.gui.dialogs import ErrorDialog
-from ubuntutweak.policykit import PK_ACTION_CLEAN
-from ubuntutweak.policykit.widgets import PolkitAction
 
 log = logging.getLogger('Janitor')
 
@@ -45,22 +43,6 @@ class CruftObject(object):
         return None
 
 
-class PackageObject(CruftObject):
-    def __init__(self, name, package_name, size):
-        self.name = name
-        self.package_name = package_name
-        self.size = size
-
-    def get_size_display(self):
-        return filesizeformat(self.size)
-
-    def get_icon(self):
-        return icon.get_from_name('deb')
-
-    def get_package_name(self):
-        return self.package_name
-
-
 class CacheObject(CruftObject):
     def __init__(self, name, path, size):
         self.name = name
@@ -703,11 +685,6 @@ class JanitorPage(Gtk.VBox, GuiBuilder):
     @inline_callbacks
     def on_clean_button_clicked(self, widget):
         '''plugin_dict: {plugin: {cruft: iter}}'''
-        try:
-            yield PolkitAction(PK_ACTION_CLEAN).do_authenticate()
-        except Exception, e:
-            log.debug(e)
-            return
 
         self.plugin_to_run = 0
 
@@ -841,28 +818,6 @@ class JanitorPage(Gtk.VBox, GuiBuilder):
         loader = ModuleLoader('janitor')
         plugin_to_load = self.plugins_setting.get_value()
 
-        system_text = _('System')
-        iter = self.janitor_model.append(None, (None,
-                                                icon.get_from_name('distributor-logo'),
-                                                system_text,
-                                                "<b><big>%s</big></b>" % system_text,
-                                                None,
-                                                None,
-                                                None))
-
-        for plugin in loader.get_modules_by_category('system'):
-            if plugin.is_user_extension() and plugin.get_name() not in plugin_to_load:
-                log.debug("User extension: %s not in setting to load" % plugin.get_name())
-                continue
-            size_list.append(Gtk.Label(label=plugin.get_title()).get_layout().get_pixel_size()[0])
-            self.janitor_model.append(iter, (False,
-                                             None,
-                                             plugin.get_title(),
-                                             plugin.get_title(),
-                                             plugin(),
-                                             None,
-                                             None))
-
         personal_text = _('Personal')
 
         iter = self.janitor_model.append(None, (None,
diff --git a/ubuntutweak/janitor/aptcache_plugin.py b/ubuntutweak/janitor/aptcache_plugin.py
deleted file mode 100644
index 77ee40c..0000000
--- a/ubuntutweak/janitor/aptcache_plugin.py
+++ /dev/null
@@ -1,27 +0,0 @@
-import logging
-
-from ubuntutweak.janitor import JanitorCachePlugin
-from ubuntutweak.policykit.dbusproxy import proxy
-
-log = logging.getLogger('aptcache_plugin')
-
-
-class AptCachePlugin(JanitorCachePlugin):
-    __title__ = _('Apt Cache')
-    __category__ = 'system'
-
-    root_path = '/var/cache/apt/archives/'
-    pattern = '*.deb'
-
-    def clean_cruft(self, cruft_list=[], parent=None):
-        for index, cruft in enumerate(cruft_list):
-            log.debug('Cleaning...%s' % cruft.get_name())
-            result = proxy.delete_apt_cache_file(cruft.get_name())
-
-            if bool(result) == False:
-                self.emit('clean_error', cruft.get_name())
-                break
-            else:
-                self.emit('object_cleaned', cruft, index + 1)
-
-        self.emit('all_cleaned', True)
diff --git a/ubuntutweak/janitor/autoremoval_plugin.py b/ubuntutweak/janitor/autoremoval_plugin.py
deleted file mode 100644
index 93e0616..0000000
--- a/ubuntutweak/janitor/autoremoval_plugin.py
+++ /dev/null
@@ -1,53 +0,0 @@
-import logging
-
-from gi.repository import Gtk
-
-from ubuntutweak.gui.gtk import set_busy, unset_busy
-from ubuntutweak.janitor import JanitorPlugin, PackageObject
-from ubuntutweak.utils.package import AptWorker
-from ubuntutweak.utils import filesizeformat
-
-
-log = logging.getLogger('AutoRemovalPlugin')
-
-class AutoRemovalPlugin(JanitorPlugin):
-    __title__ = _('Unneeded Packages')
-    __category__ = 'system'
-
-    def get_cruft(self):
-        cache = AptWorker.get_cache()
-        count = 0
-        size = 0
-        if cache:
-            for pkg in cache:
-                if pkg.is_auto_removable and not pkg.name.startswith('linux'):
-                    count += 1
-                    size += pkg.installed.size
-                    self.emit('find_object',
-                              PackageObject(pkg.installed.summary, pkg.name, pkg.installed.size),
-                              count)
-
-        self.emit('scan_finished', True, count, size)
-
-    def clean_cruft(self, parent=None, cruft_list=[]):
-        set_busy(parent)
-        worker = AptWorker(parent,
-                           finish_handler=self.on_clean_finished,
-                           error_handler=self.on_error,
-                           data=parent)
-        worker.remove_packages([cruft.get_package_name() for cruft in cruft_list])
-
-    def on_error(self, error):
-        log.error('AptWorker error with: %s' % error)
-        self.emit('clean_error', error)
-
-    def on_clean_finished(self, transaction, status, parent):
-        unset_busy(parent)
-        AptWorker.update_apt_cache(True)
-        self.emit('all_cleaned', True)
-
-    def get_summary(self, count):
-        if count:
-            return '[%d] %s' % (count, self.__title__)
-        else:
-            return _('Unneeded Packages (No package to be removed)')
diff --git a/ubuntutweak/janitor/oldkernel_plugin.py b/ubuntutweak/janitor/oldkernel_plugin.py
deleted file mode 100644
index c4d71dc..0000000
--- a/ubuntutweak/janitor/oldkernel_plugin.py
+++ /dev/null
@@ -1,105 +0,0 @@
-import os
-import re
-import logging
-
-from distutils.version import LooseVersion
-from ubuntutweak.gui.gtk import set_busy, unset_busy
-from ubuntutweak.janitor import JanitorPlugin, PackageObject
-from ubuntutweak.utils.package import AptWorker
-from ubuntutweak.common.debug import log_func, get_traceback
-
-
-log = logging.getLogger('OldKernelPlugin')
-
-
-class OldKernelPlugin(JanitorPlugin):
-    __title__ = _('Old Kernel')
-    __category__ = 'system'
-
-    p_kernel_version = re.compile('[.\d]+-\d+')
-    p_kernel_package = re.compile('linux-[a-z\-]+')
-
-    def __init__(self):
-        JanitorPlugin.__init__(self)
-        try:
-            self.current_kernel_version = self.p_kernel_version.findall('-'.join(os.uname()[2].split('-')[:2]))[0]
-            log.debug("the current_kernel_version is %s" % self.current_kernel_version)
-        except Exception, e:
-            log.error(e)
-            self.current_kernel_version = '3.2.0-36'
-
-    def get_cruft(self):
-        try:
-            cache = AptWorker.get_cache()
-            count = 0
-            size = 0
-
-            if cache:
-                for pkg in cache:
-                    if pkg.is_installed and self.is_old_kernel_package(pkg.name):
-                        log.debug("Find old kernerl: %s" % pkg.name)
-                        count += 1
-                        size += pkg.installed.size
-                        self.emit('find_object',
-                                  PackageObject(pkg.name, pkg.name, pkg.installed.size),
-                                  count)
-
-            self.emit('scan_finished', True, count, size)
-        except Exception, e:
-            error = get_traceback()
-            log.error(error)
-            self.emit('scan_error', error)
-
-    def clean_cruft(self, cruft_list=[], parent=None):
-        set_busy(parent)
-        worker = AptWorker(parent,
-                           finish_handler=self.on_clean_finished,
-                           error_handler=self.on_error,
-                           data=parent)
-        worker.remove_packages([cruft.get_package_name() for cruft in cruft_list])
-
-    def on_error(self, error):
-        log.error('AptWorker error with: %s' % error)
-        self.emit('clean_error', error)
-
-    def on_clean_finished(self, transaction, status, parent):
-        unset_busy(parent)
-        AptWorker.update_apt_cache(True)
-        self.emit('all_cleaned', True)
-
-    def is_old_kernel_package(self, pkg):
-        basenames = ['linux-image', 'linux-image-extra', 'linux-headers',
-                     'linux-image-debug', 'linux-ubuntu-modules',
-                     'linux-header-lum', 'linux-backport-modules',
-                     'linux-header-lbm', 'linux-restricted-modules']
-
-        if pkg.startswith('linux'):
-            package = self.p_kernel_package.findall(pkg)
-            if package:
-                package = package[0].rstrip('-')
-            else:
-                return False
-
-            if package in basenames:
-                match = self.p_kernel_version.findall(pkg)
-                if match and self._compare_kernel_version(match[0]):
-                    return True
-        return False
-
-    @log_func(log)
-    def _compare_kernel_version(self, version):
-        c1, c2 = self.current_kernel_version.split('-')
-        p1, p2 = version.split('-')
-        if c1 == p1:
-            if int(c2) > int(p2):
-                return True
-            else:
-                return False
-        else:
-            return LooseVersion(c1) > LooseVersion(p1)
-
-    def get_summary(self, count):
-        if count:
-            return '[%d] %s' % (count, self.__title__)
-        else:
-            return _('Old Kernel Packages (No old kernel package to be removed)')
diff --git a/ubuntutweak/janitor/packageconfigs_plugin.py b/ubuntutweak/janitor/packageconfigs_plugin.py
deleted file mode 100644
index 70f82eb..0000000
--- a/ubuntutweak/janitor/packageconfigs_plugin.py
+++ /dev/null
@@ -1,73 +0,0 @@
-import os
-import time
-import logging
-
-from gi.repository import GObject, Gtk
-
-from ubuntutweak.gui.gtk import set_busy, unset_busy
-from ubuntutweak.janitor import JanitorPlugin, PackageObject
-from ubuntutweak.utils import icon, filesizeformat
-from ubuntutweak.policykit.dbusproxy import proxy
-
-
-log = logging.getLogger('PackageConfigsPlugin')
-
-class PackageConfigObject(PackageObject):
-    def __init__(self, name):
-        self.name = name
-
-    def get_icon(self):
-        return icon.get_from_name('text-plain')
-
-    def get_size_display(self):
-        return ''
-
-    def get_size(self):
-        return 0
-
-
-class PackageConfigsPlugin(JanitorPlugin):
-    __title__ = _('Package Configs')
-    __category__ = 'system'
-
-    def get_cruft(self):
-        count = 0
-
-        for line in os.popen('dpkg -l'):
-            try:
-                temp_list = line.split()
-                status, pkg = temp_list[0], temp_list[1]
-                if status == 'rc':
-                    des = temp_list[3:]
-                    count += 1
-                    self.emit('find_object',
-                              PackageConfigObject(pkg),
-                              count)
-            except:
-                pass
-
-        self.emit('scan_finished', True, count, 0)
-
-    def clean_cruft(self, cruft_list=[], parent=None):
-        for index, cruft in enumerate(cruft_list):
-            log.debug('Cleaning...%s' % cruft.get_name())
-            proxy.clean_configs(cruft.get_name())
-            line, returncode = proxy.get_cmd_pipe()
-            while returncode == 'None':
-                log.debug('output: %s, returncode: %s' % (line, returncode))
-                time.sleep(0.2)
-                line, returncode = proxy.get_cmd_pipe()
-
-            if returncode != '0':
-                self.emit('clean_error', returncode)
-                break
-            else:
-                self.emit('object_cleaned', cruft, index + 1)
-
-        self.emit('all_cleaned', True)
-
-    def get_summary(self, count):
-        if count:
-            return '[%d] %s' % (count, self.__title__)
-        else:
-            return _('Packages Configs (No package config to be removed)')
diff --git a/ubuntutweak/janitor/softwarecenter_plugin.py b/ubuntutweak/janitor/softwarecenter_plugin.py
deleted file mode 100644
index 052bdc0..0000000
--- a/ubuntutweak/janitor/softwarecenter_plugin.py
+++ /dev/null
@@ -1,7 +0,0 @@
-from ubuntutweak.janitor import JanitorCachePlugin
-
-class SoftwareCenterCachePlugin(JanitorCachePlugin):
-    __title__ = _('Software Center Cache')
-    __category__ = 'application'
-
-    root_path = '~/.cache/software-center'
diff --git a/ubuntutweak/main.py b/ubuntutweak/main.py
index b30edd0..5006bf7 100644
--- a/ubuntutweak/main.py
+++ b/ubuntutweak/main.py
@@ -23,13 +23,11 @@ from gi.repository import GObject, Gtk, Gdk, Pango
 
 from ubuntutweak.gui import GuiBuilder
 from ubuntutweak.gui.gtk import post_ui
-from ubuntutweak.policykit.widgets import PolkitButton
 from ubuntutweak.utils import icon
 from ubuntutweak.common.consts import VERSION
 from ubuntutweak.modules import ModuleLoader, create_broken_module_class
 from ubuntutweak.gui.dialogs import ErrorDialog
 from ubuntutweak.clips import ClipPage
-from ubuntutweak.apps import AppsPage
 from ubuntutweak.janitor import JanitorPage
 from ubuntutweak.policykit.dbusproxy import proxy
 from ubuntutweak.settings import GSetting
@@ -295,14 +293,12 @@ class UbuntuTweakWindow(GuiBuilder):
         self.no_result_box.label = self.result_text
         self.search_page = SearchPage(self.no_result_box)
         clip_page = ClipPage()
-        self.apps_page = AppsPage(self.back_button, self.next_button)
         janitor_page = JanitorPage()
         self.preferences_dialog = PreferencesDialog(self.mainwindow)
 
         self.recently_used_settings = GSetting('com.ubuntu-tweak.tweak.recently-used')
 
         self.feature_dict['overview'] = self.notebook.append_page(clip_page, Gtk.Label('overview'))
-        self.feature_dict['apps'] = self.notebook.append_page(self.apps_page, Gtk.Label())
         self.feature_dict['tweaks'] = self.notebook.append_page(tweaks_page, Gtk.Label('tweaks'))
         self.feature_dict['admins'] = self.notebook.append_page(admins_page, Gtk.Label('admins'))
         self.feature_dict['janitor'] = self.notebook.append_page(janitor_page, Gtk.Label('janitor'))
@@ -318,7 +314,6 @@ class UbuntuTweakWindow(GuiBuilder):
         tweaks_page.connect('module_selected', self.on_module_selected)
         self.search_page.connect('module_selected', self.on_module_selected)
         admins_page.connect('module_selected', self.on_module_selected)
-        self.apps_page.connect('loaded', self.show_apps_page)
         clip_page.connect('load_module', lambda widget, name: self.do_load_module(name))
         clip_page.connect('load_feature', lambda widget, name: self.select_target_feature(name))
 
@@ -336,14 +331,6 @@ class UbuntuTweakWindow(GuiBuilder):
                                           Gdk.ModifierType.CONTROL_MASK,
                                           Gtk.AccelFlags.VISIBLE)
         self.mainwindow.add_accel_group(accel_group)
-        thread.start_new_thread(self.preload_proxy_cache, ())
-
-    def show_apps_page(self, widget):
-        self.notebook.set_current_page(self.feature_dict['apps'])
-
-    def preload_proxy_cache(self):
-        #This function just called to make sure the cache is loaded as soon as possible
-        proxy.is_package_installed('ubuntu-tweak')
 
     def on_search_entry_activate(self, widget):
         widget.grab_focus()
@@ -383,7 +370,7 @@ class UbuntuTweakWindow(GuiBuilder):
         if width >= 900 and height >= 506:
             self.mainwindow.set_default_size(width, height)
 
-        for feature_button in ('overview_button', 'apps_button', 'admins_button', \
+        for feature_button in ('overview_button', 'admins_button', \
                                'tweaks_button', 'janitor_button'):
             button = getattr(self, feature_button)
 
@@ -451,18 +438,6 @@ class UbuntuTweakWindow(GuiBuilder):
             self.description_label.set_text(module.get_description())
             page = self.notebook.get_nth_page(index)
 
-            if page.__policykit__:
-                if hasattr(page, 'un_lock'):
-                    page.un_lock.show()
-                    self._last_unlock = page.un_lock
-                else:
-                    page.un_lock = PolkitButton(page.__policykit__)
-                    page.un_lock.connect('authenticated', page.on_polkit_action)
-                    page.un_lock.show()
-                    self._last_unlock = page.un_lock
-                    self.right_top_box.pack_start(page.un_lock, False, False, 6)
-                    self.right_top_box.reorder_child(page.un_lock, 0)
-
             if not module.__name__.startswith('Broken'):
                 self.log_used_module(module.__name__)
             self.update_jump_buttons()
@@ -472,9 +447,6 @@ class UbuntuTweakWindow(GuiBuilder):
             self.title_label.set_markup('')
             self.description_label.set_text('')
 
-            if hasattr(self, '_last_unlock'):
-                self._last_unlock.hide()
-
     def _save_loaded_info(self, name, module, index):
         log.info('_save_loaded_info: %s, %s, %s' % (name, module, index))
         self.loaded_modules[name] = index
@@ -538,13 +510,6 @@ class UbuntuTweakWindow(GuiBuilder):
 
         self.update_jump_buttons()
 
-    def on_apps_button_toggled(self, widget):
-        self.on_feature_button_clicked(widget, 'apps')
-
-    def on_apps_button_clicked(self, widget):
-        self.navigation_dict['apps'] = tuple(reversed(self.navigation_dict['apps']))
-        self.on_apps_button_toggled(widget)
-
     def on_tweaks_button_clicked(self, widget):
         self.navigation_dict['tweaks'] = tuple(reversed(self.navigation_dict['tweaks']))
         self.on_tweaks_button_toggled(widget)
@@ -588,22 +553,7 @@ class UbuntuTweakWindow(GuiBuilder):
                     self.notebook.set_current_page(self.feature_dict[feature])
                     self.set_current_module(None)
 
-            if feature == 'apps':
-                log.debug("handler_block_by_func by apps")
-                self.back_button.handler_block_by_func(self.on_back_button_clicked)
-                self.next_button.handler_block_by_func(self.on_next_button_clicked)
-                if not self.apps_page.is_loaded:
-                    self.notebook.set_current_page(self.feature_dict['wait'])
-                    self.apps_page.load()
-                self.apps_page.set_web_buttons_active(True)
-            else:
-                self.update_jump_buttons()
-        else:
-            if feature == 'apps':
-                log.debug("handler_unblock_by_func by apps")
-                self.apps_page.set_web_buttons_active(False)
-                self.back_button.handler_unblock_by_func(self.on_back_button_clicked)
-                self.next_button.handler_unblock_by_func(self.on_next_button_clicked)
+            self.update_jump_buttons()
 
     def log_used_module(self, name):
         log.debug("Log the %s to Recently Used" % name)
diff --git a/ubuntutweak/module/__init__.py b/ubuntutweak/module/__init__.py
index 28f4fcc..d5850e1 100644
--- a/ubuntutweak/module/__init__.py
+++ b/ubuntutweak/module/__init__.py
@@ -275,18 +275,5 @@ class BrokenModule(TweakModule):
     def __init__(self):
         super(BrokenModule, self).__init__('brokenmodule.ui')
 
-        if '/etc/apt/apt.conf.d' in self.get_error():
-            p = re.compile('(/etc/apt/apt.conf.d/[\w-]+)')
-            broken_file = p.findall(self.get_error())[0]
-            self.message_label.set_text(_("Ubuntu Tweak has detected that your apt configuration is broken.\nTry to fix by following steps:\n\n\t1. Open your terminal\n\t2. Run the commands to fix:\n\n\t\tsudo chmod 644 %(broken_file)s\n\t\tsudo chown root:root %(broken_file)s\n\nOr you can submit the Error Message to the developer for help:" % {'broken_file': broken_file}))
-        elif '/etc/apt/sources.list.d/' in self.get_error():
-            p = re.compile('(/etc/apt/sources.list.d/[\w-]+)')
-            broken_file = p.findall(self.get_error())[0]
-
-            self.message_label.set_text(_("Ubuntu Tweak has detected that your apt list file is broken.\nTry to fix by following steps:\n\n\t1. Open your terminal\n\t2. Run the command to open apt list file:\n\n\t\tsudo gedit %s\n\n\t3. Edit the list to make it correctly\n\nOr you can submit the Error Message to the developer for help:" % broken_file))
-
-        self.error_view.reparent(self.scrolled_window)
-        self.reparent(self.alignment1)
-
     def on_report_button_clicked(self, widget):
         webbrowser.open('https://bugs.launchpad.net/ubuntu-tweak/+filebug')
diff --git a/ubuntutweak/module/taskinstall.py b/ubuntutweak/module/taskinstall.py
deleted file mode 100755
index 86e0d53..0000000
--- a/ubuntutweak/module/taskinstall.py
+++ /dev/null
@@ -1,255 +0,0 @@
-#!/usr/bin/python
-
-# Ubuntu Tweak - PyGTK based desktop configuration tool
-#
-# Copyright (C) 2007-2009 TualatriX <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import os
-import gtk
-import pango
-import gobject
-
-from ubuntutweak.modules import TweakModule
-from ubuntutweak.ui import CellRendererButton
-from ubuntutweak.ui.dialogs import QuestionDialog, InfoDialog, WarningDialog
-from ubuntutweak.modules.sourcecenter import UpdateView
-from ubuntutweak.common.package import PACKAGE_WORKER, PackageInfo
-
-TASKS = {
-    'server': (_('Basic Ubuntu server'), _('This task provides the Ubuntu server environment.')),
-    'eucalyptus-simple-cluster': (_('Cloud computing cluster'), _('Combined Eucalyptus cloud and cluster controllers.')),
-    'eucalyptus-node': (_('Cloud computing node'), _('Eucalyptus node controller.')),
-    'dns-server': (_('DNS server'), _('Selects the BIND DNS server and its documentation.')),
-    'edubuntu-server': (_('Edubuntu server'), _('This task provides the Edubuntu classroom server.')),
-    'lamp-server': (_('LAMP server'), _('Selects a ready-made Linux/Apache/MySQL/PHP server.')),
-    'mail-server': (_('Mail server'), _('This task selects a variety of package useful for a general purpose mail server system.')),
-    'openssh-server': (_('OpenSSH server'), _('Selects packages needed for an OpenSSH server.')),
-    'postgresql-server': (_('PostgreSQL database'), _('This task selects client and server packages for the PostgreSQL database. . PostgreSQL is an SQL relational database, offering increasing SQL92 compliance and some SQL3 features.  It is suitable for use with multi-user database access, through its facilities for transactions and fine-grained locking.')),
-    'print-server': (_('Print server'), _('This task sets up your system to be a print server.')),
-    'samba-server': (_('Samba file server'), _('This task sets up your system to be a Samba file server, which is  especially suitable in networks with both Windows and Linux systems.')),
-    'tomcat-server': (_('Tomcat Java server'), _('Selects a ready-made Java Application server.')),
-    'uec': (_('Ubuntu Enterprise Cloud (instance)'), _('Packages included in UEC images.')),
-    'virt-host': (_('Virtual Machine host'), _('Packages necessary to host virtual machines')),
-    'ubuntustudio-graphics': (_('2D/3D creation and editing suite'), _('2D/3D creation and editing suite')),
-    'ubuntustudio-audio': (_('Audio creation and editing suite'), _('Audio creation and editing suite')),
-    'edubuntu-desktop-kde': (_('Edubuntu KDE desktop'), _('This task provides the Edubuntu desktop environment (KDE variant).')),
-    'edubuntu-desktop-gnome': (_('Edubuntu desktop'), _('This task provides the Edubuntu desktop environment.')),
-    'kubuntu-desktop': (_('Kubuntu desktop'), _('This task provides the Kubuntu desktop environment.')),
-    'kubuntu-netbook': (_('Kubuntu netbook'), _('This task provides the Kubuntu desktop environment optimized for netbooks.')),
-    'ubuntustudio-audio-plugins': (_('LADSPA and DSSI audio plugins'), _('LADSPA and DSSI audio plugins')),
-    'ubuntustudio-font-meta': (_('Large selection of font packages'), _('Large selection of font packages')),
-    'mythbuntu-desktop': (_('Mythbuntu additional roles'), _('This task provides Mythbuntu roles for an existing system.')),
-    'mythbuntu-frontend': (_('Mythbuntu frontend'), _('This task installs a MythTV frontend. It needs an existing master backend somewhere on your network.')),
-    'mythbuntu-backend-master': (_('Mythbuntu master backend'), _('This task installs a MythTV master backend and a mysql server server system.')),
-    'mythbuntu-backend-slave': (_('Mythbuntu slave backend'), _('This task installs a MythTV slave backend. It needs an existing master backend somewhere on your network.')),
-    'mobile-mid': (_('Ubuntu MID edition'), _('This task provides the Ubuntu MID environment.')),
-    'ubuntu-netbook-remix': (_('Ubuntu Netbook Remix'), _('This task provides the Ubuntu Netbook Remix environment.')),
-    'ubuntu-desktop': (_('Ubuntu desktop'), _('This task provides the Ubuntu desktop environment.')),
-    'ubuntustudio-video': (_('Video creation and editing suite'), _('Video creation and editing suite')),
-    'xubuntu-desktop': (_('Xubuntu desktop'), _('This task provides the Xubuntu desktop environment.')),
-    'edubuntu-dvd-live': (_('Edubuntu live DVD'), _('This task provides the extra packages installed on the Ubuntu live DVD, above and beyond those included on the Ubuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'kubuntu-netbook-live': (_('Kubuntu Netbook Edition live CD'), _('This task provides the extra packages installed on the Kubuntu Netbook live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'kubuntu-live': (_('Kubuntu live CD'), _('This task provides the extra packages installed on the Kubuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'kubuntu-dvd-live': (_('Kubuntu live DVD'), _('This task provides the extra packages installed on the Kubuntu live DVD, above and beyond those included on the Kubuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'mythbuntu-live': (_('Mythbuntu live CD'), _('This task provides the extra packages installed on the Mythbuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'mobile-live': (_('Ubuntu MID live environment'), _('This task provides the extra packages installed in the Ubuntu MID live environment. It is neither useful nor recommended to install this task in other environments.')),
-    'unr-live': (_('Ubuntu Netbook Remix live environment'), _('This task provides the extra packages installed in the Ubuntu Netbook Remix live environment. It is neither useful nor recommended to install this task in other environments.')),
-    'ubuntu-live': (_('Ubuntu live CD'), _('This task provides the extra packages installed on the Ubuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'ubuntu-dvd-live': (_('Ubuntu live DVD'), _('This task provides the extra packages installed on the Ubuntu live DVD, above and beyond those included on the Ubuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-    'xubuntu-live': (_('Xubuntu live CD'), _('This task provides the extra packages installed on the Xubuntu live CD. It is neither useful nor recommended to install this task in other environments.')),
-}
-
-class TaskView(gtk.TreeView):
-    (COLUMN_ACTION,
-     COLUMN_TASK,
-     COLUMN_NAME,
-     COLUMN_DESC,
-    ) = range(4)
-
-    def __init__(self):
-        gtk.TreeView.__init__(self)
-
-        self.set_headers_visible(False)
-        self.set_rules_hint(True)
-        self.model = self.__create_model()
-        self.set_model(self.model)
-        self.update_model()
-        self.__add_columns()
-
-        selection = self.get_selection()
-        selection.select_iter(self.model.get_iter_first())
-
-    def __create_model(self):
-        '''The model is icon, title and the list reference'''
-        model = gtk.ListStore(
-                    gobject.TYPE_STRING, #Install status
-                    gobject.TYPE_STRING,  #package name
-                    gobject.TYPE_STRING,  #task name
-                    gobject.TYPE_STRING,  #task description
-                    )
-        
-        return model
-
-    def __add_columns(self):
-        column = gtk.TreeViewColumn(_('Categories'))
-
-        renderer = gtk.CellRendererText()
-        renderer.set_property('ellipsize', pango.ELLIPSIZE_END)
-        renderer.set_property('mode', gtk.CELL_RENDERER_MODE_ACTIVATABLE)
-        column.pack_start(renderer, True)
-        column.set_sort_column_id(self.COLUMN_NAME)
-        column.set_attributes(renderer, markup=self.COLUMN_DESC)
-        column.set_resizable(True)
-        self.append_column(column)
-
-        renderer = CellRendererButton()
-        renderer.connect("clicked", self.on_action_clicked)
-        column.pack_end(renderer, False)
-        column.set_attributes(renderer, text=self.COLUMN_ACTION)
-
-    def create_task_dialog(self, title, desc, updateview):
-        dialog = QuestionDialog(desc, title=title)
-        vbox = dialog.vbox
-        swindow = gtk.ScrolledWindow()
-        swindow.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
-        swindow.set_size_request(-1, 200)
-        vbox.pack_start(swindow, False, False, 0)
-        swindow.add(updateview)
-        swindow.show_all()
-
-        return dialog
-
-    def filter_remove_packages(self, string):
-        pkgs_list = [pkg.strip('-') for pkg in string.split() if pkg.endswith('-') and pkg != '--']
-
-        new_list = []
-        for pkg in pkgs_list:
-            if PackageInfo(pkg).check_installed():
-                new_list.append(pkg)
-
-        return new_list
-
-    def on_action_clicked(self, cell, path):
-        iter = self.model.get_iter_from_string(path)
-        installed = self.model.get_value(iter, self.COLUMN_ACTION)
-        task = self.model.get_value(iter, self.COLUMN_TASK)
-        name = self.model.get_value(iter, self.COLUMN_NAME)
-
-        self.set_busy()
-        updateview = UpdateView()
-        updateview.set_headers_visible(False)
-
-        if installed == 'Installed':
-            dialog = InfoDialog(_('You\'ve installed the <b>"%s"</b> task.' % name))
-            dialog.add_button(_('Remove'), gtk.RESPONSE_YES)
-            res = dialog.run()
-            dialog.destroy()
-            if res == gtk.RESPONSE_YES:
-                dialog = WarningDialog(_('It is dangerous to remove a task, it may remove the desktop related packages.\nPlease only continue when you know what you are doing.'),
-                         title=_("Dangerous!"))
-                res = dialog.run()
-                dialog.destroy()
-
-                if res == gtk.RESPONSE_YES:
-                    data = os.popen('tasksel -t remove %s' % task).read()
-                    pkgs = self.filter_remove_packages(data)
-                    updateview.update_updates(pkgs)
-                    updateview.select_all_action(True)
-
-                    dialog = self.create_task_dialog(title=_('Packages will be removed'),
-                            desc = _('You are going to remove the <b>"%s"</b> task.\nThe following packages will be remove.' % name),
-                            updateview=updateview)
-
-                    res = dialog.run()
-                    dialog.destroy()
-
-                    if res == gtk.RESPONSE_YES:
-                        PACKAGE_WORKER.perform_action(self.get_toplevel(), [], updateview.to_add)
-                        PACKAGE_WORKER.update_apt_cache(True)
-                        self.update_model()
-        else:
-            list = os.popen('tasksel --task-packages %s' % task).read().split('\n')
-            list = [pkg for pkg in list if pkg.strip() and not PackageInfo(pkg).check_installed()]
-
-            updateview.update_updates(list)
-            updateview.select_all_action(True)
-
-            dialog = self.create_task_dialog(title=_('New packages will be installed'),
-                    desc = _('You are going to install the <b>"%s"</b> task.\nThe following packager will be installed.' % name),
-                    updateview=updateview)
-
-            res = dialog.run()
-            dialog.destroy()
-
-            if res == gtk.RESPONSE_YES:
-                PACKAGE_WORKER.perform_action(self.get_toplevel(), updateview.to_add, [])
-                PACKAGE_WORKER.update_apt_cache(True)
-                self.update_model()
-
-        print self.model.get_value(iter, self.COLUMN_ACTION)
-
-        self.unset_busy()
-
-    def update_model(self):
-        self.model.clear()
-        data = os.popen('tasksel --list').read().strip()
-
-        for line in data.split('\n'):
-            installed = line[0] == 'i'
-            task, name = line[2:].split('\t')
-
-            if task == 'manual':
-                continue
-
-            if installed:
-                installed = _('Installed')
-            else:
-                installed = _('Install')
-
-            name, desc = TASKS[task]
-            iter = self.model.append()
-            self.model.set(iter, 
-                    self.COLUMN_ACTION, installed,
-                    self.COLUMN_TASK, task,
-                    self.COLUMN_NAME, name,
-                    self.COLUMN_DESC, '<b>%s</b>\n%s' % (name, desc))
-
-    def set_busy(self):
-        window = self.get_toplevel().window
-        if window:
-            window.set_cursor(gtk.gdk.Cursor(gtk.gdk.WATCH))
-
-    def unset_busy(self):
-        window = self.get_toplevel().window
-        if window:
-            window.set_cursor(None)
-
-class TaskInstall(TweakModule):
-    __title__ = _('Task Install')
-    __desc__ = _('Setup a full-function environment with just one-click\n'
-                 'If you want to remove a task, click the "Installed" button')
-    __icon__ = ['application-x-deb']
-    __category__ = 'system'
-    #TODO Maybe set active again
-    __utactive__ = False
-
-    def __init__(self):
-        TweakModule.__init__(self)
-
-        taskview = TaskView()
-
-        self.add_start(taskview)
diff --git a/ubuntutweak/module/updatemanager.py b/ubuntutweak/module/updatemanager.py
deleted file mode 100755
index 6f77523..0000000
--- a/ubuntutweak/module/updatemanager.py
+++ /dev/null
@@ -1,109 +0,0 @@
-#!/usr/bin/python
-
-# Ubuntu Tweak - PyGTK based desktop configuration tool
-#
-# Copyright (C) 2007-2008 TualatriX <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-from gettext import ngettext
-from aptsources.sourceslist import SourcesList
-
-from ubuntutweak.modules  import TweakModule
-from ubuntutweak.ui import GconfCheckButton
-from ubuntutweak.ui.dialogs import InfoDialog
-from sourcecenter import UpdateView, refresh_source, UpdateCacheDialog
-from ubuntutweak.policykit import proxy
-
-from ubuntutweak.common.package import PACKAGE_WORKER
-
-class UpdateManager(TweakModule):
-    __title__ = _('Update Manager')
-    __desc__ = _('A simple and easy-to-use update manager')
-    __icon__ = 'system-software-update'
-    __category__ = 'application'
-
-    def __init__(self):
-        TweakModule.__init__(self, 'updatemanager.ui')
-
-        self.updateview = UpdateView()
-        self.updateview.connect('changed', self.on_update_status_changed)
-        self.updateview.connect('select', self.on_select_action)
-        self.update_list()
-        self.sw1.add(self.updateview)
-
-        button = GconfCheckButton(label=_('Automatically run System Update Manager'), 
-                                  key='/apps/update-notifier/auto_launch')
-        self.vbox1.pack_start(button, False, False, 0)
-
-        self.ppa_button = GconfCheckButton(
-                            label=_('Temporarily disable third-party PPA sources whilst refreshing'),
-                            key='/apps/ubuntu-tweak/disable_ppa')
-        self.vbox1.pack_start(self.ppa_button, False, False, 0)
-
-        self.reparent(self.main_vbox)
-
-    def update_list(self):
-        PACKAGE_WORKER.update_apt_cache(init=True)
-        self.updateview.get_model().clear()
-        self.updateview.update_updates(list(PACKAGE_WORKER.get_update_package()))
-        self.install_button.set_sensitive(False)
-
-    def on_refresh_button_clicked(self, widget):
-        do_ppa_disable = False
-        if self.ppa_button.get_active():
-            proxy.disable_ppa()
-            do_ppa_disable = True
-
-        UpdateCacheDialog(widget.get_toplevel()).run()
-
-        PACKAGE_WORKER.update_apt_cache(True)
-
-        new_updates = list(PACKAGE_WORKER.get_update_package())
-        if new_updates:
-            self.updateview.get_model().clear()
-            self.updateview.update_updates(new_updates)
-        else:
-            dialog = InfoDialog(_("Your system is clean and no updates are available."),
-                        title=_('Software information is now up-to-date'))
-
-            dialog.launch()
-
-        if do_ppa_disable:
-            proxy.enable_ppa()
-        self.emit('call', 'ubuntutweak.modules.sourcecenter', 'update_thirdparty', {})
-        self.emit('call', 'ubuntutweak.modules.sourceeditor', 'update_source_combo', {})
-
-    def on_select_action(self, widget, active):
-        self.updateview.select_all_action(active)
-
-    def on_update_status_changed(self, widget, count):
-        self.install_button.set_label(ngettext('Install Update',
-                                               'Install Updates', count))
-        if count:
-            self.install_button.set_sensitive(True)
-        else:
-            self.install_button.set_sensitive(False)
-
-    def on_install_button_clicked(self, widget):
-        PACKAGE_WORKER.perform_action(widget.get_toplevel(), self.updateview.to_add, self.updateview.to_rm)
-
-        PACKAGE_WORKER.update_apt_cache(True)
-
-        PACKAGE_WORKER.show_installed_status(self.updateview.to_add, self.updateview.to_rm)
-
-        self.updateview.get_model().clear()
-        self.updateview.update_updates(list(PACKAGE_WORKER.get_update_package()))
-        self.updateview.select_all_action(False)
diff --git a/ubuntutweak/modules/__init__.py b/ubuntutweak/modules/__init__.py
index 5a6b3e6..4abae6d 100644
--- a/ubuntutweak/modules/__init__.py
+++ b/ubuntutweak/modules/__init__.py
@@ -421,29 +421,6 @@ class BrokenModule(TweakModule):
     def __init__(self):
         TweakModule.__init__(self, 'brokenmodule.ui')
 
-        if '/etc/apt/apt.conf.d' in self.get_error():
-            p = re.compile('(/etc/apt/apt.conf.d/[\w-]+)')
-            broken_file = p.findall(self.get_error())[0]
-            self.message_label.set_text(_("Ubuntu Tweak has detected that your"
-             " apt configuration is broken.\nTry to fix by following steps:\n"
-             "\n\t1. Open your terminal\n\t2. Run the commands to fix:\n\n\t"
-             "\tsudo chmod 644 %(broken_file)s\n\t\tsudo chown root:root "
-             "%(broken_file)s\n\nOr you can submit the Error Message to the "
-             "developer for help:" % {'broken_file': broken_file}))
-        elif '/etc/apt/sources.list.d/' in self.get_error():
-            p = re.compile('(/etc/apt/sources.list.d/[\w-]+)')
-            broken_file = p.findall(self.get_error())[0]
-
-            self.message_label.set_text(_("Ubuntu Tweak has detected that your"
-             " apt list file is broken.\nTry to fix by following steps:\n\n\t1."
-             "Open your terminal\n\t2. Run the command to open apt list file:"
-             "\n\n\t\tsudo gedit %s\n\n\t3. Edit the list to make it correctly"
-             "\n\nOr you can submit the Error Message to the developer for"
-             "help:" % broken_file))
-
-        self.error_view.reparent(self.scrolled_window)
-        self.ohno_image.set_from_file(os.path.join(DATA_DIR, 'pixmaps/emblem-ohno.png'))
-
         self.add_start(self.alignment1)
 
     def on_report_button_clicked(self, widget):
diff --git a/ubuntutweak/network/utdata.py b/ubuntutweak/network/utdata.py
deleted file mode 100644
index a9040c3..0000000
--- a/ubuntutweak/network/utdata.py
+++ /dev/null
@@ -1,101 +0,0 @@
-import os
-import random
-import urllib
-import time
-import datetime
-
-from gettext import ngettext
-from urlparse import urljoin
-
-from ubuntutweak.common.consts import install_ngettext
-from ubuntutweak.utils.tar import TarFile
-
-install_ngettext()
-
-DEV_MODE = os.getenv('UT_DEV')
-DATA_MIRRORS = (
-    'http://ubuntu-tweak.com/',
-    'http://ubuntu-tweak.lfeng.me/'
-)
-
-if DEV_MODE == 'local':
-    URL_PREFIX = 'http://127.0.0.1:8000/'
-else:
-    URL_PREFIX = DATA_MIRRORS[random.randint(0, len(DATA_MIRRORS)-1)]
-
-def get_version_url(version_url):
-    if DEV_MODE:
-        return urljoin(URL_PREFIX, '%sdev/' % version_url)
-    else:
-        return urljoin(URL_PREFIX, version_url)
-
-def get_download_url(download_url):
-    return urljoin(URL_PREFIX, download_url)
-
-def get_local_timestamp(folder):
-    local_timestamp = os.path.join(folder, 'timestamp')
-
-    if os.path.exists(local_timestamp):
-        local_version = open(local_timestamp).read()
-    else:
-        local_version = '0'
-
-    return local_version
-
-def get_local_time(folder):
-    timestamp = get_local_timestamp(folder)
-    if timestamp > '0':
-        return time.strftime('%Y-%m-%d %H:%M', time.localtime(float(timestamp)))
-    else:
-        return _('Never')
-
-def save_synced_timestamp(folder):
-    synced = os.path.join(folder, 'synced')
-    f = open(synced, 'w')
-    f.write(str(int(time.time())))
-    f.close()
-
-def get_last_synced(folder):
-    try:
-        timestamp = open(os.path.join(folder, 'synced')).read()
-        now = time.time()
-
-        o_delta = datetime.timedelta(seconds=float(timestamp))
-        n_delta = datetime.timedelta(seconds=now)
-
-        difference = n_delta - o_delta
-
-        weeks, days = divmod(difference.days, 7)
-
-        minutes, seconds = divmod(difference.seconds, 60)
-        hours, minutes = divmod(minutes, 60)
-
-        if weeks:
-            return ngettext('%d week ago', '%d weeks ago', weeks) % weeks
-        if days:
-            return ngettext('%d day ago', '%d days ago', days) % days
-        if hours:
-            return ngettext('%d hour ago', '%d hours ago', hours) % hours
-        if minutes:
-            return ngettext('%d minute ago', '%d minutes ago', minutes) % minutes
-        return _('Just Now')
-    except:
-        return _('Never')
-
-def check_update_function(url, folder, update_setter, version_setter, auto):
-    remote_version = urllib.urlopen(url).read()
-    if remote_version.isdigit():
-        local_version = get_local_timestamp(folder)
-
-        if remote_version > local_version:
-            if auto:
-                update_setter.set_value(True)
-            version_setter.set_value(remote_version)
-            return True
-        else:
-            return False
-    else:
-        return False
-
-def create_tarfile(path):
-    return TarFile(path)
diff --git a/ubuntutweak/network/xmlrpc.py b/ubuntutweak/network/xmlrpc.py
deleted file mode 100644
index e8127f2..0000000
--- a/ubuntutweak/network/xmlrpc.py
+++ /dev/null
@@ -1,7 +0,0 @@
-from xmlrpclib import ServerProxy, Error
-
-proxy = ServerProxy('http://127.0.0.1:8000/xmlrpc/')
-
-if __name__ == '__main__':
-    print proxy.user.authenticate('tualatrix','123456')
-    print proxy.func.test('tualatrix','123456', 'Hello World')
diff --git a/ubuntutweak/policykit/__init__.py b/ubuntutweak/policykit/__init__.py
index 518de8b..7061115 100644
--- a/ubuntutweak/policykit/__init__.py
+++ b/ubuntutweak/policykit/__init__.py
@@ -1,3 +1 @@
 PK_ACTION_TWEAK = 'com.ubuntu-tweak.daemon.tweak'
-PK_ACTION_CLEAN = 'com.ubuntu-tweak.daemon.clean'
-PK_ACTION_SOURCE = 'com.ubuntu-tweak.daemon.edit-sources'
diff --git a/ubuntutweak/policykit/widgets.py b/ubuntutweak/policykit/widgets.py
deleted file mode 100644
index ce0d681..0000000
--- a/ubuntutweak/policykit/widgets.py
+++ /dev/null
@@ -1,91 +0,0 @@
-# Ubuntu Tweak - Ubuntu Configuration Tool
-#
-# Copyright (C) 2007-2011 Tualatrix Chou <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import dbus
-
-from gi.repository import GObject, Gtk, Gio
-from ubuntutweak.gui.gtk import set_busy, unset_busy
-
-from aptdaemon import policykit1
-from defer import inline_callbacks
-
-class PolkitAction(GObject.GObject):
-    """
-    PolicyKit action, if changed return 0, means authenticate failed, 
-    return 1, means authenticate successfully
-    """
-
-    def __init__(self, action):
-        GObject.GObject.__init__(self)
-
-        self.action = action
-
-    @inline_callbacks
-    def do_authenticate(self):
-        bus = dbus.SystemBus()
-        name = bus.get_unique_name()
-        flags = policykit1.CHECK_AUTH_ALLOW_USER_INTERACTION
-
-        yield policykit1.check_authorization_by_name(name, self.action, flags=flags)
-
-
-class PolkitButton(Gtk.Button):
-    __gsignals__ = {
-        'authenticated': (GObject.SignalFlags.RUN_FIRST, None, ()),
-    }
-
-    def __init__(self, action):
-        GObject.GObject.__init__(self)
-        self.icon_unlock = ('changes-allow-symbolic', 'changes-allow')
-        self.icon_lock = ('changes-prevent-symbolic', 'changes-prevent')
-
-        self.hbox = Gtk.HBox(spacing=6)
-        self.add(self.hbox)
-
-        self.image = Gtk.Image.new_from_gicon(Gio.ThemedIcon.new_from_names(self.icon_lock),
-                                         Gtk.IconSize.BUTTON)
-        self.hbox.pack_start(self.image, False, False, 0)
-
-        self.label = Gtk.Label(_('_Unlock'))
-        self.label.set_use_underline(True)
-        self.hbox.pack_start(self.label, False, False, 0)
-
-        self._action = PolkitAction(action)
-        self.connect('clicked', self.on_button_clicked)
-
-        self.show_all()
-
-    @inline_callbacks
-    def on_button_clicked(self, widget):
-        set_busy(widget.get_toplevel())
-        try:
-            yield self._action.do_authenticate()
-        except Exception, e:
-            import logging
-            logging.getLogger('PolkitButton').debug(e)
-            unset_busy(widget.get_toplevel())
-            return
-
-        self.emit('authenticated')
-        self._change_button_state()
-        unset_busy(widget.get_toplevel())
-
-    def _change_button_state(self):
-        self.image.set_from_gicon(Gio.ThemedIcon.new_from_names(self.icon_unlock), Gtk.IconSize.BUTTON)
-
-        self.set_sensitive(False)
diff --git a/ubuntutweak/system/__init__.py b/ubuntutweak/system/__init__.py
index 96ee5bc..d3cc0bd 100644
--- a/ubuntutweak/system/__init__.py
+++ b/ubuntutweak/system/__init__.py
@@ -4,28 +4,12 @@ import platform
 from ubuntutweak.common.consts import APP, PKG_VERSION
 
 def get_distro():
-    '''It should be "Ubuntu 10.10 maverick"'''
-    return ' '.join(platform.dist())
+    '''platform.dist() and platform.linux_distribution() are blank in Arch Linux'''
+    '''Hackish removal of newline :)'''
+    return 'Arch Linux ' + os.popen("echo -n $(uname -m)").read()
 
 def get_codename():
-    try:
-        codename = os.popen('lsb_release -cs').read().strip()
-        if codename in ['karmic', 'helena', 'Helena']:
-            return 'karmic'
-        elif codename in ['lucid', 'isadora', 'Isadora']:
-            return 'lucid'
-        elif codename in ['maverick', 'julia']:
-            return 'maverick'
-        elif codename in ['natty', 'katya']:
-            return 'natty'
-        elif codename in ['oneiric', 'lisa']:
-            return 'oneiric'
-        elif codename in ['precise', 'maya', 'Maya']:
-            return 'precise'
-        return codename
-    except:
-        pass
-    return ''
+    return 'Arch Linux'
 
 def get_desktop():
     '''
@@ -67,14 +51,9 @@ CODENAME = get_codename()
 DESKTOP = get_desktop()
 DESKTOP_FULLNAME = get_desktop_fullname()
 APP = get_app()
-UBUNTU_CODENAMES = ('dapper', 'edgy', 'feisty',
-                    'gutsy', 'hardy', 'intrepid',
-                    'jaunty', 'karmic', 'lucid',
-                    'maverick', 'natty', 'oneiric',
-                    'precise', 'quantal', 'raring', 'saucy')
 
 def is_supported(codename=CODENAME):
-    return codename in ('precise', 'quantal', 'raring', 'saucy', 'trusty')
+    return codename in ('Arch Linux')
 
 
 if __name__ == '__main__':
diff --git a/ubuntutweak/tweaks/loginsettings.py b/ubuntutweak/tweaks/loginsettings.py
deleted file mode 100644
index 271090c..0000000
--- a/ubuntutweak/tweaks/loginsettings.py
+++ /dev/null
@@ -1,232 +0,0 @@
-# Ubuntu Tweak - Ubuntu Configuration Tool
-#
-# Copyright (C) 2007-2011 Tualatrix Chou <tualatrix@gmail.com>
-#
-# Ubuntu Tweak is free software; you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation; either version 2 of the License, or
-# (at your option) any later version.
-#
-# Ubuntu Tweak is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with Ubuntu Tweak; if not, write to the Free Software Foundation, Inc.,
-# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
-
-import os
-import logging
-
-from gi.repository import Gtk, GdkPixbuf
-
-from ubuntutweak import system
-from ubuntutweak.factory import WidgetFactory
-from ubuntutweak.modules  import TweakModule
-from ubuntutweak.gui.treeviews import get_local_path
-from ubuntutweak.gui.containers import ListPack, GridPack
-from ubuntutweak.policykit import PK_ACTION_TWEAK
-from ubuntutweak.utils import theme
-from ubuntutweak.settings.configsettings import SystemConfigSetting
-from ubuntutweak.settings.gsettings import GSetting
-
-log = logging.getLogger('LoginSettings')
-
-class LoginSettings(TweakModule):
-    __title__ = _('Login Settings')
-    __desc__ = _('Control the appearance and behaviour of your login screen')
-    __icon__ = 'gdm-setup'
-    __policykit__ = PK_ACTION_TWEAK
-    __category__ = 'startup'
-
-    utext_allow_guest = _('Guest account:')
-    utext_draw_grid = _('Draw grid:')
-    utext_login_sound = _('Play login sound:')
-    utext_gtk_theme = _('Gtk theme:')
-    utext_icon_theme = _('Icon theme:')
-
-    @classmethod
-    def is_active(cls):
-        return os.path.exists('/usr/sbin/lightdm')
-
-    def __init__(self):
-        TweakModule.__init__(self, 'loginsettings.ui')
-
-        valid_themes = theme.get_valid_themes()
-        valid_icon_themes = theme.get_valid_icon_themes()
-
-        notes_label = Gtk.Label()
-        notes_label.set_property('halign', Gtk.Align.START)
-        notes_label.set_markup('<span size="smaller">%s</span>' % \
-                _('Note: you may need to reboot to take effect'))
-        notes_label._ut_left = 1
-
-        self.login_box = GridPack(
-                        WidgetFactory.create('Switch',
-                            label=self.utext_allow_guest,
-                            key='/etc/lightdm/lightdm.conf::SeatDefaults#allow-guest',
-                            default=True,
-                            backend='systemconfig'),
-                        notes_label,
-                        WidgetFactory.create('Switch',
-                            label=self.utext_draw_grid,
-                            key='50_unity-greeter.gschema.override::com.canonical.unity-greeter#draw-grid',
-                            backend='systemconfig'),
-                        WidgetFactory.create('Switch',
-                            label=self.utext_login_sound,
-                            key='50_unity-greeter.gschema.override::com.canonical.unity-greeter#play-ready-sound',
-                            backend='systemconfig'),
-                        WidgetFactory.create('ComboBox',
-                            label=self.utext_gtk_theme,
-                            key='50_unity-greeter.gschema.override::com.canonical.unity-greeter#theme-name',
-                            backend='systemconfig',
-                            texts=valid_themes,
-                            values=valid_themes),
-                        WidgetFactory.create('ComboBox',
-                            label=self.utext_icon_theme,
-                            key='50_unity-greeter.gschema.override::com.canonical.unity-greeter#icon-theme-name',
-                            backend='systemconfig',
-                            texts=valid_icon_themes,
-                            values=valid_icon_themes),
-                        )
-
-        self.login_box.set_sensitive(False)
-        self.add_start(self.login_box, False, False, 0)
-
-        if system.CODENAME != 'saucy':
-            self.add_start(Gtk.Separator(), False, False, 6)
-
-            self._setup_logo_image()
-            self._setup_background_image()
-
-            box = ListPack('', (self.main_vbox))
-            self.add_start(box, False, False, 0)
-
-    def _setup_logo_image(self):
-        self._greeter_logo = SystemConfigSetting('50_unity-greeter.gschema.override::com.canonical.unity-greeter#logo', type=str)
-        logo_path = self._greeter_logo.get_value()
-
-        if logo_path:
-            self.logo_image.set_from_file(logo_path)
-
-    def _setup_background_image(self):
-        self._greeter_background = SystemConfigSetting('50_unity-greeter.gschema.override::com.canonical.unity-greeter#background', type=str)
-        background_path = self._greeter_background.get_value()
-
-        log.debug("Setup the background file: %s" % background_path)
-
-        if background_path:
-            try:
-                pixbuf = GdkPixbuf.Pixbuf.new_from_file(background_path)
-                pixbuf = pixbuf.scale_simple(160, 120, GdkPixbuf.InterpType.NEAREST)
-                self.background_image.set_from_pixbuf(pixbuf)
-            except Exception, e:
-                log.error("Loading background failed, message is %s" % e)
-
-    def _get_desktop_background_path(self):
-        return get_local_path(GSetting('org.gnome.desktop.background.picture-uri').get_value())
-
-    def on_polkit_action(self, widget):
-        self.main_vbox.set_sensitive(True)
-        if hasattr(self, 'login_box'):
-            self.login_box.set_sensitive(True)
-
-    def on_logo_button_clicked(self, widget):
-        dialog = Gtk.FileChooserDialog(_('Choose a new logo image'),
-                                        action=Gtk.FileChooserAction.OPEN,
-                                        buttons=(Gtk.STOCK_REVERT_TO_SAVED, Gtk.ResponseType.DELETE_EVENT,
-                                                 Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
-                                                 Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))
-        filter = Gtk.FileFilter()
-        filter.set_name(_('All images (*.PNG)'))
-        filter.add_pattern('*.png')
-        dialog.set_current_folder(os.path.expanduser('~'))
-        dialog.add_filter(filter)
-        self._set_preview_widget_for_dialog(dialog)
-
-        orignal_logo = '/usr/share/unity-greeter/logo.png'
-
-        filename = ''
-        response = dialog.run()
-
-        if response == Gtk.ResponseType.ACCEPT:
-            filename = dialog.get_filename()
-            dialog.destroy()
-
-            if filename:
-                self._greeter_logo.set_value(filename)
-                self._setup_logo_image()
-        elif response == Gtk.ResponseType.DELETE_EVENT:
-            dialog.destroy()
-            self._greeter_logo.set_value(orignal_logo)
-            self._setup_logo_image()
-        else:
-            dialog.destroy()
-            return
-
-    def _set_preview_widget_for_dialog(self, dialog):
-        preview = Gtk.Image()
-        dialog.set_preview_widget(preview)
-        dialog.connect('update-preview', self.on_update_preview, preview)
-
-    def on_update_preview(self, dialog, preview):
-        filename = dialog.get_preview_filename()
-        try:
-            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_size(filename, 128, 128)
-        except Exception, e:
-            log.error(e)
-            pixbuf = None
-
-        if pixbuf:
-            preview.set_from_pixbuf(pixbuf)
-
-            dialog.set_preview_widget_active(True)
-        else:
-            dialog.set_preview_widget_active(False)
-
-    def on_background_button_clicked(self, widget):
-        dialog = Gtk.FileChooserDialog(_('Choose a new background image'),
-                                        action=Gtk.FileChooserAction.OPEN,
-                                        buttons=(Gtk.STOCK_REVERT_TO_SAVED, Gtk.ResponseType.DELETE_EVENT,
-                                                 Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
-                                                 Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))
-        filter = Gtk.FileFilter()
-        filter.set_name(_('All images'))
-        filter.add_pattern('*.jpg')
-        filter.add_pattern('*.png')
-        filter.add_pattern('*.JPG')
-        filter.add_pattern('*.PNG')
-        dialog.set_current_folder('/usr/share/backgrounds')
-        dialog.add_filter(filter)
-        self._set_preview_widget_for_dialog(dialog)
-
-        orignal_background = '/usr/share/backgrounds/warty-final-ubuntu.png'
-        filename = ''
-        response = dialog.run()
-
-        if response == Gtk.ResponseType.ACCEPT:
-            filename = dialog.get_filename()
-            log.debug("Get background file, the path is: %s" % filename)
-            dialog.destroy()
-
-            if filename:
-                self._greeter_background.set_value(filename)
-
-                self._setup_background_image()
-        elif response == Gtk.ResponseType.DELETE_EVENT:
-            dialog.destroy()
-            self._greeter_background.set_value(orignal_background)
-            self._setup_background_image()
-        else:
-            dialog.destroy()
-            return
-
-    def on_same_background_button_clicked(self, widget):
-        log.debug('on_same_background_button_clicked')
-        background_path = self._get_desktop_background_path()
-
-        if background_path and \
-                background_path != self._greeter_background.get_value():
-            self._greeter_background.set_value(background_path)
-            self._setup_background_image()
diff --git a/ubuntutweak/utils/package.py b/ubuntutweak/utils/package.py
deleted file mode 100644
index 051f315..0000000
--- a/ubuntutweak/utils/package.py
+++ /dev/null
@@ -1,177 +0,0 @@
-import logging
-
-import apt
-import apt_pkg
-import aptdaemon.client
-import aptdaemon.errors
-
-from aptdaemon.enums import *
-from aptdaemon.gtk3widgets import AptErrorDialog, AptProgressDialog, AptConfirmDialog
-
-from gi.repository import Gtk, Gdk
-
-from defer import inline_callbacks, return_value
-
-from ubuntutweak.gui.gtk import post_ui, unset_busy
-from ubuntutweak.common.debug import log_func
-
-log = logging.getLogger('package')
-
-
-class NewAptProgressDialog(AptProgressDialog):
-    def run(self, attach=False, close_on_finished=True, show_error=True,
-            reply_handler=None, error_handler=None):
-        """Run the transaction and show the progress in the dialog.
-
-        Keyword arguments:
-        attach -- do not start the transaction but instead only monitor
-                  an already running one
-        close_on_finished -- if the dialog should be closed when the
-                  transaction is complete
-        show_error -- show a dialog with the error message
-        """
-        try:
-            self._run(attach, close_on_finished, show_error, error_handler)
-        except Exception, error:
-            if error_handler:
-                error_handler(error)
-            else:
-                raise
-        if reply_handler:
-            reply_handler()
-
-    @inline_callbacks
-    def _run(self, attach, close_on_finished, show_error, error_handler):
-        parent = self.get_transient_for()
-        sig = self._transaction.connect("finished", self._on_finished,
-                                        close_on_finished, show_error)
-        self._signals.append(sig)
-        if attach:
-            yield self._transaction.attach()
-        else:
-            if self.debconf:
-                yield self._transaction.set_debconf_frontend("gnome")
-            try:
-                deferred = self._transaction.run()
-                yield deferred
-            except Exception, error:
-                error_handler(error)
-                self._transaction.emit('finished', '')
-                yield deferred
-        self.show_all()
-
-    def _on_finished(self, transaction, status, close, show_error):
-        if close:
-            self.hide()
-            if status == EXIT_FAILED and show_error:
-                Gdk.threads_enter()
-                err_dia = AptErrorDialog(self._transaction.error, self)
-                err_dia.run()
-                err_dia.hide()
-                Gdk.threads_leave()
-        self.emit("finished")
-
-
-class AptWorker(object):
-    cache = None
-
-    @log_func(log)
-    def __init__(self, parent,
-                 finish_handler=None, error_handler=None,data=None):
-        '''
-        finish_handler: must take three parameter
-        '''
-        self.parent = parent
-        self.data = data
-        self.finish_handler = finish_handler
-        if error_handler:
-            self._on_error = error_handler
-        self.ac = aptdaemon.client.AptClient()
-
-    @log_func(log)
-    def _simulate_trans(self, trans):
-        trans.simulate(reply_handler=lambda: self._confirm_deps(trans),
-                       error_handler=self._on_error)
-
-    @post_ui
-    def _confirm_deps(self, trans):
-        if [pkgs for pkgs in trans.dependencies if pkgs]:
-            dia = AptConfirmDialog(trans, parent=self.parent)
-            res = dia.run()
-            dia.hide()
-            if res != Gtk.ResponseType.OK:
-                log.debug("Response is: %s" % res)
-                if self.finish_handler:
-                    log.debug("Finish_handler...")
-                    self.finish_handler(trans, 0, self.data)
-                return
-        self._run_transaction(trans)
-
-    @log_func(log)
-    def _run_transaction(self, transaction):
-        dia = NewAptProgressDialog(transaction, parent=self.parent)
-        if self.finish_handler:
-            log.debug("Connect to finish_handler...")
-            transaction.connect('finished', self.finish_handler, self.data)
-
-        dia.run(close_on_finished=True, show_error=True,
-                reply_handler=lambda: True,
-                error_handler=self._on_error)
-
-    @post_ui
-    def _on_error(self, error):
-        try:
-            raise error
-        except aptdaemon.errors.NotAuthorizedError:
-            log.debug("aptdaemon.errors.NotAuthorizedError")
-            # Silently ignore auth failures
-            return
-        except aptdaemon.errors.TransactionFailed, error:
-            log.error("TransactionFailed: %s" % error)
-        except Exception, error:
-            log.error("TransactionFailed with unknown error: %s" % error)
-            error = aptdaemon.errors.TransactionFailed(ERROR_UNKNOWN,
-                                                       str(error))
-        dia = AptErrorDialog(error)
-        dia.run()
-        dia.hide()
-
-    def update_cache(self, *args):
-        return self.ac.update_cache(reply_handler=self._run_transaction,
-                                    error_handler=self._on_error)
-
-    @log_func(log)
-    def install_packages(self, packages, *args):
-        self.ac.install_packages(packages,
-                                 reply_handler=self._simulate_trans,
-                                 error_handler=self._on_error)
-
-    @log_func(log)
-    def remove_packages(self, packages, *args):
-        self.ac.remove_packages(packages,
-                                reply_handler=self._simulate_trans,
-                                error_handler=self._on_error)
-
-    @log_func(log)
-    def downgrade_packages(self, packages, *args):
-        self.ac.commit_packages([], [], [], [], [], packages,
-                                reply_handler=self._simulate_trans,
-                                error_handler=self._on_error)
-
-    @classmethod
-    def get_cache(self):
-        try:
-            self.update_apt_cache()
-        except Exception, e:
-            self.is_apt_broken = True
-            self.apt_broken_message = e
-            log.error("Error happened when get_cache(): %s" % str(e))
-        finally:
-            return self.cache
-
-    @classmethod
-    def update_apt_cache(self, init=False):
-        '''if init is true, force to update, or it will update only once'''
-        if init or not getattr(self, 'cache'):
-            apt_pkg.init()
-            self.cache = apt.Cache()
diff --git a/ubuntutweak/utils/ppa.py b/ubuntutweak/utils/ppa.py
deleted file mode 100644
index 058b350..0000000
--- a/ubuntutweak/utils/ppa.py
+++ /dev/null
@@ -1,54 +0,0 @@
-import os
-import glob
-import logging
-
-log = logging.getLogger('utils.ppa')
-
-PPA_URL = 'ppa.launchpad.net'
-
-def is_ppa(url):
-    return PPA_URL in url
-
-def get_list_name(url):
-    if os.uname()[-1] == 'x86_64':
-        arch = 'amd64'
-    else:
-        arch = 'i386'
-
-    section = url.split('/')
-    name = '/var/lib/apt/lists/ppa.launchpad.net_%s_%s_*%s_Packages' % (section[3], section[4], arch)
-    log.debug("lists name: %s" % name)
-    names = glob.glob(name)
-    log.debug("lists names: %s" % names)
-    if len(names) == 1:
-        return names[0]
-    else:
-        return ''
-
-def get_basename(url):
-    section = url.split('/')
-    return '%s/%s' % (section[3], section[4])
-
-def get_short_name(url):
-    return 'ppa:%s' % get_basename(url)
-
-def get_long_name(url):
-    basename = get_basename(url)
-
-    return '<b>%s</b>\nppa:%s' % (basename, basename)
-
-def get_homepage(url):
-    section = url.split('/')
-    return 'https://launchpad.net/~%s/+archive/%s' % (section[3], section[4])
-
-def get_source_file_name(url):
-    section = url.split('/')
-    return '%s-%s' % (section[3], section[4])
-
-def get_ppa_origin_name(url):
-    section = url.split('/')
-    # Due to the policy of ppa orgin naming, if an ppa is end with "ppa", so ignore it
-    if section[4] == 'ppa':
-        return 'LP-PPA-%s' % section[3]
-    else:
-        return 'LP-PPA-%s-%s' % (section[3], section[4])
-- 
2.2.1

